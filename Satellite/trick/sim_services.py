# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sim_services', [dirname(__file__)])
        except ImportError:
            import _sim_services
            return _sim_services
        if fp is not None:
            try:
                _mod = imp.load_module('_sim_services', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sim_services = swig_import_helper()
    del swig_import_helper
else:
    import _sim_services
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _sim_services.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sim_services.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sim_services.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sim_services.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sim_services.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sim_services.SwigPyIterator_copy(self)

    def next(self):
        return _sim_services.SwigPyIterator_next(self)

    def __next__(self):
        return _sim_services.SwigPyIterator___next__(self)

    def previous(self):
        return _sim_services.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sim_services.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sim_services.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sim_services.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sim_services.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sim_services.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sim_services.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sim_services.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _sim_services.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    all_keys = [attr for attr in dir(class_type) if not attr.startswith('__')and attr != '_s' ]
    data_keys = sorted(class_type.__swig_setmethods__.keys())
    method_keys = [ x for x in all_keys if x not in data_keys ]
    raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
     (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
# this line is changed to handle older swigs that used PySwigObject instead of the current SwigPyObject
        if type(value).__name__ == 'SwigPyObject' or type(value).__name__ == 'PySwigObject' :
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        all_keys = [attr for attr in dir(class_type) if not attr.startswith('__') and attr != '_s' ]
        data_keys = sorted(class_type.__swig_setmethods__.keys())
        method_keys = [ x for x in all_keys if x not in data_keys ]
        raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
         (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,1)

class swig_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_double, name)
    __swig_setmethods__["value"] = _sim_services.swig_double_value_set
    __swig_getmethods__["value"] = _sim_services.swig_double_value_get
    if _newclass:
        value = _swig_property(_sim_services.swig_double_value_get, _sim_services.swig_double_value_set)
    __swig_setmethods__["units"] = _sim_services.swig_double_units_set
    __swig_getmethods__["units"] = _sim_services.swig_double_units_get
    if _newclass:
        units = _swig_property(_sim_services.swig_double_units_get, _sim_services.swig_double_units_set)
    __swig_setmethods__["str_output"] = _sim_services.swig_double_str_output_set
    __swig_getmethods__["str_output"] = _sim_services.swig_double_str_output_get
    if _newclass:
        str_output = _swig_property(_sim_services.swig_double_str_output_get, _sim_services.swig_double_str_output_set)

    def __init__(self, *args):
        this = _sim_services.new_swig_double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __str__(self, *args):
        return _sim_services.swig_double___str__(self, *args)

    def __repr__(self, *args):
        return _sim_services.swig_double___repr__(self, *args)

    def __add__(self, *args):
        return _sim_services.swig_double___add__(self, *args)

    def __sub__(self, *args):
        return _sim_services.swig_double___sub__(self, *args)

    def __mul__(self, *args):
        return _sim_services.swig_double___mul__(self, *args)

    def __div__(self, *args):
        return _sim_services.swig_double___div__(self, *args)

    def __truediv__(self, *args):
        return _sim_services.swig_double___truediv__(self, *args)

    def __floordiv__(self, *args):
        return _sim_services.swig_double___floordiv__(self, *args)

    def __mod__(self, *args):
        return _sim_services.swig_double___mod__(self, *args)

    def __pow__(self, *args):
        return _sim_services.swig_double___pow__(self, *args)

    def __radd__(self, *args):
        return _sim_services.swig_double___radd__(self, *args)

    def __rsub__(self, *args):
        return _sim_services.swig_double___rsub__(self, *args)

    def __rmul__(self, *args):
        return _sim_services.swig_double___rmul__(self, *args)

    def __rdiv__(self, *args):
        return _sim_services.swig_double___rdiv__(self, *args)

    def __rtruediv__(self, *args):
        return _sim_services.swig_double___rtruediv__(self, *args)

    def __rfloordiv__(self, *args):
        return _sim_services.swig_double___rfloordiv__(self, *args)

    def __rmod__(self, *args):
        return _sim_services.swig_double___rmod__(self, *args)

    def __rpow__(self, *args):
        return _sim_services.swig_double___rpow__(self, *args)

    def __iadd__(self, *args):
        return _sim_services.swig_double___iadd__(self, *args)

    def __isub__(self, *args):
        return _sim_services.swig_double___isub__(self, *args)

    def __imul__(self, *args):
        return _sim_services.swig_double___imul__(self, *args)

    def __idiv__(self, *args):
        return _sim_services.swig_double___idiv__(self, *args)

    def __itruediv__(self, *args):
        return _sim_services.swig_double___itruediv__(self, *args)

    def __ifloordiv__(self, *args):
        return _sim_services.swig_double___ifloordiv__(self, *args)

    def __imod__(self, *args):
        return _sim_services.swig_double___imod__(self, *args)

    def __ipow__(self, *args):
        return _sim_services.swig_double___ipow__(self, *args)

    def __lt__(self, *args):
        return _sim_services.swig_double___lt__(self, *args)

    def __le__(self, *args):
        return _sim_services.swig_double___le__(self, *args)

    def __eq__(self, *args):
        return _sim_services.swig_double___eq__(self, *args)

    def __ne__(self, *args):
        return _sim_services.swig_double___ne__(self, *args)

    def __gt__(self, *args):
        return _sim_services.swig_double___gt__(self, *args)

    def __ge__(self, *args):
        return _sim_services.swig_double___ge__(self, *args)

    def __neg__(self, *args):
        return _sim_services.swig_double___neg__(self, *args)

    def __pos__(self, *args):
        return _sim_services.swig_double___pos__(self, *args)

    def __abs__(self, *args):
        return _sim_services.swig_double___abs__(self, *args)

    def __int__(self, *args):
        return _sim_services.swig_double___int__(self, *args)

    def __long__(self, *args):
        return _sim_services.swig_double___long__(self, *args)

    def __float__(self, *args):
        return _sim_services.swig_double___float__(self, *args)

    def __len__(self, *args):
        return _sim_services.swig_double___len__(self, *args)
    __swig_destroy__ = _sim_services.delete_swig_double
    __del__ = lambda self: None
swig_double_swigregister = _sim_services.swig_double_swigregister
swig_double_swigregister(swig_double)
cvar = _sim_services.cvar


def map_trick_units_to_udunits(*args):
    return _sim_services.map_trick_units_to_udunits(*args)
map_trick_units_to_udunits = _sim_services.map_trick_units_to_udunits
class InputProcessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputProcessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputProcessor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["verify_input"] = _sim_services.InputProcessor_verify_input_set
    __swig_getmethods__["verify_input"] = _sim_services.InputProcessor_verify_input_get
    if _newclass:
        verify_input = _swig_property(_sim_services.InputProcessor_verify_input_get, _sim_services.InputProcessor_verify_input_set)
    __swig_setmethods__["input_file"] = _sim_services.InputProcessor_input_file_set
    __swig_getmethods__["input_file"] = _sim_services.InputProcessor_input_file_get
    if _newclass:
        input_file = _swig_property(_sim_services.InputProcessor_input_file_get, _sim_services.InputProcessor_input_file_set)
    __swig_destroy__ = _sim_services.delete_InputProcessor
    __del__ = lambda self: None

    def process_sim_args(self, *args):
        return _sim_services.InputProcessor_process_sim_args(self, *args)

    def parse(self, *args):
        return _sim_services.InputProcessor_parse(self, *args)

    def shutdown(self, *args):
        return _sim_services.InputProcessor_shutdown(self, *args)
InputProcessor_swigregister = _sim_services.InputProcessor_swigregister
InputProcessor_swigregister(InputProcessor)

class IPPython(InputProcessor):
    __swig_setmethods__ = {}
    for _s in [InputProcessor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPPython, name, value)
    __swig_getmethods__ = {}
    for _s in [InputProcessor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPPython, name)
    __repr__ = _swig_repr
    __swig_setmethods__["return_val"] = _sim_services.IPPython_return_val_set
    __swig_getmethods__["return_val"] = _sim_services.IPPython_return_val_get
    if _newclass:
        return_val = _swig_property(_sim_services.IPPython_return_val_get, _sim_services.IPPython_return_val_set)
    __swig_setmethods__["ip_mutex"] = _sim_services.IPPython_ip_mutex_set
    __swig_getmethods__["ip_mutex"] = _sim_services.IPPython_ip_mutex_get
    if _newclass:
        ip_mutex = _swig_property(_sim_services.IPPython_ip_mutex_get, _sim_services.IPPython_ip_mutex_set)

    def __init__(self, *args):
        this = _sim_services.new_IPPython(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_TMM_named_variables(self, *args):
        return _sim_services.IPPython_get_TMM_named_variables(self, *args)

    def get_units_conversion_msgs(self, *args):
        return _sim_services.IPPython_get_units_conversion_msgs(self, *args)

    def shoot_the_units_conversion_messenger(self, *args):
        return _sim_services.IPPython_shoot_the_units_conversion_messenger(self, *args)

    def init(self, *args):
        return _sim_services.IPPython_init(self, *args)

    def shutdown(self, *args):
        return _sim_services.IPPython_shutdown(self, *args)

    def parse(self, *args):
        return _sim_services.IPPython_parse(self, *args)

    def parse_condition(self, *args):
        return _sim_services.IPPython_parse_condition(self, *args)

    def restart(self, *args):
        return _sim_services.IPPython_restart(self, *args)
    __swig_destroy__ = _sim_services.delete_IPPython
    __del__ = lambda self: None
IPPython_swigregister = _sim_services.IPPython_swigregister
IPPython_swigregister(IPPython)


def init_swig_modules(*args):
    return _sim_services.init_swig_modules(*args)
init_swig_modules = _sim_services.init_swig_modules

def shoot_the_units_conversion_messenger(*args):
    return _sim_services.shoot_the_units_conversion_messenger(*args)
shoot_the_units_conversion_messenger = _sim_services.shoot_the_units_conversion_messenger

def revive_the_units_conversion_messenger(*args):
    return _sim_services.revive_the_units_conversion_messenger(*args)
revive_the_units_conversion_messenger = _sim_services.revive_the_units_conversion_messenger

def check_units_conversion_messenger_for_signs_of_life(*args):
    return _sim_services.check_units_conversion_messenger_for_signs_of_life(*args)
check_units_conversion_messenger_for_signs_of_life = _sim_services.check_units_conversion_messenger_for_signs_of_life

def attach_units(*args):
    return _sim_services.attach_units(*args)
attach_units = _sim_services.attach_units

def wrap_ptr(*args):
    return _sim_services.wrap_ptr(*args)
wrap_ptr = _sim_services.wrap_ptr

def unhex_double(*args):
    return _sim_services.unhex_double(*args)
unhex_double = _sim_services.unhex_double

def unhex_float(*args):
    return _sim_services.unhex_float(*args)
unhex_float = _sim_services.unhex_float

def new_cvar_list(*args):
    return _sim_services.new_cvar_list(*args)
new_cvar_list = _sim_services.new_cvar_list

def combine_cvars(*args):
    return _sim_services.combine_cvars(*args)
combine_cvars = _sim_services.combine_cvars

_sim_services.Roll_Pitch_Yaw_swigconstant(_sim_services)
Roll_Pitch_Yaw = _sim_services.Roll_Pitch_Yaw

_sim_services.Roll_Yaw_Pitch_swigconstant(_sim_services)
Roll_Yaw_Pitch = _sim_services.Roll_Yaw_Pitch

_sim_services.Pitch_Yaw_Roll_swigconstant(_sim_services)
Pitch_Yaw_Roll = _sim_services.Pitch_Yaw_Roll

_sim_services.Pitch_Roll_Yaw_swigconstant(_sim_services)
Pitch_Roll_Yaw = _sim_services.Pitch_Roll_Yaw

_sim_services.Yaw_Roll_Pitch_swigconstant(_sim_services)
Yaw_Roll_Pitch = _sim_services.Yaw_Roll_Pitch

_sim_services.Yaw_Pitch_Roll_swigconstant(_sim_services)
Yaw_Pitch_Roll = _sim_services.Yaw_Pitch_Roll
class TRANSFORM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRANSFORM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRANSFORM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["euler_sequence"] = _sim_services.TRANSFORM_euler_sequence_set
    __swig_getmethods__["euler_sequence"] = _sim_services.TRANSFORM_euler_sequence_get
    if _newclass:
        euler_sequence = _swig_property(_sim_services.TRANSFORM_euler_sequence_get, _sim_services.TRANSFORM_euler_sequence_set)
    __swig_setmethods__["euler_angles"] = _sim_services.TRANSFORM_euler_angles_set
    __swig_getmethods__["euler_angles"] = _sim_services.TRANSFORM_euler_angles_get
    if _newclass:
        euler_angles = _swig_property(_sim_services.TRANSFORM_euler_angles_get, _sim_services.TRANSFORM_euler_angles_set)
    __swig_setmethods__["location"] = _sim_services.TRANSFORM_location_set
    __swig_getmethods__["location"] = _sim_services.TRANSFORM_location_get
    if _newclass:
        location = _swig_property(_sim_services.TRANSFORM_location_get, _sim_services.TRANSFORM_location_set)

    def __init__(self):
        this = _sim_services.new_TRANSFORM()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TRANSFORM
    __del__ = lambda self: None
TRANSFORM_swigregister = _sim_services.TRANSFORM_swigregister
TRANSFORM_swigregister(TRANSFORM)


_sim_services.UNIFORM_RND_1_swigconstant(_sim_services)
UNIFORM_RND_1 = _sim_services.UNIFORM_RND_1

_sim_services.UNIFORM_RND_TRIPLE_swigconstant(_sim_services)
UNIFORM_RND_TRIPLE = _sim_services.UNIFORM_RND_TRIPLE

_sim_services.GAUSS_RND_PSEUDO_swigconstant(_sim_services)
GAUSS_RND_PSEUDO = _sim_services.GAUSS_RND_PSEUDO

_sim_services.GAUSS_RND_BELL_swigconstant(_sim_services)
GAUSS_RND_BELL = _sim_services.GAUSS_RND_BELL

_sim_services.RND_NUM_1_swigconstant(_sim_services)
RND_NUM_1 = _sim_services.RND_NUM_1

_sim_services.LCG1_swigconstant(_sim_services)
LCG1 = _sim_services.LCG1

_sim_services.TRIPLE_swigconstant(_sim_services)
TRIPLE = _sim_services.TRIPLE
class RAND_GENERATOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RAND_GENERATOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RAND_GENERATOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["option"] = _sim_services.RAND_GENERATOR_option_set
    __swig_getmethods__["option"] = _sim_services.RAND_GENERATOR_option_get
    if _newclass:
        option = _swig_property(_sim_services.RAND_GENERATOR_option_get, _sim_services.RAND_GENERATOR_option_set)
    __swig_setmethods__["uniform"] = _sim_services.RAND_GENERATOR_uniform_set
    __swig_getmethods__["uniform"] = _sim_services.RAND_GENERATOR_uniform_get
    if _newclass:
        uniform = _swig_property(_sim_services.RAND_GENERATOR_uniform_get, _sim_services.RAND_GENERATOR_uniform_set)
    __swig_setmethods__["seed_1"] = _sim_services.RAND_GENERATOR_seed_1_set
    __swig_getmethods__["seed_1"] = _sim_services.RAND_GENERATOR_seed_1_get
    if _newclass:
        seed_1 = _swig_property(_sim_services.RAND_GENERATOR_seed_1_get, _sim_services.RAND_GENERATOR_seed_1_set)
    __swig_setmethods__["seed_trpl"] = _sim_services.RAND_GENERATOR_seed_trpl_set
    __swig_getmethods__["seed_trpl"] = _sim_services.RAND_GENERATOR_seed_trpl_get
    if _newclass:
        seed_trpl = _swig_property(_sim_services.RAND_GENERATOR_seed_trpl_get, _sim_services.RAND_GENERATOR_seed_trpl_set)
    __swig_setmethods__["iff"] = _sim_services.RAND_GENERATOR_iff_set
    __swig_getmethods__["iff"] = _sim_services.RAND_GENERATOR_iff_get
    if _newclass:
        iff = _swig_property(_sim_services.RAND_GENERATOR_iff_get, _sim_services.RAND_GENERATOR_iff_set)
    __swig_setmethods__["table"] = _sim_services.RAND_GENERATOR_table_set
    __swig_getmethods__["table"] = _sim_services.RAND_GENERATOR_table_get
    if _newclass:
        table = _swig_property(_sim_services.RAND_GENERATOR_table_get, _sim_services.RAND_GENERATOR_table_set)
    __swig_setmethods__["sigma_range"] = _sim_services.RAND_GENERATOR_sigma_range_set
    __swig_getmethods__["sigma_range"] = _sim_services.RAND_GENERATOR_sigma_range_get
    if _newclass:
        sigma_range = _swig_property(_sim_services.RAND_GENERATOR_sigma_range_get, _sim_services.RAND_GENERATOR_sigma_range_set)
    __swig_setmethods__["ix1"] = _sim_services.RAND_GENERATOR_ix1_set
    __swig_getmethods__["ix1"] = _sim_services.RAND_GENERATOR_ix1_get
    if _newclass:
        ix1 = _swig_property(_sim_services.RAND_GENERATOR_ix1_get, _sim_services.RAND_GENERATOR_ix1_set)
    __swig_setmethods__["ix2"] = _sim_services.RAND_GENERATOR_ix2_set
    __swig_getmethods__["ix2"] = _sim_services.RAND_GENERATOR_ix2_get
    if _newclass:
        ix2 = _swig_property(_sim_services.RAND_GENERATOR_ix2_get, _sim_services.RAND_GENERATOR_ix2_set)
    __swig_setmethods__["ix3"] = _sim_services.RAND_GENERATOR_ix3_set
    __swig_getmethods__["ix3"] = _sim_services.RAND_GENERATOR_ix3_get
    if _newclass:
        ix3 = _swig_property(_sim_services.RAND_GENERATOR_ix3_get, _sim_services.RAND_GENERATOR_ix3_set)

    def __init__(self):
        this = _sim_services.new_RAND_GENERATOR()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RAND_GENERATOR
    __del__ = lambda self: None
RAND_GENERATOR_swigregister = _sim_services.RAND_GENERATOR_swigregister
RAND_GENERATOR_swigregister(RAND_GENERATOR)


_sim_services.TRICK_GSL_GAUSS_swigconstant(_sim_services)
TRICK_GSL_GAUSS = _sim_services.TRICK_GSL_GAUSS

_sim_services.TRICK_GSL_FLAT_swigconstant(_sim_services)
TRICK_GSL_FLAT = _sim_services.TRICK_GSL_FLAT

_sim_services.TRICK_GSL_POISSON_swigconstant(_sim_services)
TRICK_GSL_POISSON = _sim_services.TRICK_GSL_POISSON
class TRICK_GSL_RANDIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRICK_GSL_RANDIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRICK_GSL_RANDIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t_rng"] = _sim_services.TRICK_GSL_RANDIST_t_rng_set
    __swig_getmethods__["t_rng"] = _sim_services.TRICK_GSL_RANDIST_t_rng_get
    if _newclass:
        t_rng = _swig_property(_sim_services.TRICK_GSL_RANDIST_t_rng_get, _sim_services.TRICK_GSL_RANDIST_t_rng_set)
    __swig_setmethods__["type"] = _sim_services.TRICK_GSL_RANDIST_type_set
    __swig_getmethods__["type"] = _sim_services.TRICK_GSL_RANDIST_type_get
    if _newclass:
        type = _swig_property(_sim_services.TRICK_GSL_RANDIST_type_get, _sim_services.TRICK_GSL_RANDIST_type_set)
    __swig_setmethods__["seed"] = _sim_services.TRICK_GSL_RANDIST_seed_set
    __swig_getmethods__["seed"] = _sim_services.TRICK_GSL_RANDIST_seed_get
    if _newclass:
        seed = _swig_property(_sim_services.TRICK_GSL_RANDIST_seed_get, _sim_services.TRICK_GSL_RANDIST_seed_set)
    __swig_setmethods__["sigma"] = _sim_services.TRICK_GSL_RANDIST_sigma_set
    __swig_getmethods__["sigma"] = _sim_services.TRICK_GSL_RANDIST_sigma_get
    if _newclass:
        sigma = _swig_property(_sim_services.TRICK_GSL_RANDIST_sigma_get, _sim_services.TRICK_GSL_RANDIST_sigma_set)
    __swig_setmethods__["mu"] = _sim_services.TRICK_GSL_RANDIST_mu_set
    __swig_getmethods__["mu"] = _sim_services.TRICK_GSL_RANDIST_mu_get
    if _newclass:
        mu = _swig_property(_sim_services.TRICK_GSL_RANDIST_mu_get, _sim_services.TRICK_GSL_RANDIST_mu_set)
    __swig_setmethods__["min"] = _sim_services.TRICK_GSL_RANDIST_min_set
    __swig_getmethods__["min"] = _sim_services.TRICK_GSL_RANDIST_min_get
    if _newclass:
        min = _swig_property(_sim_services.TRICK_GSL_RANDIST_min_get, _sim_services.TRICK_GSL_RANDIST_min_set)
    __swig_setmethods__["max"] = _sim_services.TRICK_GSL_RANDIST_max_set
    __swig_getmethods__["max"] = _sim_services.TRICK_GSL_RANDIST_max_get
    if _newclass:
        max = _swig_property(_sim_services.TRICK_GSL_RANDIST_max_get, _sim_services.TRICK_GSL_RANDIST_max_set)
    __swig_setmethods__["rel_min"] = _sim_services.TRICK_GSL_RANDIST_rel_min_set
    __swig_getmethods__["rel_min"] = _sim_services.TRICK_GSL_RANDIST_rel_min_get
    if _newclass:
        rel_min = _swig_property(_sim_services.TRICK_GSL_RANDIST_rel_min_get, _sim_services.TRICK_GSL_RANDIST_rel_min_set)
    __swig_setmethods__["rel_max"] = _sim_services.TRICK_GSL_RANDIST_rel_max_set
    __swig_getmethods__["rel_max"] = _sim_services.TRICK_GSL_RANDIST_rel_max_get
    if _newclass:
        rel_max = _swig_property(_sim_services.TRICK_GSL_RANDIST_rel_max_get, _sim_services.TRICK_GSL_RANDIST_rel_max_set)
    __swig_setmethods__["sigma_range"] = _sim_services.TRICK_GSL_RANDIST_sigma_range_set
    __swig_getmethods__["sigma_range"] = _sim_services.TRICK_GSL_RANDIST_sigma_range_get
    if _newclass:
        sigma_range = _swig_property(_sim_services.TRICK_GSL_RANDIST_sigma_range_get, _sim_services.TRICK_GSL_RANDIST_sigma_range_set)
    __swig_setmethods__["uniform"] = _sim_services.TRICK_GSL_RANDIST_uniform_set
    __swig_getmethods__["uniform"] = _sim_services.TRICK_GSL_RANDIST_uniform_get
    if _newclass:
        uniform = _swig_property(_sim_services.TRICK_GSL_RANDIST_uniform_get, _sim_services.TRICK_GSL_RANDIST_uniform_set)

    def __init__(self):
        this = _sim_services.new_TRICK_GSL_RANDIST()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TRICK_GSL_RANDIST
    __del__ = lambda self: None
TRICK_GSL_RANDIST_swigregister = _sim_services.TRICK_GSL_RANDIST_swigregister
TRICK_GSL_RANDIST_swigregister(TRICK_GSL_RANDIST)

class TRICK_GSL_RETURN_TYPE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRICK_GSL_RETURN_TYPE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRICK_GSL_RETURN_TYPE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ui"] = _sim_services.TRICK_GSL_RETURN_TYPE_ui_set
    __swig_getmethods__["ui"] = _sim_services.TRICK_GSL_RETURN_TYPE_ui_get
    if _newclass:
        ui = _swig_property(_sim_services.TRICK_GSL_RETURN_TYPE_ui_get, _sim_services.TRICK_GSL_RETURN_TYPE_ui_set)
    __swig_setmethods__["d"] = _sim_services.TRICK_GSL_RETURN_TYPE_d_set
    __swig_getmethods__["d"] = _sim_services.TRICK_GSL_RETURN_TYPE_d_get
    if _newclass:
        d = _swig_property(_sim_services.TRICK_GSL_RETURN_TYPE_d_get, _sim_services.TRICK_GSL_RETURN_TYPE_d_set)
    __swig_setmethods__["ll"] = _sim_services.TRICK_GSL_RETURN_TYPE_ll_set
    __swig_getmethods__["ll"] = _sim_services.TRICK_GSL_RETURN_TYPE_ll_get
    if _newclass:
        ll = _swig_property(_sim_services.TRICK_GSL_RETURN_TYPE_ll_get, _sim_services.TRICK_GSL_RETURN_TYPE_ll_set)
    __swig_setmethods__["ii"] = _sim_services.TRICK_GSL_RETURN_TYPE_ii_set
    __swig_getmethods__["ii"] = _sim_services.TRICK_GSL_RETURN_TYPE_ii_get
    if _newclass:
        ii = _swig_property(_sim_services.TRICK_GSL_RETURN_TYPE_ii_get, _sim_services.TRICK_GSL_RETURN_TYPE_ii_set)

    def __init__(self):
        this = _sim_services.new_TRICK_GSL_RETURN_TYPE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TRICK_GSL_RETURN_TYPE
    __del__ = lambda self: None
TRICK_GSL_RETURN_TYPE_swigregister = _sim_services.TRICK_GSL_RETURN_TYPE_swigregister
TRICK_GSL_RETURN_TYPE_swigregister(TRICK_GSL_RETURN_TYPE)


def trick_gsl_rand_init(*args):
    return _sim_services.trick_gsl_rand_init(*args)
trick_gsl_rand_init = _sim_services.trick_gsl_rand_init

def trick_gsl_rand_alloc(*args):
    return _sim_services.trick_gsl_rand_alloc(*args)
trick_gsl_rand_alloc = _sim_services.trick_gsl_rand_alloc

def trick_gsl_rand_seed(*args):
    return _sim_services.trick_gsl_rand_seed(*args)
trick_gsl_rand_seed = _sim_services.trick_gsl_rand_seed

def trick_gsl_rand(*args):
    return _sim_services.trick_gsl_rand(*args)
trick_gsl_rand = _sim_services.trick_gsl_rand

def trick_gsl_rand_shutdown(*args):
    return _sim_services.trick_gsl_rand_shutdown(*args)
trick_gsl_rand_shutdown = _sim_services.trick_gsl_rand_shutdown

_sim_services.Pulse_swigconstant(_sim_services)
Pulse = _sim_services.Pulse

_sim_services.Ramp_swigconstant(_sim_services)
Ramp = _sim_services.Ramp

_sim_services.Square_swigconstant(_sim_services)
Square = _sim_services.Square

_sim_services.Square_Doublet_swigconstant(_sim_services)
Square_Doublet = _sim_services.Square_Doublet

_sim_services.Triangle_swigconstant(_sim_services)
Triangle = _sim_services.Triangle

_sim_services.Triangle_Doublet_swigconstant(_sim_services)
Triangle_Doublet = _sim_services.Triangle_Doublet

_sim_services.Sine_swigconstant(_sim_services)
Sine = _sim_services.Sine

_sim_services.Noise_swigconstant(_sim_services)
Noise = _sim_services.Noise

_sim_services.Gauss_Noise_swigconstant(_sim_services)
Gauss_Noise = _sim_services.Gauss_Noise

_sim_services.User_Wave_swigconstant(_sim_services)
User_Wave = _sim_services.User_Wave
class WAVE_FORM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WAVE_FORM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WAVE_FORM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sim_services.WAVE_FORM_type_set
    __swig_getmethods__["type"] = _sim_services.WAVE_FORM_type_get
    if _newclass:
        type = _swig_property(_sim_services.WAVE_FORM_type_get, _sim_services.WAVE_FORM_type_set)
    __swig_setmethods__["start"] = _sim_services.WAVE_FORM_start_set
    __swig_getmethods__["start"] = _sim_services.WAVE_FORM_start_get
    if _newclass:
        start = _swig_property(_sim_services.WAVE_FORM_start_get, _sim_services.WAVE_FORM_start_set)
    __swig_setmethods__["stop"] = _sim_services.WAVE_FORM_stop_set
    __swig_getmethods__["stop"] = _sim_services.WAVE_FORM_stop_get
    if _newclass:
        stop = _swig_property(_sim_services.WAVE_FORM_stop_get, _sim_services.WAVE_FORM_stop_set)
    __swig_setmethods__["ramp"] = _sim_services.WAVE_FORM_ramp_set
    __swig_getmethods__["ramp"] = _sim_services.WAVE_FORM_ramp_get
    if _newclass:
        ramp = _swig_property(_sim_services.WAVE_FORM_ramp_get, _sim_services.WAVE_FORM_ramp_set)
    __swig_setmethods__["pause"] = _sim_services.WAVE_FORM_pause_set
    __swig_getmethods__["pause"] = _sim_services.WAVE_FORM_pause_get
    if _newclass:
        pause = _swig_property(_sim_services.WAVE_FORM_pause_get, _sim_services.WAVE_FORM_pause_set)
    __swig_setmethods__["frequency"] = _sim_services.WAVE_FORM_frequency_set
    __swig_getmethods__["frequency"] = _sim_services.WAVE_FORM_frequency_get
    if _newclass:
        frequency = _swig_property(_sim_services.WAVE_FORM_frequency_get, _sim_services.WAVE_FORM_frequency_set)
    __swig_setmethods__["phase"] = _sim_services.WAVE_FORM_phase_set
    __swig_getmethods__["phase"] = _sim_services.WAVE_FORM_phase_get
    if _newclass:
        phase = _swig_property(_sim_services.WAVE_FORM_phase_get, _sim_services.WAVE_FORM_phase_set)
    __swig_setmethods__["init_random"] = _sim_services.WAVE_FORM_init_random_set
    __swig_getmethods__["init_random"] = _sim_services.WAVE_FORM_init_random_get
    if _newclass:
        init_random = _swig_property(_sim_services.WAVE_FORM_init_random_get, _sim_services.WAVE_FORM_init_random_set)
    __swig_setmethods__["random_seed"] = _sim_services.WAVE_FORM_random_seed_set
    __swig_getmethods__["random_seed"] = _sim_services.WAVE_FORM_random_seed_get
    if _newclass:
        random_seed = _swig_property(_sim_services.WAVE_FORM_random_seed_get, _sim_services.WAVE_FORM_random_seed_set)
    __swig_setmethods__["sigma_range"] = _sim_services.WAVE_FORM_sigma_range_set
    __swig_getmethods__["sigma_range"] = _sim_services.WAVE_FORM_sigma_range_get
    if _newclass:
        sigma_range = _swig_property(_sim_services.WAVE_FORM_sigma_range_get, _sim_services.WAVE_FORM_sigma_range_set)
    __swig_setmethods__["init_user_data"] = _sim_services.WAVE_FORM_init_user_data_set
    __swig_getmethods__["init_user_data"] = _sim_services.WAVE_FORM_init_user_data_get
    if _newclass:
        init_user_data = _swig_property(_sim_services.WAVE_FORM_init_user_data_get, _sim_services.WAVE_FORM_init_user_data_set)
    __swig_setmethods__["user_data"] = _sim_services.WAVE_FORM_user_data_set
    __swig_getmethods__["user_data"] = _sim_services.WAVE_FORM_user_data_get
    if _newclass:
        user_data = _swig_property(_sim_services.WAVE_FORM_user_data_get, _sim_services.WAVE_FORM_user_data_set)
    __swig_setmethods__["fp"] = _sim_services.WAVE_FORM_fp_set
    __swig_getmethods__["fp"] = _sim_services.WAVE_FORM_fp_get
    if _newclass:
        fp = _swig_property(_sim_services.WAVE_FORM_fp_get, _sim_services.WAVE_FORM_fp_set)
    __swig_setmethods__["next_time"] = _sim_services.WAVE_FORM_next_time_set
    __swig_getmethods__["next_time"] = _sim_services.WAVE_FORM_next_time_get
    if _newclass:
        next_time = _swig_property(_sim_services.WAVE_FORM_next_time_get, _sim_services.WAVE_FORM_next_time_set)
    __swig_setmethods__["next_val"] = _sim_services.WAVE_FORM_next_val_set
    __swig_getmethods__["next_val"] = _sim_services.WAVE_FORM_next_val_get
    if _newclass:
        next_val = _swig_property(_sim_services.WAVE_FORM_next_val_get, _sim_services.WAVE_FORM_next_val_set)
    __swig_setmethods__["user_time"] = _sim_services.WAVE_FORM_user_time_set
    __swig_getmethods__["user_time"] = _sim_services.WAVE_FORM_user_time_get
    if _newclass:
        user_time = _swig_property(_sim_services.WAVE_FORM_user_time_get, _sim_services.WAVE_FORM_user_time_set)
    __swig_setmethods__["user_val"] = _sim_services.WAVE_FORM_user_val_set
    __swig_getmethods__["user_val"] = _sim_services.WAVE_FORM_user_val_get
    if _newclass:
        user_val = _swig_property(_sim_services.WAVE_FORM_user_val_get, _sim_services.WAVE_FORM_user_val_set)

    def __init__(self):
        this = _sim_services.new_WAVE_FORM()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_WAVE_FORM
    __del__ = lambda self: None
WAVE_FORM_swigregister = _sim_services.WAVE_FORM_swigregister
WAVE_FORM_swigregister(WAVE_FORM)


def integrate(*args):
    return _sim_services.integrate(*args)
integrate = _sim_services.integrate

def integrate_1st_order_ode(*args):
    return _sim_services.integrate_1st_order_ode(*args)
integrate_1st_order_ode = _sim_services.integrate_1st_order_ode

def integrate_2nd_order_ode(*args):
    return _sim_services.integrate_2nd_order_ode(*args)
integrate_2nd_order_ode = _sim_services.integrate_2nd_order_ode

def get_integ_time(*args):
    return _sim_services.get_integ_time(*args)
get_integ_time = _sim_services.get_integ_time

def set_integ_time(*args):
    return _sim_services.set_integ_time(*args)
set_integ_time = _sim_services.set_integ_time

def load_state(*args):
    return _sim_services.load_state(*args)
load_state = _sim_services.load_state

def load_deriv(*args):
    return _sim_services.load_deriv(*args)
load_deriv = _sim_services.load_deriv

def load_deriv2(*args):
    return _sim_services.load_deriv2(*args)
load_deriv2 = _sim_services.load_deriv2

def unload_state(*args):
    return _sim_services.unload_state(*args)
unload_state = _sim_services.unload_state

def load_indexed_state(*args):
    return _sim_services.load_indexed_state(*args)
load_indexed_state = _sim_services.load_indexed_state

def load_indexed_deriv(*args):
    return _sim_services.load_indexed_deriv(*args)
load_indexed_deriv = _sim_services.load_indexed_deriv

def load_indexed_deriv2(*args):
    return _sim_services.load_indexed_deriv2(*args)
load_indexed_deriv2 = _sim_services.load_indexed_deriv2

def unload_indexed_state(*args):
    return _sim_services.unload_indexed_state(*args)
unload_indexed_state = _sim_services.unload_indexed_state

def get_intermediate_step(*args):
    return _sim_services.get_intermediate_step(*args)
get_intermediate_step = _sim_services.get_intermediate_step

def set_intermediate_step(*args):
    return _sim_services.set_intermediate_step(*args)
set_intermediate_step = _sim_services.set_intermediate_step

def get_integ_type(*args):
    return _sim_services.get_integ_type(*args)
get_integ_type = _sim_services.get_integ_type
class Clock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Clock, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Clock
    __del__ = lambda self: None

    def calc_sim_time_ratio(self, *args):
        return _sim_services.Clock_calc_sim_time_ratio(self, *args)

    def get_rt_clock_ratio(self, *args):
        return _sim_services.Clock_get_rt_clock_ratio(self, *args)

    def set_global_clock(self, *args):
        return _sim_services.Clock_set_global_clock(self, *args)

    def set_rt_clock_ratio(self, *args):
        return _sim_services.Clock_set_rt_clock_ratio(self, *args)

    def adjust_ref_time(self, *args):
        return _sim_services.Clock_adjust_ref_time(self, *args)

    def set_reference(self, *args):
        return _sim_services.Clock_set_reference(self, *args)

    def sync_to_wall_clock(self, *args):
        return _sim_services.Clock_sync_to_wall_clock(self, *args)

    def clock_time(self, *args):
        return _sim_services.Clock_clock_time(self, *args)

    def clock_reset(self, *args):
        return _sim_services.Clock_clock_reset(self, *args)

    def get_name(self, *args):
        return _sim_services.Clock_get_name(self, *args)

    def clock_init(self, *args):
        return _sim_services.Clock_clock_init(self, *args)

    def wall_clock_time(self, *args):
        return _sim_services.Clock_wall_clock_time(self, *args)

    def clock_spin(self, *args):
        return _sim_services.Clock_clock_spin(self, *args)

    def clock_stop(self, *args):
        return _sim_services.Clock_clock_stop(self, *args)
    __swig_setmethods__["name"] = _sim_services.Clock_name_set
    __swig_getmethods__["name"] = _sim_services.Clock_name_get
    if _newclass:
        name = _swig_property(_sim_services.Clock_name_get, _sim_services.Clock_name_set)
    __swig_setmethods__["clock_tics_per_sec"] = _sim_services.Clock_clock_tics_per_sec_set
    __swig_getmethods__["clock_tics_per_sec"] = _sim_services.Clock_clock_tics_per_sec_get
    if _newclass:
        clock_tics_per_sec = _swig_property(_sim_services.Clock_clock_tics_per_sec_get, _sim_services.Clock_clock_tics_per_sec_set)
    __swig_setmethods__["rt_clock_ratio"] = _sim_services.Clock_rt_clock_ratio_set
    __swig_getmethods__["rt_clock_ratio"] = _sim_services.Clock_rt_clock_ratio_get
    if _newclass:
        rt_clock_ratio = _swig_property(_sim_services.Clock_rt_clock_ratio_get, _sim_services.Clock_rt_clock_ratio_set)
    __swig_setmethods__["sim_tic_ratio"] = _sim_services.Clock_sim_tic_ratio_set
    __swig_getmethods__["sim_tic_ratio"] = _sim_services.Clock_sim_tic_ratio_get
    if _newclass:
        sim_tic_ratio = _swig_property(_sim_services.Clock_sim_tic_ratio_get, _sim_services.Clock_sim_tic_ratio_set)
    __swig_setmethods__["ref_time_tics"] = _sim_services.Clock_ref_time_tics_set
    __swig_getmethods__["ref_time_tics"] = _sim_services.Clock_ref_time_tics_get
    if _newclass:
        ref_time_tics = _swig_property(_sim_services.Clock_ref_time_tics_get, _sim_services.Clock_ref_time_tics_set)
Clock_swigregister = _sim_services.Clock_swigregister
Clock_swigregister(Clock)

class GetTimeOfDayClock(Clock):
    __swig_setmethods__ = {}
    for _s in [Clock]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetTimeOfDayClock, name, value)
    __swig_getmethods__ = {}
    for _s in [Clock]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetTimeOfDayClock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_GetTimeOfDayClock(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_GetTimeOfDayClock
    __del__ = lambda self: None

    def clock_init(self, *args):
        return _sim_services.GetTimeOfDayClock_clock_init(self, *args)

    def wall_clock_time(self, *args):
        return _sim_services.GetTimeOfDayClock_wall_clock_time(self, *args)

    def clock_stop(self, *args):
        return _sim_services.GetTimeOfDayClock_clock_stop(self, *args)

    def set_clock_ID(self, *args):
        return _sim_services.GetTimeOfDayClock_set_clock_ID(self, *args)

    def get_clock_ID(self, *args):
        return _sim_services.GetTimeOfDayClock_get_clock_ID(self, *args)
GetTimeOfDayClock_swigregister = _sim_services.GetTimeOfDayClock_swigregister
GetTimeOfDayClock_swigregister(GetTimeOfDayClock)

class BC635Clock(Clock):
    __swig_setmethods__ = {}
    for _s in [Clock]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BC635Clock, name, value)
    __swig_getmethods__ = {}
    for _s in [Clock]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BC635Clock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_BC635Clock(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_BC635Clock
    __del__ = lambda self: None

    def set_mode(self, *args):
        return _sim_services.BC635Clock_set_mode(self, *args)

    def get_mode(self, *args):
        return _sim_services.BC635Clock_get_mode(self, *args)

    def clock_init(self, *args):
        return _sim_services.BC635Clock_clock_init(self, *args)

    def wall_clock_time(self, *args):
        return _sim_services.BC635Clock_wall_clock_time(self, *args)

    def clock_spin(self, *args):
        return _sim_services.BC635Clock_clock_spin(self, *args)

    def clock_stop(self, *args):
        return _sim_services.BC635Clock_clock_stop(self, *args)
BC635Clock_swigregister = _sim_services.BC635Clock_swigregister
BC635Clock_swigregister(BC635Clock)

class TPROCTEClock(Clock):
    __swig_setmethods__ = {}
    for _s in [Clock]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPROCTEClock, name, value)
    __swig_getmethods__ = {}
    for _s in [Clock]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPROCTEClock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_TPROCTEClock(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TPROCTEClock
    __del__ = lambda self: None

    def clock_init(self, *args):
        return _sim_services.TPROCTEClock_clock_init(self, *args)

    def wall_clock_time(self, *args):
        return _sim_services.TPROCTEClock_wall_clock_time(self, *args)

    def clock_spin(self, *args):
        return _sim_services.TPROCTEClock_clock_spin(self, *args)

    def clock_stop(self, *args):
        return _sim_services.TPROCTEClock_clock_stop(self, *args)
    __swig_setmethods__["dev_name"] = _sim_services.TPROCTEClock_dev_name_set
    __swig_getmethods__["dev_name"] = _sim_services.TPROCTEClock_dev_name_get
    if _newclass:
        dev_name = _swig_property(_sim_services.TPROCTEClock_dev_name_get, _sim_services.TPROCTEClock_dev_name_set)
TPROCTEClock_swigregister = _sim_services.TPROCTEClock_swigregister
TPROCTEClock_swigregister(TPROCTEClock)


def clock_time(*args):
    return _sim_services.clock_time(*args)
clock_time = _sim_services.clock_time

def clock_wall_time(*args):
    return _sim_services.clock_wall_time(*args)
clock_wall_time = _sim_services.clock_wall_time

def clock_reset(*args):
    return _sim_services.clock_reset(*args)
clock_reset = _sim_services.clock_reset

def clock_spin(*args):
    return _sim_services.clock_spin(*args)
clock_spin = _sim_services.clock_spin

def clock_set_reference(*args):
    return _sim_services.clock_set_reference(*args)
clock_set_reference = _sim_services.clock_set_reference

def clock_get_rt_clock_ratio(*args):
    return _sim_services.clock_get_rt_clock_ratio(*args)
clock_get_rt_clock_ratio = _sim_services.clock_get_rt_clock_ratio

def clock_set_rt_clock_ratio(*args):
    return _sim_services.clock_set_rt_clock_ratio(*args)
clock_set_rt_clock_ratio = _sim_services.clock_set_rt_clock_ratio
class CommandLineArguments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandLineArguments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommandLineArguments, name)
    __repr__ = _swig_repr
    __swig_setmethods__["argc"] = _sim_services.CommandLineArguments_argc_set
    __swig_getmethods__["argc"] = _sim_services.CommandLineArguments_argc_get
    if _newclass:
        argc = _swig_property(_sim_services.CommandLineArguments_argc_get, _sim_services.CommandLineArguments_argc_set)
    __swig_setmethods__["argv"] = _sim_services.CommandLineArguments_argv_set
    __swig_getmethods__["argv"] = _sim_services.CommandLineArguments_argv_get
    if _newclass:
        argv = _swig_property(_sim_services.CommandLineArguments_argv_get, _sim_services.CommandLineArguments_argv_set)
    __swig_setmethods__["output_dir_timestamped"] = _sim_services.CommandLineArguments_output_dir_timestamped_set
    __swig_getmethods__["output_dir_timestamped"] = _sim_services.CommandLineArguments_output_dir_timestamped_get
    if _newclass:
        output_dir_timestamped = _swig_property(_sim_services.CommandLineArguments_output_dir_timestamped_get, _sim_services.CommandLineArguments_output_dir_timestamped_set)
    __swig_setmethods__["default_dir"] = _sim_services.CommandLineArguments_default_dir_set
    __swig_getmethods__["default_dir"] = _sim_services.CommandLineArguments_default_dir_get
    if _newclass:
        default_dir = _swig_property(_sim_services.CommandLineArguments_default_dir_get, _sim_services.CommandLineArguments_default_dir_set)
    __swig_setmethods__["cmdline_name"] = _sim_services.CommandLineArguments_cmdline_name_set
    __swig_getmethods__["cmdline_name"] = _sim_services.CommandLineArguments_cmdline_name_get
    if _newclass:
        cmdline_name = _swig_property(_sim_services.CommandLineArguments_cmdline_name_get, _sim_services.CommandLineArguments_cmdline_name_set)
    __swig_setmethods__["run_dir"] = _sim_services.CommandLineArguments_run_dir_set
    __swig_getmethods__["run_dir"] = _sim_services.CommandLineArguments_run_dir_get
    if _newclass:
        run_dir = _swig_property(_sim_services.CommandLineArguments_run_dir_get, _sim_services.CommandLineArguments_run_dir_set)
    __swig_setmethods__["user_output_dir"] = _sim_services.CommandLineArguments_user_output_dir_set
    __swig_getmethods__["user_output_dir"] = _sim_services.CommandLineArguments_user_output_dir_get
    if _newclass:
        user_output_dir = _swig_property(_sim_services.CommandLineArguments_user_output_dir_get, _sim_services.CommandLineArguments_user_output_dir_set)
    __swig_setmethods__["time_stamp_dir"] = _sim_services.CommandLineArguments_time_stamp_dir_set
    __swig_getmethods__["time_stamp_dir"] = _sim_services.CommandLineArguments_time_stamp_dir_get
    if _newclass:
        time_stamp_dir = _swig_property(_sim_services.CommandLineArguments_time_stamp_dir_get, _sim_services.CommandLineArguments_time_stamp_dir_set)
    __swig_setmethods__["output_dir"] = _sim_services.CommandLineArguments_output_dir_set
    __swig_getmethods__["output_dir"] = _sim_services.CommandLineArguments_output_dir_get
    if _newclass:
        output_dir = _swig_property(_sim_services.CommandLineArguments_output_dir_get, _sim_services.CommandLineArguments_output_dir_set)
    __swig_setmethods__["input_file"] = _sim_services.CommandLineArguments_input_file_set
    __swig_getmethods__["input_file"] = _sim_services.CommandLineArguments_input_file_get
    if _newclass:
        input_file = _swig_property(_sim_services.CommandLineArguments_input_file_get, _sim_services.CommandLineArguments_input_file_set)

    def __init__(self, *args):
        this = _sim_services.new_CommandLineArguments(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def process_sim_args(self, *args):
        return _sim_services.CommandLineArguments_process_sim_args(self, *args)

    def get_argc(self, *args):
        return _sim_services.CommandLineArguments_get_argc(self, *args)

    def get_argv(self, *args):
        return _sim_services.CommandLineArguments_get_argv(self, *args)

    def get_output_dir(self, *args):
        return _sim_services.CommandLineArguments_get_output_dir(self, *args)

    def get_output_dir_ref(self, *args):
        return _sim_services.CommandLineArguments_get_output_dir_ref(self, *args)

    def get_user_output_dir(self, *args):
        return _sim_services.CommandLineArguments_get_user_output_dir(self, *args)

    def get_user_output_dir_ref(self, *args):
        return _sim_services.CommandLineArguments_get_user_output_dir_ref(self, *args)

    def get_input_file(self, *args):
        return _sim_services.CommandLineArguments_get_input_file(self, *args)

    def get_input_file_ref(self, *args):
        return _sim_services.CommandLineArguments_get_input_file_ref(self, *args)

    def get_default_dir(self, *args):
        return _sim_services.CommandLineArguments_get_default_dir(self, *args)

    def get_default_dir_ref(self, *args):
        return _sim_services.CommandLineArguments_get_default_dir_ref(self, *args)

    def get_cmdline_name(self, *args):
        return _sim_services.CommandLineArguments_get_cmdline_name(self, *args)

    def get_cmdline_name_ref(self, *args):
        return _sim_services.CommandLineArguments_get_cmdline_name_ref(self, *args)

    def output_dir_timestamped_on(self, *args):
        return _sim_services.CommandLineArguments_output_dir_timestamped_on(self, *args)

    def output_dir_timestamped_off(self, *args):
        return _sim_services.CommandLineArguments_output_dir_timestamped_off(self, *args)

    def set_output_dir(self, *args):
        return _sim_services.CommandLineArguments_set_output_dir(self, *args)
    __swig_destroy__ = _sim_services.delete_CommandLineArguments
    __del__ = lambda self: None
CommandLineArguments_swigregister = _sim_services.CommandLineArguments_swigregister
CommandLineArguments_swigregister(CommandLineArguments)


def command_line_args_process_sim_args(*args):
    return _sim_services.command_line_args_process_sim_args(*args)
command_line_args_process_sim_args = _sim_services.command_line_args_process_sim_args

def command_line_args_get_argc(*args):
    return _sim_services.command_line_args_get_argc(*args)
command_line_args_get_argc = _sim_services.command_line_args_get_argc

def command_line_args_get_argv(*args):
    return _sim_services.command_line_args_get_argv(*args)
command_line_args_get_argv = _sim_services.command_line_args_get_argv

def command_line_args_get_output_dir(*args):
    return _sim_services.command_line_args_get_output_dir(*args)
command_line_args_get_output_dir = _sim_services.command_line_args_get_output_dir

def command_line_args_get_user_output_dir(*args):
    return _sim_services.command_line_args_get_user_output_dir(*args)
command_line_args_get_user_output_dir = _sim_services.command_line_args_get_user_output_dir

def command_line_args_get_input_file(*args):
    return _sim_services.command_line_args_get_input_file(*args)
command_line_args_get_input_file = _sim_services.command_line_args_get_input_file

def command_line_args_get_default_dir(*args):
    return _sim_services.command_line_args_get_default_dir(*args)
command_line_args_get_default_dir = _sim_services.command_line_args_get_default_dir

def command_line_args_get_cmdline_name(*args):
    return _sim_services.command_line_args_get_cmdline_name(*args)
command_line_args_get_cmdline_name = _sim_services.command_line_args_get_cmdline_name

def output_dir_timestamped_on(*args):
    return _sim_services.output_dir_timestamped_on(*args)
output_dir_timestamped_on = _sim_services.output_dir_timestamped_on

def output_dir_timestamped_off(*args):
    return _sim_services.output_dir_timestamped_off(*args)
output_dir_timestamped_off = _sim_services.output_dir_timestamped_off

def set_output_dir(*args):
    return _sim_services.set_output_dir(*args)
set_output_dir = _sim_services.set_output_dir

def command_line_args_get_input_file_ref(*args):
    return _sim_services.command_line_args_get_input_file_ref(*args)
command_line_args_get_input_file_ref = _sim_services.command_line_args_get_input_file_ref
class InstrumentBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_InstrumentBase
    __del__ = lambda self: None

    def get_target_job(self, *args):
        return _sim_services.InstrumentBase_get_target_job(self, *args)
    __swig_setmethods__["name"] = _sim_services.InstrumentBase_name_set
    __swig_getmethods__["name"] = _sim_services.InstrumentBase_name_get
    if _newclass:
        name = _swig_property(_sim_services.InstrumentBase_name_get, _sim_services.InstrumentBase_name_set)
    __swig_setmethods__["phase"] = _sim_services.InstrumentBase_phase_set
    __swig_getmethods__["phase"] = _sim_services.InstrumentBase_phase_get
    if _newclass:
        phase = _swig_property(_sim_services.InstrumentBase_phase_get, _sim_services.InstrumentBase_phase_set)

    def call(self, *args):
        return _sim_services.InstrumentBase_call(self, *args)
InstrumentBase_swigregister = _sim_services.InstrumentBase_swigregister
InstrumentBase_swigregister(InstrumentBase)

class JobData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JobData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JobData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _sim_services.JobData_name_set
    __swig_getmethods__["name"] = _sim_services.JobData_name_get
    if _newclass:
        name = _swig_property(_sim_services.JobData_name_get, _sim_services.JobData_name_set)
    __swig_setmethods__["disabled"] = _sim_services.JobData_disabled_set
    __swig_getmethods__["disabled"] = _sim_services.JobData_disabled_get
    if _newclass:
        disabled = _swig_property(_sim_services.JobData_disabled_get, _sim_services.JobData_disabled_set)
    __swig_setmethods__["complete"] = _sim_services.JobData_complete_set
    __swig_getmethods__["complete"] = _sim_services.JobData_complete_get
    if _newclass:
        complete = _swig_property(_sim_services.JobData_complete_get, _sim_services.JobData_complete_set)
    __swig_setmethods__["handled"] = _sim_services.JobData_handled_set
    __swig_getmethods__["handled"] = _sim_services.JobData_handled_get
    if _newclass:
        handled = _swig_property(_sim_services.JobData_handled_get, _sim_services.JobData_handled_set)
    __swig_setmethods__["cycle"] = _sim_services.JobData_cycle_set
    __swig_getmethods__["cycle"] = _sim_services.JobData_cycle_get
    if _newclass:
        cycle = _swig_property(_sim_services.JobData_cycle_get, _sim_services.JobData_cycle_set)
    __swig_setmethods__["start"] = _sim_services.JobData_start_set
    __swig_getmethods__["start"] = _sim_services.JobData_start_get
    if _newclass:
        start = _swig_property(_sim_services.JobData_start_get, _sim_services.JobData_start_set)
    __swig_setmethods__["stop"] = _sim_services.JobData_stop_set
    __swig_getmethods__["stop"] = _sim_services.JobData_stop_get
    if _newclass:
        stop = _swig_property(_sim_services.JobData_stop_get, _sim_services.JobData_stop_set)
    __swig_setmethods__["sup_class_data"] = _sim_services.JobData_sup_class_data_set
    __swig_getmethods__["sup_class_data"] = _sim_services.JobData_sup_class_data_get
    if _newclass:
        sup_class_data = _swig_property(_sim_services.JobData_sup_class_data_get, _sim_services.JobData_sup_class_data_set)
    __swig_setmethods__["job_class"] = _sim_services.JobData_job_class_set
    __swig_getmethods__["job_class"] = _sim_services.JobData_job_class_get
    if _newclass:
        job_class = _swig_property(_sim_services.JobData_job_class_get, _sim_services.JobData_job_class_set)
    __swig_setmethods__["job_class_name"] = _sim_services.JobData_job_class_name_set
    __swig_getmethods__["job_class_name"] = _sim_services.JobData_job_class_name_get
    if _newclass:
        job_class_name = _swig_property(_sim_services.JobData_job_class_name_get, _sim_services.JobData_job_class_name_set)
    __swig_setmethods__["system_job_class"] = _sim_services.JobData_system_job_class_set
    __swig_getmethods__["system_job_class"] = _sim_services.JobData_system_job_class_get
    if _newclass:
        system_job_class = _swig_property(_sim_services.JobData_system_job_class_get, _sim_services.JobData_system_job_class_set)
    __swig_setmethods__["phase"] = _sim_services.JobData_phase_set
    __swig_getmethods__["phase"] = _sim_services.JobData_phase_get
    if _newclass:
        phase = _swig_property(_sim_services.JobData_phase_get, _sim_services.JobData_phase_set)
    __swig_setmethods__["tags"] = _sim_services.JobData_tags_set
    __swig_getmethods__["tags"] = _sim_services.JobData_tags_get
    if _newclass:
        tags = _swig_property(_sim_services.JobData_tags_get, _sim_services.JobData_tags_set)

    def tags_begin(self, *args):
        return _sim_services.JobData_tags_begin(self, *args)

    def tags_end(self, *args):
        return _sim_services.JobData_tags_end(self, *args)
    __swig_setmethods__["rt_start_time"] = _sim_services.JobData_rt_start_time_set
    __swig_getmethods__["rt_start_time"] = _sim_services.JobData_rt_start_time_get
    if _newclass:
        rt_start_time = _swig_property(_sim_services.JobData_rt_start_time_get, _sim_services.JobData_rt_start_time_set)
    __swig_setmethods__["rt_stop_time"] = _sim_services.JobData_rt_stop_time_set
    __swig_getmethods__["rt_stop_time"] = _sim_services.JobData_rt_stop_time_get
    if _newclass:
        rt_stop_time = _swig_property(_sim_services.JobData_rt_stop_time_get, _sim_services.JobData_rt_stop_time_set)
    __swig_setmethods__["frame_time"] = _sim_services.JobData_frame_time_set
    __swig_getmethods__["frame_time"] = _sim_services.JobData_frame_time_get
    if _newclass:
        frame_time = _swig_property(_sim_services.JobData_frame_time_get, _sim_services.JobData_frame_time_set)
    __swig_setmethods__["frame_id"] = _sim_services.JobData_frame_id_set
    __swig_getmethods__["frame_id"] = _sim_services.JobData_frame_id_get
    if _newclass:
        frame_id = _swig_property(_sim_services.JobData_frame_id_get, _sim_services.JobData_frame_id_set)
    __swig_setmethods__["thread"] = _sim_services.JobData_thread_set
    __swig_getmethods__["thread"] = _sim_services.JobData_thread_get
    if _newclass:
        thread = _swig_property(_sim_services.JobData_thread_get, _sim_services.JobData_thread_set)
    __swig_setmethods__["id"] = _sim_services.JobData_id_set
    __swig_getmethods__["id"] = _sim_services.JobData_id_get
    if _newclass:
        id = _swig_property(_sim_services.JobData_id_get, _sim_services.JobData_id_set)
    __swig_setmethods__["sim_object_id"] = _sim_services.JobData_sim_object_id_set
    __swig_getmethods__["sim_object_id"] = _sim_services.JobData_sim_object_id_get
    if _newclass:
        sim_object_id = _swig_property(_sim_services.JobData_sim_object_id_get, _sim_services.JobData_sim_object_id_set)
    __swig_setmethods__["parent_object"] = _sim_services.JobData_parent_object_set
    __swig_getmethods__["parent_object"] = _sim_services.JobData_parent_object_get
    if _newclass:
        parent_object = _swig_property(_sim_services.JobData_parent_object_get, _sim_services.JobData_parent_object_set)
    __swig_setmethods__["depends"] = _sim_services.JobData_depends_set
    __swig_getmethods__["depends"] = _sim_services.JobData_depends_get
    if _newclass:
        depends = _swig_property(_sim_services.JobData_depends_get, _sim_services.JobData_depends_set)
    __swig_setmethods__["inst_before"] = _sim_services.JobData_inst_before_set
    __swig_getmethods__["inst_before"] = _sim_services.JobData_inst_before_get
    if _newclass:
        inst_before = _swig_property(_sim_services.JobData_inst_before_get, _sim_services.JobData_inst_before_set)
    __swig_setmethods__["inst_after"] = _sim_services.JobData_inst_after_set
    __swig_getmethods__["inst_after"] = _sim_services.JobData_inst_after_get
    if _newclass:
        inst_after = _swig_property(_sim_services.JobData_inst_after_get, _sim_services.JobData_inst_after_set)
    __swig_setmethods__["cycle_tics"] = _sim_services.JobData_cycle_tics_set
    __swig_getmethods__["cycle_tics"] = _sim_services.JobData_cycle_tics_get
    if _newclass:
        cycle_tics = _swig_property(_sim_services.JobData_cycle_tics_get, _sim_services.JobData_cycle_tics_set)
    __swig_setmethods__["start_tics"] = _sim_services.JobData_start_tics_set
    __swig_getmethods__["start_tics"] = _sim_services.JobData_start_tics_get
    if _newclass:
        start_tics = _swig_property(_sim_services.JobData_start_tics_get, _sim_services.JobData_start_tics_set)
    __swig_setmethods__["stop_tics"] = _sim_services.JobData_stop_tics_set
    __swig_getmethods__["stop_tics"] = _sim_services.JobData_stop_tics_get
    if _newclass:
        stop_tics = _swig_property(_sim_services.JobData_stop_tics_get, _sim_services.JobData_stop_tics_set)
    __swig_setmethods__["next_tics"] = _sim_services.JobData_next_tics_set
    __swig_getmethods__["next_tics"] = _sim_services.JobData_next_tics_get
    if _newclass:
        next_tics = _swig_property(_sim_services.JobData_next_tics_get, _sim_services.JobData_next_tics_set)
    __swig_setmethods__["time_tic_value"] = _sim_services.JobData_time_tic_value_set
    __swig_getmethods__["time_tic_value"] = _sim_services.JobData_time_tic_value_get
    if _newclass:
        time_tic_value = _swig_property(_sim_services.JobData_time_tic_value_get, _sim_services.JobData_time_tic_value_set)

    def __init__(self, *args):
        this = _sim_services.new_JobData(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_JobData
    __del__ = lambda self: None

    def get_handled(self, *args):
        return _sim_services.JobData_get_handled(self, *args)

    def enable(self, *args):
        return _sim_services.JobData_enable(self, *args)

    def disable(self, *args):
        return _sim_services.JobData_disable(self, *args)

    def set_handled(self, *args):
        return _sim_services.JobData_set_handled(self, *args)
    __swig_getmethods__["set_time_tic_value"] = lambda x: _sim_services.JobData_set_time_tic_value
    if _newclass:
        set_time_tic_value = staticmethod(_sim_services.JobData_set_time_tic_value)

    def set_cycle(self, *args):
        return _sim_services.JobData_set_cycle(self, *args)

    def calc_cycle_tics(self, *args):
        return _sim_services.JobData_calc_cycle_tics(self, *args)

    def set_next_call_time(self, *args):
        return _sim_services.JobData_set_next_call_time(self, *args)

    def set_system_job_class(self, *args):
        return _sim_services.JobData_set_system_job_class(self, *args)

    def add_tag(self, *args):
        return _sim_services.JobData_add_tag(self, *args)

    def add_depend(self, *args):
        return _sim_services.JobData_add_depend(self, *args)

    def add_inst_before(self, *args):
        return _sim_services.JobData_add_inst_before(self, *args)

    def add_inst_after(self, *args):
        return _sim_services.JobData_add_inst_after(self, *args)

    def remove_inst(self, *args):
        return _sim_services.JobData_remove_inst(self, *args)

    def call(self, *args):
        return _sim_services.JobData_call(self, *args)

    def call_double(self, *args):
        return _sim_services.JobData_call_double(self, *args)

    def copy_from_checkpoint(self, *args):
        return _sim_services.JobData_copy_from_checkpoint(self, *args)
JobData_swigregister = _sim_services.JobData_swigregister
JobData_swigregister(JobData)

def JobData_set_time_tic_value(*args):
    return _sim_services.JobData_set_time_tic_value(*args)
JobData_set_time_tic_value = _sim_services.JobData_set_time_tic_value

class SimObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _sim_services.SimObject_name_set
    __swig_getmethods__["name"] = _sim_services.SimObject_name_get
    if _newclass:
        name = _swig_property(_sim_services.SimObject_name_get, _sim_services.SimObject_name_set)
    __swig_setmethods__["id"] = _sim_services.SimObject_id_set
    __swig_getmethods__["id"] = _sim_services.SimObject_id_get
    if _newclass:
        id = _swig_property(_sim_services.SimObject_id_get, _sim_services.SimObject_id_set)
    __swig_setmethods__["pre_component_objects"] = _sim_services.SimObject_pre_component_objects_set
    __swig_getmethods__["pre_component_objects"] = _sim_services.SimObject_pre_component_objects_get
    if _newclass:
        pre_component_objects = _swig_property(_sim_services.SimObject_pre_component_objects_get, _sim_services.SimObject_pre_component_objects_set)
    __swig_setmethods__["post_component_objects"] = _sim_services.SimObject_post_component_objects_set
    __swig_getmethods__["post_component_objects"] = _sim_services.SimObject_post_component_objects_get
    if _newclass:
        post_component_objects = _swig_property(_sim_services.SimObject_post_component_objects_get, _sim_services.SimObject_post_component_objects_set)
    __swig_setmethods__["jobs"] = _sim_services.SimObject_jobs_set
    __swig_getmethods__["jobs"] = _sim_services.SimObject_jobs_get
    if _newclass:
        jobs = _swig_property(_sim_services.SimObject_jobs_get, _sim_services.SimObject_jobs_set)
    __swig_destroy__ = _sim_services.delete_SimObject
    __del__ = lambda self: None

    def get_job(self, *args):
        return _sim_services.SimObject_get_job(self, *args)

    def add_tag(self, *args):
        return _sim_services.SimObject_add_tag(self, *args)

    def add_tag_to_job(self, *args):
        return _sim_services.SimObject_add_tag_to_job(self, *args)

    def add_pre_component_object(self, *args):
        return _sim_services.SimObject_add_pre_component_object(self, *args)

    def add_post_component_object(self, *args):
        return _sim_services.SimObject_add_post_component_object(self, *args)

    def add_job(self, *args):
        return _sim_services.SimObject_add_job(self, *args)

    def enable(self, *args):
        return _sim_services.SimObject_enable(self, *args)

    def disable(self, *args):
        return _sim_services.SimObject_disable(self, *args)

    def call_function(self, *args):
        return _sim_services.SimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _sim_services.SimObject_call_function_double(self, *args)
SimObject_swigregister = _sim_services.SimObject_swigregister
SimObject_swigregister(SimObject)


_sim_services.TRICK_VOID_swigconstant(_sim_services)
TRICK_VOID = _sim_services.TRICK_VOID

_sim_services.TRICK_CHARACTER_swigconstant(_sim_services)
TRICK_CHARACTER = _sim_services.TRICK_CHARACTER

_sim_services.TRICK_UNSIGNED_CHARACTER_swigconstant(_sim_services)
TRICK_UNSIGNED_CHARACTER = _sim_services.TRICK_UNSIGNED_CHARACTER

_sim_services.TRICK_STRING_swigconstant(_sim_services)
TRICK_STRING = _sim_services.TRICK_STRING

_sim_services.TRICK_SHORT_swigconstant(_sim_services)
TRICK_SHORT = _sim_services.TRICK_SHORT

_sim_services.TRICK_UNSIGNED_SHORT_swigconstant(_sim_services)
TRICK_UNSIGNED_SHORT = _sim_services.TRICK_UNSIGNED_SHORT

_sim_services.TRICK_INTEGER_swigconstant(_sim_services)
TRICK_INTEGER = _sim_services.TRICK_INTEGER

_sim_services.TRICK_UNSIGNED_INTEGER_swigconstant(_sim_services)
TRICK_UNSIGNED_INTEGER = _sim_services.TRICK_UNSIGNED_INTEGER

_sim_services.TRICK_LONG_swigconstant(_sim_services)
TRICK_LONG = _sim_services.TRICK_LONG

_sim_services.TRICK_UNSIGNED_LONG_swigconstant(_sim_services)
TRICK_UNSIGNED_LONG = _sim_services.TRICK_UNSIGNED_LONG

_sim_services.TRICK_FLOAT_swigconstant(_sim_services)
TRICK_FLOAT = _sim_services.TRICK_FLOAT

_sim_services.TRICK_DOUBLE_swigconstant(_sim_services)
TRICK_DOUBLE = _sim_services.TRICK_DOUBLE

_sim_services.TRICK_BITFIELD_swigconstant(_sim_services)
TRICK_BITFIELD = _sim_services.TRICK_BITFIELD

_sim_services.TRICK_UNSIGNED_BITFIELD_swigconstant(_sim_services)
TRICK_UNSIGNED_BITFIELD = _sim_services.TRICK_UNSIGNED_BITFIELD

_sim_services.TRICK_LONG_LONG_swigconstant(_sim_services)
TRICK_LONG_LONG = _sim_services.TRICK_LONG_LONG

_sim_services.TRICK_UNSIGNED_LONG_LONG_swigconstant(_sim_services)
TRICK_UNSIGNED_LONG_LONG = _sim_services.TRICK_UNSIGNED_LONG_LONG

_sim_services.TRICK_FILE_PTR_swigconstant(_sim_services)
TRICK_FILE_PTR = _sim_services.TRICK_FILE_PTR

_sim_services.TRICK_BOOLEAN_swigconstant(_sim_services)
TRICK_BOOLEAN = _sim_services.TRICK_BOOLEAN

_sim_services.TRICK_WCHAR_swigconstant(_sim_services)
TRICK_WCHAR = _sim_services.TRICK_WCHAR

_sim_services.TRICK_WSTRING_swigconstant(_sim_services)
TRICK_WSTRING = _sim_services.TRICK_WSTRING

_sim_services.TRICK_VOID_PTR_swigconstant(_sim_services)
TRICK_VOID_PTR = _sim_services.TRICK_VOID_PTR

_sim_services.TRICK_ENUMERATED_swigconstant(_sim_services)
TRICK_ENUMERATED = _sim_services.TRICK_ENUMERATED

_sim_services.TRICK_STRUCTURED_swigconstant(_sim_services)
TRICK_STRUCTURED = _sim_services.TRICK_STRUCTURED

_sim_services.TRICK_OPAQUE_TYPE_swigconstant(_sim_services)
TRICK_OPAQUE_TYPE = _sim_services.TRICK_OPAQUE_TYPE

_sim_services.TRICK_STL_swigconstant(_sim_services)
TRICK_STL = _sim_services.TRICK_STL

_sim_services.TRICK_NUMBER_OF_TYPES_swigconstant(_sim_services)
TRICK_NUMBER_OF_TYPES = _sim_services.TRICK_NUMBER_OF_TYPES

def trickTypeCharString(*args):
    return _sim_services.trickTypeCharString(*args)
trickTypeCharString = _sim_services.trickTypeCharString

_sim_services.TRICK_VAR_OUTPUT_swigconstant(_sim_services)
TRICK_VAR_OUTPUT = _sim_services.TRICK_VAR_OUTPUT

_sim_services.TRICK_VAR_INPUT_swigconstant(_sim_services)
TRICK_VAR_INPUT = _sim_services.TRICK_VAR_INPUT

_sim_services.TRICK_CHKPNT_OUTPUT_swigconstant(_sim_services)
TRICK_CHKPNT_OUTPUT = _sim_services.TRICK_CHKPNT_OUTPUT

_sim_services.TRICK_CHKPNT_INPUT_swigconstant(_sim_services)
TRICK_CHKPNT_INPUT = _sim_services.TRICK_CHKPNT_INPUT

_sim_services.TRICK_MODS_UNITSDASHDASH_swigconstant(_sim_services)
TRICK_MODS_UNITSDASHDASH = _sim_services.TRICK_MODS_UNITSDASHDASH

_sim_services.TRICK_MAX_INDEX_swigconstant(_sim_services)
TRICK_MAX_INDEX = _sim_services.TRICK_MAX_INDEX

_sim_services.Language_C_swigconstant(_sim_services)
Language_C = _sim_services.Language_C

_sim_services.Language_CPP_swigconstant(_sim_services)
Language_CPP = _sim_services.Language_CPP
class ENUM_ATTR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENUM_ATTR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENUM_ATTR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _sim_services.ENUM_ATTR_label_set
    __swig_getmethods__["label"] = _sim_services.ENUM_ATTR_label_get
    if _newclass:
        label = _swig_property(_sim_services.ENUM_ATTR_label_get, _sim_services.ENUM_ATTR_label_set)
    __swig_setmethods__["value"] = _sim_services.ENUM_ATTR_value_set
    __swig_getmethods__["value"] = _sim_services.ENUM_ATTR_value_get
    if _newclass:
        value = _swig_property(_sim_services.ENUM_ATTR_value_get, _sim_services.ENUM_ATTR_value_set)
    __swig_setmethods__["mods"] = _sim_services.ENUM_ATTR_mods_set
    __swig_getmethods__["mods"] = _sim_services.ENUM_ATTR_mods_get
    if _newclass:
        mods = _swig_property(_sim_services.ENUM_ATTR_mods_get, _sim_services.ENUM_ATTR_mods_set)

    def __init__(self):
        this = _sim_services.new_ENUM_ATTR()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ENUM_ATTR
    __del__ = lambda self: None
ENUM_ATTR_swigregister = _sim_services.ENUM_ATTR_swigregister
ENUM_ATTR_swigregister(ENUM_ATTR)

class INDEX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INDEX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INDEX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _sim_services.INDEX_size_set
    __swig_getmethods__["size"] = _sim_services.INDEX_size_get
    if _newclass:
        size = _swig_property(_sim_services.INDEX_size_get, _sim_services.INDEX_size_set)
    __swig_setmethods__["start"] = _sim_services.INDEX_start_set
    __swig_getmethods__["start"] = _sim_services.INDEX_start_get
    if _newclass:
        start = _swig_property(_sim_services.INDEX_start_get, _sim_services.INDEX_start_set)

    def __init__(self):
        this = _sim_services.new_INDEX()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_INDEX
    __del__ = lambda self: None
INDEX_swigregister = _sim_services.INDEX_swigregister
INDEX_swigregister(INDEX)

class ATTRIBUTES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ATTRIBUTES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ATTRIBUTES, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _sim_services.ATTRIBUTES_name_set
    __swig_getmethods__["name"] = _sim_services.ATTRIBUTES_name_get
    if _newclass:
        name = _swig_property(_sim_services.ATTRIBUTES_name_get, _sim_services.ATTRIBUTES_name_set)
    __swig_setmethods__["type_name"] = _sim_services.ATTRIBUTES_type_name_set
    __swig_getmethods__["type_name"] = _sim_services.ATTRIBUTES_type_name_get
    if _newclass:
        type_name = _swig_property(_sim_services.ATTRIBUTES_type_name_get, _sim_services.ATTRIBUTES_type_name_set)
    __swig_setmethods__["units"] = _sim_services.ATTRIBUTES_units_set
    __swig_getmethods__["units"] = _sim_services.ATTRIBUTES_units_get
    if _newclass:
        units = _swig_property(_sim_services.ATTRIBUTES_units_get, _sim_services.ATTRIBUTES_units_set)
    __swig_setmethods__["alias"] = _sim_services.ATTRIBUTES_alias_set
    __swig_getmethods__["alias"] = _sim_services.ATTRIBUTES_alias_get
    if _newclass:
        alias = _swig_property(_sim_services.ATTRIBUTES_alias_get, _sim_services.ATTRIBUTES_alias_set)
    __swig_setmethods__["user_defined"] = _sim_services.ATTRIBUTES_user_defined_set
    __swig_getmethods__["user_defined"] = _sim_services.ATTRIBUTES_user_defined_get
    if _newclass:
        user_defined = _swig_property(_sim_services.ATTRIBUTES_user_defined_get, _sim_services.ATTRIBUTES_user_defined_set)
    __swig_setmethods__["des"] = _sim_services.ATTRIBUTES_des_set
    __swig_getmethods__["des"] = _sim_services.ATTRIBUTES_des_get
    if _newclass:
        des = _swig_property(_sim_services.ATTRIBUTES_des_get, _sim_services.ATTRIBUTES_des_set)
    __swig_setmethods__["io"] = _sim_services.ATTRIBUTES_io_set
    __swig_getmethods__["io"] = _sim_services.ATTRIBUTES_io_get
    if _newclass:
        io = _swig_property(_sim_services.ATTRIBUTES_io_get, _sim_services.ATTRIBUTES_io_set)
    __swig_setmethods__["type"] = _sim_services.ATTRIBUTES_type_set
    __swig_getmethods__["type"] = _sim_services.ATTRIBUTES_type_get
    if _newclass:
        type = _swig_property(_sim_services.ATTRIBUTES_type_get, _sim_services.ATTRIBUTES_type_set)
    __swig_setmethods__["size"] = _sim_services.ATTRIBUTES_size_set
    __swig_getmethods__["size"] = _sim_services.ATTRIBUTES_size_get
    if _newclass:
        size = _swig_property(_sim_services.ATTRIBUTES_size_get, _sim_services.ATTRIBUTES_size_set)
    __swig_setmethods__["range_min"] = _sim_services.ATTRIBUTES_range_min_set
    __swig_getmethods__["range_min"] = _sim_services.ATTRIBUTES_range_min_get
    if _newclass:
        range_min = _swig_property(_sim_services.ATTRIBUTES_range_min_get, _sim_services.ATTRIBUTES_range_min_set)
    __swig_setmethods__["range_max"] = _sim_services.ATTRIBUTES_range_max_set
    __swig_getmethods__["range_max"] = _sim_services.ATTRIBUTES_range_max_get
    if _newclass:
        range_max = _swig_property(_sim_services.ATTRIBUTES_range_max_get, _sim_services.ATTRIBUTES_range_max_set)
    __swig_setmethods__["language"] = _sim_services.ATTRIBUTES_language_set
    __swig_getmethods__["language"] = _sim_services.ATTRIBUTES_language_get
    if _newclass:
        language = _swig_property(_sim_services.ATTRIBUTES_language_get, _sim_services.ATTRIBUTES_language_set)
    __swig_setmethods__["mods"] = _sim_services.ATTRIBUTES_mods_set
    __swig_getmethods__["mods"] = _sim_services.ATTRIBUTES_mods_get
    if _newclass:
        mods = _swig_property(_sim_services.ATTRIBUTES_mods_get, _sim_services.ATTRIBUTES_mods_set)
    __swig_setmethods__["offset"] = _sim_services.ATTRIBUTES_offset_set
    __swig_getmethods__["offset"] = _sim_services.ATTRIBUTES_offset_get
    if _newclass:
        offset = _swig_property(_sim_services.ATTRIBUTES_offset_get, _sim_services.ATTRIBUTES_offset_set)
    __swig_setmethods__["attr"] = _sim_services.ATTRIBUTES_attr_set
    __swig_getmethods__["attr"] = _sim_services.ATTRIBUTES_attr_get
    if _newclass:
        attr = _swig_property(_sim_services.ATTRIBUTES_attr_get, _sim_services.ATTRIBUTES_attr_set)
    __swig_setmethods__["num_index"] = _sim_services.ATTRIBUTES_num_index_set
    __swig_getmethods__["num_index"] = _sim_services.ATTRIBUTES_num_index_get
    if _newclass:
        num_index = _swig_property(_sim_services.ATTRIBUTES_num_index_get, _sim_services.ATTRIBUTES_num_index_set)
    __swig_setmethods__["index"] = _sim_services.ATTRIBUTES_index_set
    __swig_getmethods__["index"] = _sim_services.ATTRIBUTES_index_get
    if _newclass:
        index = _swig_property(_sim_services.ATTRIBUTES_index_get, _sim_services.ATTRIBUTES_index_set)
    __swig_setmethods__["checkpoint_stl"] = _sim_services.ATTRIBUTES_checkpoint_stl_set
    __swig_getmethods__["checkpoint_stl"] = _sim_services.ATTRIBUTES_checkpoint_stl_get
    if _newclass:
        checkpoint_stl = _swig_property(_sim_services.ATTRIBUTES_checkpoint_stl_get, _sim_services.ATTRIBUTES_checkpoint_stl_set)
    __swig_setmethods__["post_checkpoint_stl"] = _sim_services.ATTRIBUTES_post_checkpoint_stl_set
    __swig_getmethods__["post_checkpoint_stl"] = _sim_services.ATTRIBUTES_post_checkpoint_stl_get
    if _newclass:
        post_checkpoint_stl = _swig_property(_sim_services.ATTRIBUTES_post_checkpoint_stl_get, _sim_services.ATTRIBUTES_post_checkpoint_stl_set)
    __swig_setmethods__["restore_stl"] = _sim_services.ATTRIBUTES_restore_stl_set
    __swig_getmethods__["restore_stl"] = _sim_services.ATTRIBUTES_restore_stl_get
    if _newclass:
        restore_stl = _swig_property(_sim_services.ATTRIBUTES_restore_stl_get, _sim_services.ATTRIBUTES_restore_stl_set)
    __swig_setmethods__["clear_stl"] = _sim_services.ATTRIBUTES_clear_stl_set
    __swig_getmethods__["clear_stl"] = _sim_services.ATTRIBUTES_clear_stl_get
    if _newclass:
        clear_stl = _swig_property(_sim_services.ATTRIBUTES_clear_stl_get, _sim_services.ATTRIBUTES_clear_stl_set)

    def __init__(self):
        this = _sim_services.new_ATTRIBUTES()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ATTRIBUTES
    __del__ = lambda self: None
ATTRIBUTES_swigregister = _sim_services.ATTRIBUTES_swigregister
ATTRIBUTES_swigregister(ATTRIBUTES)

class ENUM_LIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ENUM_LIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ENUM_LIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type_name"] = _sim_services.ENUM_LIST_type_name_set
    __swig_getmethods__["type_name"] = _sim_services.ENUM_LIST_type_name_get
    if _newclass:
        type_name = _swig_property(_sim_services.ENUM_LIST_type_name_get, _sim_services.ENUM_LIST_type_name_set)
    __swig_setmethods__["E"] = _sim_services.ENUM_LIST_E_set
    __swig_getmethods__["E"] = _sim_services.ENUM_LIST_E_get
    if _newclass:
        E = _swig_property(_sim_services.ENUM_LIST_E_get, _sim_services.ENUM_LIST_E_set)

    def __init__(self):
        this = _sim_services.new_ENUM_LIST()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ENUM_LIST
    __del__ = lambda self: None
ENUM_LIST_swigregister = _sim_services.ENUM_LIST_swigregister
ENUM_LIST_swigregister(ENUM_LIST)

class NAME_TO_ATTR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NAME_TO_ATTR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NAME_TO_ATTR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _sim_services.NAME_TO_ATTR_name_set
    __swig_getmethods__["name"] = _sim_services.NAME_TO_ATTR_name_get
    if _newclass:
        name = _swig_property(_sim_services.NAME_TO_ATTR_name_get, _sim_services.NAME_TO_ATTR_name_set)
    __swig_setmethods__["attr"] = _sim_services.NAME_TO_ATTR_attr_set
    __swig_getmethods__["attr"] = _sim_services.NAME_TO_ATTR_attr_get
    if _newclass:
        attr = _swig_property(_sim_services.NAME_TO_ATTR_attr_get, _sim_services.NAME_TO_ATTR_attr_set)
    __swig_setmethods__["size"] = _sim_services.NAME_TO_ATTR_size_set
    __swig_getmethods__["size"] = _sim_services.NAME_TO_ATTR_size_get
    if _newclass:
        size = _swig_property(_sim_services.NAME_TO_ATTR_size_get, _sim_services.NAME_TO_ATTR_size_set)

    def __init__(self):
        this = _sim_services.new_NAME_TO_ATTR()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_NAME_TO_ATTR
    __del__ = lambda self: None
NAME_TO_ATTR_swigregister = _sim_services.NAME_TO_ATTR_swigregister
NAME_TO_ATTR_swigregister(NAME_TO_ATTR)

class EQUIV_ATTRIBUTES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EQUIV_ATTRIBUTES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EQUIV_ATTRIBUTES, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _sim_services.EQUIV_ATTRIBUTES_attr_set
    __swig_getmethods__["attr"] = _sim_services.EQUIV_ATTRIBUTES_attr_get
    if _newclass:
        attr = _swig_property(_sim_services.EQUIV_ATTRIBUTES_attr_get, _sim_services.EQUIV_ATTRIBUTES_attr_set)
    __swig_setmethods__["base"] = _sim_services.EQUIV_ATTRIBUTES_base_set
    __swig_getmethods__["base"] = _sim_services.EQUIV_ATTRIBUTES_base_get
    if _newclass:
        base = _swig_property(_sim_services.EQUIV_ATTRIBUTES_base_get, _sim_services.EQUIV_ATTRIBUTES_base_set)

    def __init__(self):
        this = _sim_services.new_EQUIV_ATTRIBUTES()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_EQUIV_ATTRIBUTES
    __del__ = lambda self: None
EQUIV_ATTRIBUTES_swigregister = _sim_services.EQUIV_ATTRIBUTES_swigregister
EQUIV_ATTRIBUTES_swigregister(EQUIV_ATTRIBUTES)


_sim_services.MAX_VALUE_swigconstant(_sim_services)
MAX_VALUE = _sim_services.MAX_VALUE
class VALUE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VALUE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VALUE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _sim_services.VALUE_c_set
    __swig_getmethods__["c"] = _sim_services.VALUE_c_get
    if _newclass:
        c = _swig_property(_sim_services.VALUE_c_get, _sim_services.VALUE_c_set)
    __swig_setmethods__["cp"] = _sim_services.VALUE_cp_set
    __swig_getmethods__["cp"] = _sim_services.VALUE_cp_get
    if _newclass:
        cp = _swig_property(_sim_services.VALUE_cp_get, _sim_services.VALUE_cp_set)
    __swig_setmethods__["s"] = _sim_services.VALUE_s_set
    __swig_getmethods__["s"] = _sim_services.VALUE_s_get
    if _newclass:
        s = _swig_property(_sim_services.VALUE_s_get, _sim_services.VALUE_s_set)
    __swig_setmethods__["fp"] = _sim_services.VALUE_fp_set
    __swig_getmethods__["fp"] = _sim_services.VALUE_fp_get
    if _newclass:
        fp = _swig_property(_sim_services.VALUE_fp_get, _sim_services.VALUE_fp_set)
    __swig_setmethods__["i"] = _sim_services.VALUE_i_set
    __swig_getmethods__["i"] = _sim_services.VALUE_i_get
    if _newclass:
        i = _swig_property(_sim_services.VALUE_i_get, _sim_services.VALUE_i_set)
    __swig_setmethods__["l"] = _sim_services.VALUE_l_set
    __swig_getmethods__["l"] = _sim_services.VALUE_l_get
    if _newclass:
        l = _swig_property(_sim_services.VALUE_l_get, _sim_services.VALUE_l_set)
    __swig_setmethods__["f"] = _sim_services.VALUE_f_set
    __swig_getmethods__["f"] = _sim_services.VALUE_f_get
    if _newclass:
        f = _swig_property(_sim_services.VALUE_f_get, _sim_services.VALUE_f_set)
    __swig_setmethods__["d"] = _sim_services.VALUE_d_set
    __swig_getmethods__["d"] = _sim_services.VALUE_d_get
    if _newclass:
        d = _swig_property(_sim_services.VALUE_d_get, _sim_services.VALUE_d_set)
    __swig_setmethods__["ll"] = _sim_services.VALUE_ll_set
    __swig_getmethods__["ll"] = _sim_services.VALUE_ll_get
    if _newclass:
        ll = _swig_property(_sim_services.VALUE_ll_get, _sim_services.VALUE_ll_set)
    __swig_setmethods__["vp"] = _sim_services.VALUE_vp_set
    __swig_getmethods__["vp"] = _sim_services.VALUE_vp_get
    if _newclass:
        vp = _swig_property(_sim_services.VALUE_vp_get, _sim_services.VALUE_vp_set)

    def __init__(self):
        this = _sim_services.new_VALUE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VALUE
    __del__ = lambda self: None
VALUE_swigregister = _sim_services.VALUE_swigregister
VALUE_swigregister(VALUE)

class V_DATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V_DATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V_DATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sim_services.V_DATA_type_set
    __swig_getmethods__["type"] = _sim_services.V_DATA_type_get
    if _newclass:
        type = _swig_property(_sim_services.V_DATA_type_get, _sim_services.V_DATA_type_set)
    __swig_setmethods__["value"] = _sim_services.V_DATA_value_set
    __swig_getmethods__["value"] = _sim_services.V_DATA_value_get
    if _newclass:
        value = _swig_property(_sim_services.V_DATA_value_get, _sim_services.V_DATA_value_set)

    def __init__(self):
        this = _sim_services.new_V_DATA()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_V_DATA
    __del__ = lambda self: None
V_DATA_swigregister = _sim_services.V_DATA_swigregister
V_DATA_swigregister(V_DATA)

class VALUE_LIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VALUE_LIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VALUE_LIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_val"] = _sim_services.VALUE_LIST_num_val_set
    __swig_getmethods__["num_val"] = _sim_services.VALUE_LIST_num_val_get
    if _newclass:
        num_val = _swig_property(_sim_services.VALUE_LIST_num_val_get, _sim_services.VALUE_LIST_num_val_set)
    __swig_setmethods__["v_data"] = _sim_services.VALUE_LIST_v_data_set
    __swig_getmethods__["v_data"] = _sim_services.VALUE_LIST_v_data_get
    if _newclass:
        v_data = _swig_property(_sim_services.VALUE_LIST_v_data_get, _sim_services.VALUE_LIST_v_data_set)

    def __init__(self):
        this = _sim_services.new_VALUE_LIST()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VALUE_LIST
    __del__ = lambda self: None
VALUE_LIST_swigregister = _sim_services.VALUE_LIST_swigregister
VALUE_LIST_swigregister(VALUE_LIST)

class V_TREE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V_TREE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V_TREE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["last"] = _sim_services.V_TREE_last_set
    __swig_getmethods__["last"] = _sim_services.V_TREE_last_get
    if _newclass:
        last = _swig_property(_sim_services.V_TREE_last_get, _sim_services.V_TREE_last_set)
    __swig_setmethods__["next"] = _sim_services.V_TREE_next_set
    __swig_getmethods__["next"] = _sim_services.V_TREE_next_get
    if _newclass:
        next = _swig_property(_sim_services.V_TREE_next_get, _sim_services.V_TREE_next_set)
    __swig_setmethods__["down"] = _sim_services.V_TREE_down_set
    __swig_getmethods__["down"] = _sim_services.V_TREE_down_get
    if _newclass:
        down = _swig_property(_sim_services.V_TREE_down_get, _sim_services.V_TREE_down_set)
    __swig_setmethods__["v_data"] = _sim_services.V_TREE_v_data_set
    __swig_getmethods__["v_data"] = _sim_services.V_TREE_v_data_get
    if _newclass:
        v_data = _swig_property(_sim_services.V_TREE_v_data_get, _sim_services.V_TREE_v_data_set)

    def __init__(self):
        this = _sim_services.new_V_TREE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_V_TREE
    __del__ = lambda self: None
V_TREE_swigregister = _sim_services.V_TREE_swigregister
V_TREE_swigregister(V_TREE)

class DLLNODE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DLLNODE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DLLNODE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _sim_services.DLLNODE_info_set
    __swig_getmethods__["info"] = _sim_services.DLLNODE_info_get
    if _newclass:
        info = _swig_property(_sim_services.DLLNODE_info_get, _sim_services.DLLNODE_info_set)
    __swig_setmethods__["prev"] = _sim_services.DLLNODE_prev_set
    __swig_getmethods__["prev"] = _sim_services.DLLNODE_prev_get
    if _newclass:
        prev = _swig_property(_sim_services.DLLNODE_prev_get, _sim_services.DLLNODE_prev_set)
    __swig_setmethods__["next"] = _sim_services.DLLNODE_next_set
    __swig_getmethods__["next"] = _sim_services.DLLNODE_next_get
    if _newclass:
        next = _swig_property(_sim_services.DLLNODE_next_get, _sim_services.DLLNODE_next_set)

    def __init__(self):
        this = _sim_services.new_DLLNODE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_DLLNODE
    __del__ = lambda self: None
DLLNODE_swigregister = _sim_services.DLLNODE_swigregister
DLLNODE_swigregister(DLLNODE)

class DLLIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DLLIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DLLIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _sim_services.DLLIST_count_set
    __swig_getmethods__["count"] = _sim_services.DLLIST_count_get
    if _newclass:
        count = _swig_property(_sim_services.DLLIST_count_get, _sim_services.DLLIST_count_set)
    __swig_setmethods__["head"] = _sim_services.DLLIST_head_set
    __swig_getmethods__["head"] = _sim_services.DLLIST_head_get
    if _newclass:
        head = _swig_property(_sim_services.DLLIST_head_get, _sim_services.DLLIST_head_set)
    __swig_setmethods__["tail"] = _sim_services.DLLIST_tail_set
    __swig_getmethods__["tail"] = _sim_services.DLLIST_tail_get
    if _newclass:
        tail = _swig_property(_sim_services.DLLIST_tail_get, _sim_services.DLLIST_tail_set)
    __swig_setmethods__["compare"] = _sim_services.DLLIST_compare_set
    __swig_getmethods__["compare"] = _sim_services.DLLIST_compare_get
    if _newclass:
        compare = _swig_property(_sim_services.DLLIST_compare_get, _sim_services.DLLIST_compare_set)

    def __init__(self):
        this = _sim_services.new_DLLIST()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_DLLIST
    __del__ = lambda self: None
DLLIST_swigregister = _sim_services.DLLIST_swigregister
DLLIST_swigregister(DLLIST)


def DLL_Create(*args):
    return _sim_services.DLL_Create(*args)
DLL_Create = _sim_services.DLL_Create

def DLL_Delete(*args):
    return _sim_services.DLL_Delete(*args)
DLL_Delete = _sim_services.DLL_Delete

def DLL_Init(*args):
    return _sim_services.DLL_Init(*args)
DLL_Init = _sim_services.DLL_Init

def DLL_GetCount(*args):
    return _sim_services.DLL_GetCount(*args)
DLL_GetCount = _sim_services.DLL_GetCount

def DLL_Find(*args):
    return _sim_services.DLL_Find(*args)
DLL_Find = _sim_services.DLL_Find

def DLL_FindPos(*args):
    return _sim_services.DLL_FindPos(*args)
DLL_FindPos = _sim_services.DLL_FindPos

def DLL_FindIndex(*args):
    return _sim_services.DLL_FindIndex(*args)
DLL_FindIndex = _sim_services.DLL_FindIndex

def DLL_GetAt(*args):
    return _sim_services.DLL_GetAt(*args)
DLL_GetAt = _sim_services.DLL_GetAt

def DLL_SetAt(*args):
    return _sim_services.DLL_SetAt(*args)
DLL_SetAt = _sim_services.DLL_SetAt

def DLL_RemoveAt(*args):
    return _sim_services.DLL_RemoveAt(*args)
DLL_RemoveAt = _sim_services.DLL_RemoveAt

def DLL_RemoveAll(*args):
    return _sim_services.DLL_RemoveAll(*args)
DLL_RemoveAll = _sim_services.DLL_RemoveAll

def DLL_InsertBefore(*args):
    return _sim_services.DLL_InsertBefore(*args)
DLL_InsertBefore = _sim_services.DLL_InsertBefore

def DLL_InsertAfter(*args):
    return _sim_services.DLL_InsertAfter(*args)
DLL_InsertAfter = _sim_services.DLL_InsertAfter

def DLL_GetNext(*args):
    return _sim_services.DLL_GetNext(*args)
DLL_GetNext = _sim_services.DLL_GetNext

def DLL_GetPrev(*args):
    return _sim_services.DLL_GetPrev(*args)
DLL_GetPrev = _sim_services.DLL_GetPrev

def DLL_AddHead(*args):
    return _sim_services.DLL_AddHead(*args)
DLL_AddHead = _sim_services.DLL_AddHead

def DLL_AddTail(*args):
    return _sim_services.DLL_AddTail(*args)
DLL_AddTail = _sim_services.DLL_AddTail

def DLL_GetHeadPosition(*args):
    return _sim_services.DLL_GetHeadPosition(*args)
DLL_GetHeadPosition = _sim_services.DLL_GetHeadPosition

def DLL_GetTailPosition(*args):
    return _sim_services.DLL_GetTailPosition(*args)
DLL_GetTailPosition = _sim_services.DLL_GetTailPosition

def bubble_sort(*args):
    return _sim_services.bubble_sort(*args)
bubble_sort = _sim_services.bubble_sort

_sim_services.TRICK_NO_ERROR_swigconstant(_sim_services)
TRICK_NO_ERROR = _sim_services.TRICK_NO_ERROR

_sim_services.TRICK_PARAMETER_ARRAY_SIZE_swigconstant(_sim_services)
TRICK_PARAMETER_ARRAY_SIZE = _sim_services.TRICK_PARAMETER_ARRAY_SIZE

_sim_services.TRICK_PARAMETER_ADDRESS_NULL_swigconstant(_sim_services)
TRICK_PARAMETER_ADDRESS_NULL = _sim_services.TRICK_PARAMETER_ADDRESS_NULL

_sim_services.TRICK_UNITS_CONVERSION_ERROR_swigconstant(_sim_services)
TRICK_UNITS_CONVERSION_ERROR = _sim_services.TRICK_UNITS_CONVERSION_ERROR

_sim_services.REF_ADDRESS_swigconstant(_sim_services)
REF_ADDRESS = _sim_services.REF_ADDRESS

_sim_services.REF_VALUE_swigconstant(_sim_services)
REF_VALUE = _sim_services.REF_VALUE

_sim_services.REF_INVALID_swigconstant(_sim_services)
REF_INVALID = _sim_services.REF_INVALID

_sim_services.AO_ADDRESS_swigconstant(_sim_services)
AO_ADDRESS = _sim_services.AO_ADDRESS

_sim_services.AO_OFFSET_swigconstant(_sim_services)
AO_OFFSET = _sim_services.AO_OFFSET

_sim_services.AO_DEREFERENCE_swigconstant(_sim_services)
AO_DEREFERENCE = _sim_services.AO_DEREFERENCE
class ADDRESS_OPERAND(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADDRESS_OPERAND, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADDRESS_OPERAND, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _sim_services.ADDRESS_OPERAND_address_set
    __swig_getmethods__["address"] = _sim_services.ADDRESS_OPERAND_address_get
    if _newclass:
        address = _swig_property(_sim_services.ADDRESS_OPERAND_address_get, _sim_services.ADDRESS_OPERAND_address_set)
    __swig_setmethods__["offset"] = _sim_services.ADDRESS_OPERAND_offset_set
    __swig_getmethods__["offset"] = _sim_services.ADDRESS_OPERAND_offset_get
    if _newclass:
        offset = _swig_property(_sim_services.ADDRESS_OPERAND_offset_get, _sim_services.ADDRESS_OPERAND_offset_set)

    def __init__(self):
        this = _sim_services.new_ADDRESS_OPERAND()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ADDRESS_OPERAND
    __del__ = lambda self: None
ADDRESS_OPERAND_swigregister = _sim_services.ADDRESS_OPERAND_swigregister
ADDRESS_OPERAND_swigregister(ADDRESS_OPERAND)

class ADDRESS_NODE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADDRESS_NODE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADDRESS_NODE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["operator_"] = _sim_services.ADDRESS_NODE_operator__set
    __swig_getmethods__["operator_"] = _sim_services.ADDRESS_NODE_operator__get
    if _newclass:
        operator_ = _swig_property(_sim_services.ADDRESS_NODE_operator__get, _sim_services.ADDRESS_NODE_operator__set)
    __swig_setmethods__["operand"] = _sim_services.ADDRESS_NODE_operand_set
    __swig_getmethods__["operand"] = _sim_services.ADDRESS_NODE_operand_get
    if _newclass:
        operand = _swig_property(_sim_services.ADDRESS_NODE_operand_get, _sim_services.ADDRESS_NODE_operand_set)

    def __init__(self):
        this = _sim_services.new_ADDRESS_NODE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ADDRESS_NODE
    __del__ = lambda self: None
ADDRESS_NODE_swigregister = _sim_services.ADDRESS_NODE_swigregister
ADDRESS_NODE_swigregister(ADDRESS_NODE)

class REF2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, REF2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, REF2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reference"] = _sim_services.REF2_reference_set
    __swig_getmethods__["reference"] = _sim_services.REF2_reference_get
    if _newclass:
        reference = _swig_property(_sim_services.REF2_reference_get, _sim_services.REF2_reference_set)
    __swig_setmethods__["num_index"] = _sim_services.REF2_num_index_set
    __swig_getmethods__["num_index"] = _sim_services.REF2_num_index_get
    if _newclass:
        num_index = _swig_property(_sim_services.REF2_num_index_get, _sim_services.REF2_num_index_set)
    __swig_setmethods__["units"] = _sim_services.REF2_units_set
    __swig_getmethods__["units"] = _sim_services.REF2_units_get
    if _newclass:
        units = _swig_property(_sim_services.REF2_units_get, _sim_services.REF2_units_set)
    __swig_setmethods__["num_index_left"] = _sim_services.REF2_num_index_left_set
    __swig_getmethods__["num_index_left"] = _sim_services.REF2_num_index_left_get
    if _newclass:
        num_index_left = _swig_property(_sim_services.REF2_num_index_left_get, _sim_services.REF2_num_index_left_set)
    __swig_setmethods__["pointer_present"] = _sim_services.REF2_pointer_present_set
    __swig_getmethods__["pointer_present"] = _sim_services.REF2_pointer_present_get
    if _newclass:
        pointer_present = _swig_property(_sim_services.REF2_pointer_present_get, _sim_services.REF2_pointer_present_set)
    __swig_setmethods__["ref_type"] = _sim_services.REF2_ref_type_set
    __swig_getmethods__["ref_type"] = _sim_services.REF2_ref_type_get
    if _newclass:
        ref_type = _swig_property(_sim_services.REF2_ref_type_get, _sim_services.REF2_ref_type_set)
    __swig_setmethods__["address"] = _sim_services.REF2_address_set
    __swig_getmethods__["address"] = _sim_services.REF2_address_get
    if _newclass:
        address = _swig_property(_sim_services.REF2_address_get, _sim_services.REF2_address_set)
    __swig_setmethods__["v_data"] = _sim_services.REF2_v_data_set
    __swig_getmethods__["v_data"] = _sim_services.REF2_v_data_get
    if _newclass:
        v_data = _swig_property(_sim_services.REF2_v_data_get, _sim_services.REF2_v_data_set)
    __swig_setmethods__["attr"] = _sim_services.REF2_attr_set
    __swig_getmethods__["attr"] = _sim_services.REF2_attr_get
    if _newclass:
        attr = _swig_property(_sim_services.REF2_attr_get, _sim_services.REF2_attr_set)
    __swig_setmethods__["ref_attr"] = _sim_services.REF2_ref_attr_set
    __swig_getmethods__["ref_attr"] = _sim_services.REF2_ref_attr_get
    if _newclass:
        ref_attr = _swig_property(_sim_services.REF2_ref_attr_get, _sim_services.REF2_ref_attr_set)
    __swig_setmethods__["create_add_path"] = _sim_services.REF2_create_add_path_set
    __swig_getmethods__["create_add_path"] = _sim_services.REF2_create_add_path_get
    if _newclass:
        create_add_path = _swig_property(_sim_services.REF2_create_add_path_get, _sim_services.REF2_create_add_path_set)
    __swig_setmethods__["address_path"] = _sim_services.REF2_address_path_set
    __swig_getmethods__["address_path"] = _sim_services.REF2_address_path_get
    if _newclass:
        address_path = _swig_property(_sim_services.REF2_address_path_get, _sim_services.REF2_address_path_set)

    def __init__(self):
        this = _sim_services.new_REF2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_REF2
    __del__ = lambda self: None
REF2_swigregister = _sim_services.REF2_swigregister
REF2_swigregister(REF2)


def ref_to_value(*args):
    return _sim_services.ref_to_value(*args)
ref_to_value = _sim_services.ref_to_value

_sim_services.DR_Always_swigconstant(_sim_services)
DR_Always = _sim_services.DR_Always

_sim_services.DR_Changes_swigconstant(_sim_services)
DR_Changes = _sim_services.DR_Changes

_sim_services.DR_Changes_Step_swigconstant(_sim_services)
DR_Changes_Step = _sim_services.DR_Changes_Step

_sim_services.DR_Buffer_swigconstant(_sim_services)
DR_Buffer = _sim_services.DR_Buffer

_sim_services.DR_No_Buffer_swigconstant(_sim_services)
DR_No_Buffer = _sim_services.DR_No_Buffer

_sim_services.DR_Ring_Buffer_swigconstant(_sim_services)
DR_Ring_Buffer = _sim_services.DR_Ring_Buffer

_sim_services.DR_Thread_Buffer_swigconstant(_sim_services)
DR_Thread_Buffer = _sim_services.DR_Thread_Buffer

_sim_services.DR_Not_Specified_swigconstant(_sim_services)
DR_Not_Specified = _sim_services.DR_Not_Specified
class DataRecordBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRecordBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataRecordBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer"] = _sim_services.DataRecordBuffer_buffer_set
    __swig_getmethods__["buffer"] = _sim_services.DataRecordBuffer_buffer_get
    if _newclass:
        buffer = _swig_property(_sim_services.DataRecordBuffer_buffer_get, _sim_services.DataRecordBuffer_buffer_set)
    __swig_setmethods__["curr_buffer"] = _sim_services.DataRecordBuffer_curr_buffer_set
    __swig_getmethods__["curr_buffer"] = _sim_services.DataRecordBuffer_curr_buffer_get
    if _newclass:
        curr_buffer = _swig_property(_sim_services.DataRecordBuffer_curr_buffer_get, _sim_services.DataRecordBuffer_curr_buffer_set)
    __swig_setmethods__["last_value"] = _sim_services.DataRecordBuffer_last_value_set
    __swig_getmethods__["last_value"] = _sim_services.DataRecordBuffer_last_value_get
    if _newclass:
        last_value = _swig_property(_sim_services.DataRecordBuffer_last_value_get, _sim_services.DataRecordBuffer_last_value_set)
    __swig_setmethods__["ref"] = _sim_services.DataRecordBuffer_ref_set
    __swig_getmethods__["ref"] = _sim_services.DataRecordBuffer_ref_get
    if _newclass:
        ref = _swig_property(_sim_services.DataRecordBuffer_ref_get, _sim_services.DataRecordBuffer_ref_set)
    __swig_setmethods__["ref_searched"] = _sim_services.DataRecordBuffer_ref_searched_set
    __swig_getmethods__["ref_searched"] = _sim_services.DataRecordBuffer_ref_searched_get
    if _newclass:
        ref_searched = _swig_property(_sim_services.DataRecordBuffer_ref_searched_get, _sim_services.DataRecordBuffer_ref_searched_set)
    __swig_setmethods__["name"] = _sim_services.DataRecordBuffer_name_set
    __swig_getmethods__["name"] = _sim_services.DataRecordBuffer_name_get
    if _newclass:
        name = _swig_property(_sim_services.DataRecordBuffer_name_get, _sim_services.DataRecordBuffer_name_set)
    __swig_setmethods__["alias"] = _sim_services.DataRecordBuffer_alias_set
    __swig_getmethods__["alias"] = _sim_services.DataRecordBuffer_alias_get
    if _newclass:
        alias = _swig_property(_sim_services.DataRecordBuffer_alias_get, _sim_services.DataRecordBuffer_alias_set)

    def __init__(self, *args):
        this = _sim_services.new_DataRecordBuffer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_DataRecordBuffer
    __del__ = lambda self: None
DataRecordBuffer_swigregister = _sim_services.DataRecordBuffer_swigregister
DataRecordBuffer_swigregister(DataRecordBuffer)

class DataRecordGroup(SimObject):
    __swig_setmethods__ = {}
    for _s in [SimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRecordGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataRecordGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["record"] = _sim_services.DataRecordGroup_record_set
    __swig_getmethods__["record"] = _sim_services.DataRecordGroup_record_get
    if _newclass:
        record = _swig_property(_sim_services.DataRecordGroup_record_get, _sim_services.DataRecordGroup_record_set)
    __swig_setmethods__["inited"] = _sim_services.DataRecordGroup_inited_set
    __swig_getmethods__["inited"] = _sim_services.DataRecordGroup_inited_get
    if _newclass:
        inited = _swig_property(_sim_services.DataRecordGroup_inited_get, _sim_services.DataRecordGroup_inited_set)
    __swig_setmethods__["group_name"] = _sim_services.DataRecordGroup_group_name_set
    __swig_getmethods__["group_name"] = _sim_services.DataRecordGroup_group_name_get
    if _newclass:
        group_name = _swig_property(_sim_services.DataRecordGroup_group_name_get, _sim_services.DataRecordGroup_group_name_set)
    __swig_setmethods__["output_dir"] = _sim_services.DataRecordGroup_output_dir_set
    __swig_getmethods__["output_dir"] = _sim_services.DataRecordGroup_output_dir_get
    if _newclass:
        output_dir = _swig_property(_sim_services.DataRecordGroup_output_dir_get, _sim_services.DataRecordGroup_output_dir_set)
    __swig_setmethods__["file_name"] = _sim_services.DataRecordGroup_file_name_set
    __swig_getmethods__["file_name"] = _sim_services.DataRecordGroup_file_name_get
    if _newclass:
        file_name = _swig_property(_sim_services.DataRecordGroup_file_name_get, _sim_services.DataRecordGroup_file_name_set)
    __swig_setmethods__["freq"] = _sim_services.DataRecordGroup_freq_set
    __swig_getmethods__["freq"] = _sim_services.DataRecordGroup_freq_get
    if _newclass:
        freq = _swig_property(_sim_services.DataRecordGroup_freq_get, _sim_services.DataRecordGroup_freq_set)
    __swig_setmethods__["start"] = _sim_services.DataRecordGroup_start_set
    __swig_getmethods__["start"] = _sim_services.DataRecordGroup_start_get
    if _newclass:
        start = _swig_property(_sim_services.DataRecordGroup_start_get, _sim_services.DataRecordGroup_start_set)
    __swig_setmethods__["cycle"] = _sim_services.DataRecordGroup_cycle_set
    __swig_getmethods__["cycle"] = _sim_services.DataRecordGroup_cycle_get
    if _newclass:
        cycle = _swig_property(_sim_services.DataRecordGroup_cycle_get, _sim_services.DataRecordGroup_cycle_set)
    __swig_setmethods__["time_value_attr"] = _sim_services.DataRecordGroup_time_value_attr_set
    __swig_getmethods__["time_value_attr"] = _sim_services.DataRecordGroup_time_value_attr_get
    if _newclass:
        time_value_attr = _swig_property(_sim_services.DataRecordGroup_time_value_attr_get, _sim_services.DataRecordGroup_time_value_attr_set)
    __swig_setmethods__["num_variable_names"] = _sim_services.DataRecordGroup_num_variable_names_set
    __swig_getmethods__["num_variable_names"] = _sim_services.DataRecordGroup_num_variable_names_get
    if _newclass:
        num_variable_names = _swig_property(_sim_services.DataRecordGroup_num_variable_names_get, _sim_services.DataRecordGroup_num_variable_names_set)
    __swig_setmethods__["variable_names"] = _sim_services.DataRecordGroup_variable_names_set
    __swig_getmethods__["variable_names"] = _sim_services.DataRecordGroup_variable_names_get
    if _newclass:
        variable_names = _swig_property(_sim_services.DataRecordGroup_variable_names_get, _sim_services.DataRecordGroup_variable_names_set)
    __swig_setmethods__["variable_alias"] = _sim_services.DataRecordGroup_variable_alias_set
    __swig_getmethods__["variable_alias"] = _sim_services.DataRecordGroup_variable_alias_get
    if _newclass:
        variable_alias = _swig_property(_sim_services.DataRecordGroup_variable_alias_get, _sim_services.DataRecordGroup_variable_alias_set)
    __swig_setmethods__["rec_buffer"] = _sim_services.DataRecordGroup_rec_buffer_set
    __swig_getmethods__["rec_buffer"] = _sim_services.DataRecordGroup_rec_buffer_get
    if _newclass:
        rec_buffer = _swig_property(_sim_services.DataRecordGroup_rec_buffer_get, _sim_services.DataRecordGroup_rec_buffer_set)
    __swig_setmethods__["num_change_variable_names"] = _sim_services.DataRecordGroup_num_change_variable_names_set
    __swig_getmethods__["num_change_variable_names"] = _sim_services.DataRecordGroup_num_change_variable_names_get
    if _newclass:
        num_change_variable_names = _swig_property(_sim_services.DataRecordGroup_num_change_variable_names_get, _sim_services.DataRecordGroup_num_change_variable_names_set)
    __swig_setmethods__["change_variable_names"] = _sim_services.DataRecordGroup_change_variable_names_set
    __swig_getmethods__["change_variable_names"] = _sim_services.DataRecordGroup_change_variable_names_get
    if _newclass:
        change_variable_names = _swig_property(_sim_services.DataRecordGroup_change_variable_names_get, _sim_services.DataRecordGroup_change_variable_names_set)
    __swig_setmethods__["change_variable_alias"] = _sim_services.DataRecordGroup_change_variable_alias_set
    __swig_getmethods__["change_variable_alias"] = _sim_services.DataRecordGroup_change_variable_alias_get
    if _newclass:
        change_variable_alias = _swig_property(_sim_services.DataRecordGroup_change_variable_alias_get, _sim_services.DataRecordGroup_change_variable_alias_set)
    __swig_setmethods__["change_buffer"] = _sim_services.DataRecordGroup_change_buffer_set
    __swig_getmethods__["change_buffer"] = _sim_services.DataRecordGroup_change_buffer_get
    if _newclass:
        change_buffer = _swig_property(_sim_services.DataRecordGroup_change_buffer_get, _sim_services.DataRecordGroup_change_buffer_set)
    __swig_setmethods__["max_num"] = _sim_services.DataRecordGroup_max_num_set
    __swig_getmethods__["max_num"] = _sim_services.DataRecordGroup_max_num_get
    if _newclass:
        max_num = _swig_property(_sim_services.DataRecordGroup_max_num_get, _sim_services.DataRecordGroup_max_num_set)
    __swig_setmethods__["buffer_num"] = _sim_services.DataRecordGroup_buffer_num_set
    __swig_getmethods__["buffer_num"] = _sim_services.DataRecordGroup_buffer_num_get
    if _newclass:
        buffer_num = _swig_property(_sim_services.DataRecordGroup_buffer_num_get, _sim_services.DataRecordGroup_buffer_num_set)
    __swig_setmethods__["writer_num"] = _sim_services.DataRecordGroup_writer_num_set
    __swig_getmethods__["writer_num"] = _sim_services.DataRecordGroup_writer_num_get
    if _newclass:
        writer_num = _swig_property(_sim_services.DataRecordGroup_writer_num_get, _sim_services.DataRecordGroup_writer_num_set)
    __swig_setmethods__["max_file_size"] = _sim_services.DataRecordGroup_max_file_size_set
    __swig_getmethods__["max_file_size"] = _sim_services.DataRecordGroup_max_file_size_get
    if _newclass:
        max_file_size = _swig_property(_sim_services.DataRecordGroup_max_file_size_get, _sim_services.DataRecordGroup_max_file_size_set)
    __swig_setmethods__["total_bytes_written"] = _sim_services.DataRecordGroup_total_bytes_written_set
    __swig_getmethods__["total_bytes_written"] = _sim_services.DataRecordGroup_total_bytes_written_get
    if _newclass:
        total_bytes_written = _swig_property(_sim_services.DataRecordGroup_total_bytes_written_get, _sim_services.DataRecordGroup_total_bytes_written_set)
    __swig_setmethods__["writer_buff"] = _sim_services.DataRecordGroup_writer_buff_set
    __swig_getmethods__["writer_buff"] = _sim_services.DataRecordGroup_writer_buff_get
    if _newclass:
        writer_buff = _swig_property(_sim_services.DataRecordGroup_writer_buff_get, _sim_services.DataRecordGroup_writer_buff_set)
    __swig_setmethods__["byte_order"] = _sim_services.DataRecordGroup_byte_order_set
    __swig_getmethods__["byte_order"] = _sim_services.DataRecordGroup_byte_order_get
    if _newclass:
        byte_order = _swig_property(_sim_services.DataRecordGroup_byte_order_get, _sim_services.DataRecordGroup_byte_order_set)
    __swig_setmethods__["single_prec_only"] = _sim_services.DataRecordGroup_single_prec_only_set
    __swig_getmethods__["single_prec_only"] = _sim_services.DataRecordGroup_single_prec_only_get
    if _newclass:
        single_prec_only = _swig_property(_sim_services.DataRecordGroup_single_prec_only_get, _sim_services.DataRecordGroup_single_prec_only_set)
    __swig_setmethods__["buffer_type"] = _sim_services.DataRecordGroup_buffer_type_set
    __swig_getmethods__["buffer_type"] = _sim_services.DataRecordGroup_buffer_type_get
    if _newclass:
        buffer_type = _swig_property(_sim_services.DataRecordGroup_buffer_type_get, _sim_services.DataRecordGroup_buffer_type_set)
    __swig_setmethods__["job_class"] = _sim_services.DataRecordGroup_job_class_set
    __swig_getmethods__["job_class"] = _sim_services.DataRecordGroup_job_class_get
    if _newclass:
        job_class = _swig_property(_sim_services.DataRecordGroup_job_class_get, _sim_services.DataRecordGroup_job_class_set)
    __swig_setmethods__["write_job"] = _sim_services.DataRecordGroup_write_job_set
    __swig_getmethods__["write_job"] = _sim_services.DataRecordGroup_write_job_get
    if _newclass:
        write_job = _swig_property(_sim_services.DataRecordGroup_write_job_get, _sim_services.DataRecordGroup_write_job_set)
    __swig_destroy__ = _sim_services.delete_DataRecordGroup
    __del__ = lambda self: None

    def get_group_name(self, *args):
        return _sim_services.DataRecordGroup_get_group_name(self, *args)

    def register_group_with_mm(self, *args):
        return _sim_services.DataRecordGroup_register_group_with_mm(self, *args)

    def set_job_class(self, *args):
        return _sim_services.DataRecordGroup_set_job_class(self, *args)

    def set_cycle(self, *args):
        return _sim_services.DataRecordGroup_set_cycle(self, *args)

    def set_phase(self, *args):
        return _sim_services.DataRecordGroup_set_phase(self, *args)

    def set_freq(self, *args):
        return _sim_services.DataRecordGroup_set_freq(self, *args)

    def set_max_buffer_size(self, *args):
        return _sim_services.DataRecordGroup_set_max_buffer_size(self, *args)

    def set_buffer_type(self, *args):
        return _sim_services.DataRecordGroup_set_buffer_type(self, *args)

    def set_max_file_size(self, *args):
        return _sim_services.DataRecordGroup_set_max_file_size(self, *args)

    def set_single_prec_only(self, *args):
        return _sim_services.DataRecordGroup_set_single_prec_only(self, *args)

    def set_thread(self, *args):
        return _sim_services.DataRecordGroup_set_thread(self, *args)

    def enable(self, *args):
        return _sim_services.DataRecordGroup_enable(self, *args)

    def disable(self, *args):
        return _sim_services.DataRecordGroup_disable(self, *args)

    def init(self, *args):
        return _sim_services.DataRecordGroup_init(self, *args)

    def checkpoint(self, *args):
        return _sim_services.DataRecordGroup_checkpoint(self, *args)

    def clear_checkpoint_vars(self, *args):
        return _sim_services.DataRecordGroup_clear_checkpoint_vars(self, *args)

    def restart(self, *args):
        return _sim_services.DataRecordGroup_restart(self, *args)

    def dmtcp_restart(self, *args):
        return _sim_services.DataRecordGroup_dmtcp_restart(self, *args)

    def format_specific_header(self, *args):
        return _sim_services.DataRecordGroup_format_specific_header(self, *args)

    def format_specific_init(self, *args):
        return _sim_services.DataRecordGroup_format_specific_init(self, *args)

    def format_specific_write_data(self, *args):
        return _sim_services.DataRecordGroup_format_specific_write_data(self, *args)

    def format_specific_shutdown(self, *args):
        return _sim_services.DataRecordGroup_format_specific_shutdown(self, *args)

    def write_header(self, *args):
        return _sim_services.DataRecordGroup_write_header(self, *args)

    def remove_variable(self, *args):
        return _sim_services.DataRecordGroup_remove_variable(self, *args)

    def remove_all_variables(self, *args):
        return _sim_services.DataRecordGroup_remove_all_variables(self, *args)

    def add_variable(self, *args):
        return _sim_services.DataRecordGroup_add_variable(self, *args)

    def add_change_variable(self, *args):
        return _sim_services.DataRecordGroup_add_change_variable(self, *args)

    def data_record(self, *args):
        return _sim_services.DataRecordGroup_data_record(self, *args)

    def write_data(self, *args):
        return _sim_services.DataRecordGroup_write_data(self, *args)

    def shutdown(self, *args):
        return _sim_services.DataRecordGroup_shutdown(self, *args)

    def call_function(self, *args):
        return _sim_services.DataRecordGroup_call_function(self, *args)

    def call_function_double(self, *args):
        return _sim_services.DataRecordGroup_call_function_double(self, *args)

    def type_string(self, *args):
        return _sim_services.DataRecordGroup_type_string(self, *args)
DataRecordGroup_swigregister = _sim_services.DataRecordGroup_swigregister
DataRecordGroup_swigregister(DataRecordGroup)

class DRAscii(DataRecordGroup):
    __swig_setmethods__ = {}
    for _s in [DataRecordGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRAscii, name, value)
    __swig_getmethods__ = {}
    for _s in [DataRecordGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRAscii, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ascii_float_format"] = _sim_services.DRAscii_ascii_float_format_set
    __swig_getmethods__["ascii_float_format"] = _sim_services.DRAscii_ascii_float_format_get
    if _newclass:
        ascii_float_format = _swig_property(_sim_services.DRAscii_ascii_float_format_get, _sim_services.DRAscii_ascii_float_format_set)
    __swig_setmethods__["ascii_double_format"] = _sim_services.DRAscii_ascii_double_format_set
    __swig_getmethods__["ascii_double_format"] = _sim_services.DRAscii_ascii_double_format_get
    if _newclass:
        ascii_double_format = _swig_property(_sim_services.DRAscii_ascii_double_format_get, _sim_services.DRAscii_ascii_double_format_set)
    __swig_setmethods__["delimiter"] = _sim_services.DRAscii_delimiter_set
    __swig_getmethods__["delimiter"] = _sim_services.DRAscii_delimiter_get
    if _newclass:
        delimiter = _swig_property(_sim_services.DRAscii_delimiter_get, _sim_services.DRAscii_delimiter_set)
    __swig_destroy__ = _sim_services.delete_DRAscii
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _sim_services.new_DRAscii(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def format_specific_header(self, *args):
        return _sim_services.DRAscii_format_specific_header(self, *args)

    def format_specific_init(self, *args):
        return _sim_services.DRAscii_format_specific_init(self, *args)

    def format_specific_write_data(self, *args):
        return _sim_services.DRAscii_format_specific_write_data(self, *args)

    def format_specific_shutdown(self, *args):
        return _sim_services.DRAscii_format_specific_shutdown(self, *args)

    def set_ascii_float_format(self, *args):
        return _sim_services.DRAscii_set_ascii_float_format(self, *args)

    def set_ascii_double_format(self, *args):
        return _sim_services.DRAscii_set_ascii_double_format(self, *args)

    def set_delimiter(self, *args):
        return _sim_services.DRAscii_set_delimiter(self, *args)

    def set_single_prec_only(self, *args):
        return _sim_services.DRAscii_set_single_prec_only(self, *args)
DRAscii_swigregister = _sim_services.DRAscii_swigregister
DRAscii_swigregister(DRAscii)

class DRBinary(DataRecordGroup):
    __swig_setmethods__ = {}
    for _s in [DataRecordGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRBinary, name, value)
    __swig_getmethods__ = {}
    for _s in [DataRecordGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRBinary, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_DRBinary
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _sim_services.new_DRBinary(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def format_specific_header(self, outstream):
        return _sim_services.DRBinary_format_specific_header(self, outstream)

    def format_specific_init(self):
        return _sim_services.DRBinary_format_specific_init(self)

    def format_specific_write_data(self, writer_offset):
        return _sim_services.DRBinary_format_specific_write_data(self, writer_offset)

    def format_specific_shutdown(self):
        return _sim_services.DRBinary_format_specific_shutdown(self)
DRBinary_swigregister = _sim_services.DRBinary_swigregister
DRBinary_swigregister(DRBinary)

class ScheduledJobQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduledJobQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduledJobQueue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_ScheduledJobQueue(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ScheduledJobQueue
    __del__ = lambda self: None

    def push(self, *args):
        return _sim_services.ScheduledJobQueue_push(self, *args)

    def push_ignore_sim_object(self, *args):
        return _sim_services.ScheduledJobQueue_push_ignore_sim_object(self, *args)

    def remove(self, *args):
        return _sim_services.ScheduledJobQueue_remove(self, *args)

    def get_curr_index(self, *args):
        return _sim_services.ScheduledJobQueue_get_curr_index(self, *args)

    def set_curr_index(self, *args):
        return _sim_services.ScheduledJobQueue_set_curr_index(self, *args)

    def reset_curr_index(self, *args):
        return _sim_services.ScheduledJobQueue_reset_curr_index(self, *args)

    def size(self, *args):
        return _sim_services.ScheduledJobQueue_size(self, *args)

    def empty(self, *args):
        return _sim_services.ScheduledJobQueue_empty(self, *args)

    def clear(self, *args):
        return _sim_services.ScheduledJobQueue_clear(self, *args)

    def execute_all_jobs(self, *args):
        return _sim_services.ScheduledJobQueue_execute_all_jobs(self, *args)

    def write_sched_queue(self, *args):
        return _sim_services.ScheduledJobQueue_write_sched_queue(self, *args)

    def write_non_sched_queue(self, *args):
        return _sim_services.ScheduledJobQueue_write_non_sched_queue(self, *args)

    def instrument_before(self, *args):
        return _sim_services.ScheduledJobQueue_instrument_before(self, *args)

    def instrument_after(self, *args):
        return _sim_services.ScheduledJobQueue_instrument_after(self, *args)

    def instrument_remove(self, *args):
        return _sim_services.ScheduledJobQueue_instrument_remove(self, *args)

    def top(self, *args):
        return _sim_services.ScheduledJobQueue_top(self, *args)

    def get_next_job(self, *args):
        return _sim_services.ScheduledJobQueue_get_next_job(self, *args)

    def find_next_job(self, *args):
        return _sim_services.ScheduledJobQueue_find_next_job(self, *args)

    def find_job(self, *args):
        return _sim_services.ScheduledJobQueue_find_job(self, *args)

    def set_next_job_call_time(self, *args):
        return _sim_services.ScheduledJobQueue_set_next_job_call_time(self, *args)

    def get_next_job_call_time(self, *args):
        return _sim_services.ScheduledJobQueue_get_next_job_call_time(self, *args)

    def test_next_job_call_time(self, *args):
        return _sim_services.ScheduledJobQueue_test_next_job_call_time(self, *args)
ScheduledJobQueue_swigregister = _sim_services.ScheduledJobQueue_swigregister
ScheduledJobQueue_swigregister(ScheduledJobQueue)

class Scheduler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scheduler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scheduler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Scheduler
    __del__ = lambda self: None

    def add_sim_object(self, *args):
        return _sim_services.Scheduler_add_sim_object(self, *args)

    def delete_sim_object(self, *args):
        return _sim_services.Scheduler_delete_sim_object(self, *args)

    def write_sched_queue(self, *args):
        return _sim_services.Scheduler_write_sched_queue(self, *args)

    def write_non_sched_queue(self, *args):
        return _sim_services.Scheduler_write_non_sched_queue(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.Scheduler_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.Scheduler_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.Scheduler_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.Scheduler_instrument_job_remove(self, *args)
Scheduler_swigregister = _sim_services.Scheduler_swigregister
Scheduler_swigregister(Scheduler)

class ThreadBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_ThreadBase
    __del__ = lambda self: None

    def get_name(self, *args):
        return _sim_services.ThreadBase_get_name(self, *args)

    def set_name(self, *args):
        return _sim_services.ThreadBase_set_name(self, *args)

    def get_pthread_id(self, *args):
        return _sim_services.ThreadBase_get_pthread_id(self, *args)

    def get_pid(self, *args):
        return _sim_services.ThreadBase_get_pid(self, *args)

    def set_pid(self, *args):
        return _sim_services.ThreadBase_set_pid(self, *args)

    def cpu_set(self, *args):
        return _sim_services.ThreadBase_cpu_set(self, *args)

    def cpu_clr(self, *args):
        return _sim_services.ThreadBase_cpu_clr(self, *args)

    def execute_cpu_affinity(self, *args):
        return _sim_services.ThreadBase_execute_cpu_affinity(self, *args)

    def set_priority(self, *args):
        return _sim_services.ThreadBase_set_priority(self, *args)

    def execute_priority(self, *args):
        return _sim_services.ThreadBase_execute_priority(self, *args)

    def create_thread(self, *args):
        return _sim_services.ThreadBase_create_thread(self, *args)

    def cancel_thread(self, *args):
        return _sim_services.ThreadBase_cancel_thread(self, *args)

    def thread_body(self, *args):
        return _sim_services.ThreadBase_thread_body(self, *args)
    __swig_getmethods__["thread_helper"] = lambda x: _sim_services.ThreadBase_thread_helper
    if _newclass:
        thread_helper = staticmethod(_sim_services.ThreadBase_thread_helper)

    def dump(self, *args):
        return _sim_services.ThreadBase_dump(self, *args)
ThreadBase_swigregister = _sim_services.ThreadBase_swigregister
ThreadBase_swigregister(ThreadBase)

def ThreadBase_thread_helper(*args):
    return _sim_services.ThreadBase_thread_helper(*args)
ThreadBase_thread_helper = _sim_services.ThreadBase_thread_helper

class DRDMutexes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRDMutexes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DRDMutexes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_DRDMutexes(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["dr_go_cv"] = _sim_services.DRDMutexes_dr_go_cv_set
    __swig_getmethods__["dr_go_cv"] = _sim_services.DRDMutexes_dr_go_cv_get
    if _newclass:
        dr_go_cv = _swig_property(_sim_services.DRDMutexes_dr_go_cv_get, _sim_services.DRDMutexes_dr_go_cv_set)
    __swig_setmethods__["dr_go_mutex"] = _sim_services.DRDMutexes_dr_go_mutex_set
    __swig_getmethods__["dr_go_mutex"] = _sim_services.DRDMutexes_dr_go_mutex_get
    if _newclass:
        dr_go_mutex = _swig_property(_sim_services.DRDMutexes_dr_go_mutex_get, _sim_services.DRDMutexes_dr_go_mutex_set)
    __swig_setmethods__["init_complete_cv"] = _sim_services.DRDMutexes_init_complete_cv_set
    __swig_getmethods__["init_complete_cv"] = _sim_services.DRDMutexes_init_complete_cv_get
    if _newclass:
        init_complete_cv = _swig_property(_sim_services.DRDMutexes_init_complete_cv_get, _sim_services.DRDMutexes_init_complete_cv_set)
    __swig_setmethods__["init_complete_mutex"] = _sim_services.DRDMutexes_init_complete_mutex_set
    __swig_getmethods__["init_complete_mutex"] = _sim_services.DRDMutexes_init_complete_mutex_get
    if _newclass:
        init_complete_mutex = _swig_property(_sim_services.DRDMutexes_init_complete_mutex_get, _sim_services.DRDMutexes_init_complete_mutex_set)
    __swig_destroy__ = _sim_services.delete_DRDMutexes
    __del__ = lambda self: None
DRDMutexes_swigregister = _sim_services.DRDMutexes_swigregister
DRDMutexes_swigregister(DRDMutexes)

class DRDWriterThread(ThreadBase):
    __swig_setmethods__ = {}
    for _s in [ThreadBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRDWriterThread, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRDWriterThread, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_DRDWriterThread(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def thread_body(self, *args):
        return _sim_services.DRDWriterThread_thread_body(self, *args)

    def dump(self, *args):
        return _sim_services.DRDWriterThread_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_DRDWriterThread
    __del__ = lambda self: None
DRDWriterThread_swigregister = _sim_services.DRDWriterThread_swigregister
DRDWriterThread_swigregister(DRDWriterThread)

class DataRecordDispatcher(Scheduler):
    __swig_setmethods__ = {}
    for _s in [Scheduler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRecordDispatcher, name, value)
    __swig_getmethods__ = {}
    for _s in [Scheduler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataRecordDispatcher, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_DataRecordDispatcher(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_DataRecordDispatcher
    __del__ = lambda self: None

    def remove_files(self, *args):
        return _sim_services.DataRecordDispatcher_remove_files(self, *args)

    def init(self, *args):
        return _sim_services.DataRecordDispatcher_init(self, *args)

    def init_groups(self, *args):
        return _sim_services.DataRecordDispatcher_init_groups(self, *args)

    def add_group(self, *args):
        return _sim_services.DataRecordDispatcher_add_group(self, *args)

    def remove_group(self, *args):
        return _sim_services.DataRecordDispatcher_remove_group(self, *args)

    def remove_all_groups(self, *args):
        return _sim_services.DataRecordDispatcher_remove_all_groups(self, *args)

    def get_group(self, *args):
        return _sim_services.DataRecordDispatcher_get_group(self, *args)

    def signal_thread(self, *args):
        return _sim_services.DataRecordDispatcher_signal_thread(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.DataRecordDispatcher_preload_checkpoint(self, *args)

    def restart(self, *args):
        return _sim_services.DataRecordDispatcher_restart(self, *args)

    def dmtcp_restart(self, *args):
        return _sim_services.DataRecordDispatcher_dmtcp_restart(self, *args)

    def shutdown(self, *args):
        return _sim_services.DataRecordDispatcher_shutdown(self, *args)

    def enable(self, *args):
        return _sim_services.DataRecordDispatcher_enable(self, *args)

    def disable(self, *args):
        return _sim_services.DataRecordDispatcher_disable(self, *args)

    def record_now_group(self, *args):
        return _sim_services.DataRecordDispatcher_record_now_group(self, *args)

    def set_group_max_file_size(self, *args):
        return _sim_services.DataRecordDispatcher_set_group_max_file_size(self, *args)

    def set_max_file_size(self, *args):
        return _sim_services.DataRecordDispatcher_set_max_file_size(self, *args)

    def add_sim_object(self, *args):
        return _sim_services.DataRecordDispatcher_add_sim_object(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.DataRecordDispatcher_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.DataRecordDispatcher_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.DataRecordDispatcher_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.DataRecordDispatcher_instrument_job_remove(self, *args)
    __swig_getmethods__["drd_writer_thread"] = _sim_services.DataRecordDispatcher_drd_writer_thread_get
    if _newclass:
        drd_writer_thread = _swig_property(_sim_services.DataRecordDispatcher_drd_writer_thread_get)
DataRecordDispatcher_swigregister = _sim_services.DataRecordDispatcher_swigregister
DataRecordDispatcher_swigregister(DataRecordDispatcher)


def dr_remove_files(*args):
    return _sim_services.dr_remove_files(*args)
dr_remove_files = _sim_services.dr_remove_files

def dr_enable(*args):
    return _sim_services.dr_enable(*args)
dr_enable = _sim_services.dr_enable

def dr_disable(*args):
    return _sim_services.dr_disable(*args)
dr_disable = _sim_services.dr_disable

def dr_enable_group(*args):
    return _sim_services.dr_enable_group(*args)
dr_enable_group = _sim_services.dr_enable_group

def dr_disable_group(*args):
    return _sim_services.dr_disable_group(*args)
dr_disable_group = _sim_services.dr_disable_group

def dr_record_now_group(*args):
    return _sim_services.dr_record_now_group(*args)
dr_record_now_group = _sim_services.dr_record_now_group

def dr_set_max_file_size(*args):
    return _sim_services.dr_set_max_file_size(*args)
dr_set_max_file_size = _sim_services.dr_set_max_file_size

def remove_all_data_record_groups(*args):
    return _sim_services.remove_all_data_record_groups(*args)
remove_all_data_record_groups = _sim_services.remove_all_data_record_groups

def set_max_size_record_group(*args):
    return _sim_services.set_max_size_record_group(*args)
set_max_size_record_group = _sim_services.set_max_size_record_group

def add_data_record_group(*args):
    return _sim_services.add_data_record_group(*args)
add_data_record_group = _sim_services.add_data_record_group

def remove_data_record_group(*args):
    return _sim_services.remove_data_record_group(*args)
remove_data_record_group = _sim_services.remove_data_record_group

def get_data_record_group(*args):
    return _sim_services.get_data_record_group(*args)
get_data_record_group = _sim_services.get_data_record_group
class DebugPause(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DebugPause, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DebugPause, name)
    __repr__ = _swig_repr
    __swig_setmethods__["debug_pause_flag"] = _sim_services.DebugPause_debug_pause_flag_set
    __swig_getmethods__["debug_pause_flag"] = _sim_services.DebugPause_debug_pause_flag_get
    if _newclass:
        debug_pause_flag = _swig_property(_sim_services.DebugPause_debug_pause_flag_get, _sim_services.DebugPause_debug_pause_flag_set)

    def __init__(self, *args):
        this = _sim_services.new_DebugPause(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def debug_pause(self, *args):
        return _sim_services.DebugPause_debug_pause(self, *args)

    def debug_signal(self, *args):
        return _sim_services.DebugPause_debug_signal(self, *args)

    def debug_pause_on(self, *args):
        return _sim_services.DebugPause_debug_pause_on(self, *args)

    def debug_pause_off(self, *args):
        return _sim_services.DebugPause_debug_pause_off(self, *args)
    __swig_destroy__ = _sim_services.delete_DebugPause
    __del__ = lambda self: None
DebugPause_swigregister = _sim_services.DebugPause_swigregister
DebugPause_swigregister(DebugPause)


def debug_pause_on(*args):
    return _sim_services.debug_pause_on(*args)
debug_pause_on = _sim_services.debug_pause_on

def debug_pause_off(*args):
    return _sim_services.debug_pause_off(*args)
debug_pause_off = _sim_services.debug_pause_off

def debug_signal(*args):
    return _sim_services.debug_signal(*args)
debug_signal = _sim_services.debug_signal
class EchoJobs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EchoJobs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EchoJobs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_EchoJobs(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def echo_job(self, *args):
        return _sim_services.EchoJobs_echo_job(self, *args)

    def echojobs_on(self, *args):
        return _sim_services.EchoJobs_echojobs_on(self, *args)

    def echojobs_off(self, *args):
        return _sim_services.EchoJobs_echojobs_off(self, *args)
    __swig_destroy__ = _sim_services.delete_EchoJobs
    __del__ = lambda self: None
EchoJobs_swigregister = _sim_services.EchoJobs_swigregister
EchoJobs_swigregister(EchoJobs)


def echo_jobs_on(*args):
    return _sim_services.echo_jobs_on(*args)
echo_jobs_on = _sim_services.echo_jobs_on

def echo_jobs_off(*args):
    return _sim_services.echo_jobs_off(*args)
echo_jobs_off = _sim_services.echo_jobs_off
class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_Environment(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add_var(self, *args):
        return _sim_services.Environment_add_var(self, *args)

    def get_var(self, *args):
        return _sim_services.Environment_get_var(self, *args)

    def print_vars(self, *args):
        return _sim_services.Environment_print_vars(self, *args)
    __swig_destroy__ = _sim_services.delete_Environment
    __del__ = lambda self: None
Environment_swigregister = _sim_services.Environment_swigregister
Environment_swigregister(Environment)


def env_add_var(*args):
    return _sim_services.env_add_var(*args)
env_add_var = _sim_services.env_add_var

def get_trick_env(*args):
    return _sim_services.get_trick_env(*args)
get_trick_env = _sim_services.get_trick_env

def env_get_var(*args):
    return _sim_services.env_get_var(*args)
env_get_var = _sim_services.env_get_var

def env_print_vars(*args):
    return _sim_services.env_print_vars(*args)
env_print_vars = _sim_services.env_print_vars

_sim_services.TT_MUTEX_swigconstant(_sim_services)
TT_MUTEX = _sim_services.TT_MUTEX

_sim_services.TT_FLAG_swigconstant(_sim_services)
TT_FLAG = _sim_services.TT_FLAG

_sim_services.TT_EVENTFD_swigconstant(_sim_services)
TT_EVENTFD = _sim_services.TT_EVENTFD

_sim_services.TT_FUTEX_swigconstant(_sim_services)
TT_FUTEX = _sim_services.TT_FUTEX
class ThreadTriggerBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadTriggerBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadTriggerBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["tt_type"] = _sim_services.ThreadTriggerBase_tt_type_set
    __swig_getmethods__["tt_type"] = _sim_services.ThreadTriggerBase_tt_type_get
    if _newclass:
        tt_type = _swig_property(_sim_services.ThreadTriggerBase_tt_type_get, _sim_services.ThreadTriggerBase_tt_type_set)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerBase
    __del__ = lambda self: None

    def init(self, *args):
        return _sim_services.ThreadTriggerBase_init(self, *args)

    def fire(self, *args):
        return _sim_services.ThreadTriggerBase_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerBase_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerBase_dump(self, *args)
ThreadTriggerBase_swigregister = _sim_services.ThreadTriggerBase_swigregister
ThreadTriggerBase_swigregister(ThreadTriggerBase)

class ThreadTriggerMutex(ThreadTriggerBase):
    __swig_setmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadTriggerMutex, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadTriggerMutex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_ThreadTriggerMutex(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, *args):
        return _sim_services.ThreadTriggerMutex_init(self, *args)

    def fire(self, *args):
        return _sim_services.ThreadTriggerMutex_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerMutex_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerMutex_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerMutex
    __del__ = lambda self: None
ThreadTriggerMutex_swigregister = _sim_services.ThreadTriggerMutex_swigregister
ThreadTriggerMutex_swigregister(ThreadTriggerMutex)

class ThreadTriggerFlag(ThreadTriggerBase):
    __swig_setmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadTriggerFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadTriggerFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_ThreadTriggerFlag(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def fire(self, *args):
        return _sim_services.ThreadTriggerFlag_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerFlag_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerFlag_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerFlag
    __del__ = lambda self: None
ThreadTriggerFlag_swigregister = _sim_services.ThreadTriggerFlag_swigregister
ThreadTriggerFlag_swigregister(ThreadTriggerFlag)

class ThreadTriggerEventFD(ThreadTriggerBase):
    __swig_setmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadTriggerEventFD, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadTriggerEventFD, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_ThreadTriggerEventFD(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def fire(self, *args):
        return _sim_services.ThreadTriggerEventFD_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerEventFD_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerEventFD_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerEventFD
    __del__ = lambda self: None
ThreadTriggerEventFD_swigregister = _sim_services.ThreadTriggerEventFD_swigregister
ThreadTriggerEventFD_swigregister(ThreadTriggerEventFD)

class ThreadTriggerFutex(ThreadTriggerBase):
    __swig_setmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadTriggerFutex, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadTriggerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadTriggerFutex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_ThreadTriggerFutex(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def fire(self, *args):
        return _sim_services.ThreadTriggerFutex_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerFutex_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerFutex_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerFutex
    __del__ = lambda self: None
ThreadTriggerFutex_swigregister = _sim_services.ThreadTriggerFutex_swigregister
ThreadTriggerFutex_swigregister(ThreadTriggerFutex)

class ThreadTriggerContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadTriggerContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadTriggerContainer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_ThreadTriggerContainer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getThreadTrigger(self, *args):
        return _sim_services.ThreadTriggerContainer_getThreadTrigger(self, *args)

    def setThreadTrigger(self, *args):
        return _sim_services.ThreadTriggerContainer_setThreadTrigger(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerContainer
    __del__ = lambda self: None
ThreadTriggerContainer_swigregister = _sim_services.ThreadTriggerContainer_swigregister
ThreadTriggerContainer_swigregister(ThreadTriggerContainer)


_sim_services.PROCESS_TYPE_SCHEDULED_swigconstant(_sim_services)
PROCESS_TYPE_SCHEDULED = _sim_services.PROCESS_TYPE_SCHEDULED

_sim_services.PROCESS_TYPE_ASYNC_CHILD_swigconstant(_sim_services)
PROCESS_TYPE_ASYNC_CHILD = _sim_services.PROCESS_TYPE_ASYNC_CHILD

_sim_services.PROCESS_TYPE_AMF_CHILD_swigconstant(_sim_services)
PROCESS_TYPE_AMF_CHILD = _sim_services.PROCESS_TYPE_AMF_CHILD
class Threads(ThreadBase):
    __swig_setmethods__ = {}
    for _s in [ThreadBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Threads, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Threads, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_Threads(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_pthread_id(self, *args):
        return _sim_services.Threads_set_pthread_id(self, *args)

    def thread_body(self, *args):
        return _sim_services.Threads_thread_body(self, *args)

    def set_enabled(self, *args):
        return _sim_services.Threads_set_enabled(self, *args)

    def set_process_type(self, *args):
        return _sim_services.Threads_set_process_type(self, *args)

    def set_amf_cycle(self, *args):
        return _sim_services.Threads_set_amf_cycle(self, *args)

    def time_tic_changed(self, *args):
        return _sim_services.Threads_time_tic_changed(self, *args)

    def set_async_wait(self, *args):
        return _sim_services.Threads_set_async_wait(self, *args)

    def clear_scheduled_queues(self, *args):
        return _sim_services.Threads_clear_scheduled_queues(self, *args)

    def dump(self, *args):
        return _sim_services.Threads_dump(self, *args)
    __swig_setmethods__["enabled"] = _sim_services.Threads_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.Threads_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.Threads_enabled_get, _sim_services.Threads_enabled_set)
    __swig_setmethods__["thread_id"] = _sim_services.Threads_thread_id_set
    __swig_getmethods__["thread_id"] = _sim_services.Threads_thread_id_get
    if _newclass:
        thread_id = _swig_property(_sim_services.Threads_thread_id_get, _sim_services.Threads_thread_id_set)
    __swig_setmethods__["curr_time_tics"] = _sim_services.Threads_curr_time_tics_set
    __swig_getmethods__["curr_time_tics"] = _sim_services.Threads_curr_time_tics_get
    if _newclass:
        curr_time_tics = _swig_property(_sim_services.Threads_curr_time_tics_get, _sim_services.Threads_curr_time_tics_set)
    __swig_setmethods__["amf_cycle"] = _sim_services.Threads_amf_cycle_set
    __swig_getmethods__["amf_cycle"] = _sim_services.Threads_amf_cycle_get
    if _newclass:
        amf_cycle = _swig_property(_sim_services.Threads_amf_cycle_get, _sim_services.Threads_amf_cycle_set)
    __swig_setmethods__["amf_cycle_tics"] = _sim_services.Threads_amf_cycle_tics_set
    __swig_getmethods__["amf_cycle_tics"] = _sim_services.Threads_amf_cycle_tics_get
    if _newclass:
        amf_cycle_tics = _swig_property(_sim_services.Threads_amf_cycle_tics_get, _sim_services.Threads_amf_cycle_tics_set)
    __swig_setmethods__["amf_next_tics"] = _sim_services.Threads_amf_next_tics_set
    __swig_getmethods__["amf_next_tics"] = _sim_services.Threads_amf_next_tics_get
    if _newclass:
        amf_next_tics = _swig_property(_sim_services.Threads_amf_next_tics_get, _sim_services.Threads_amf_next_tics_set)
    __swig_setmethods__["job_queue"] = _sim_services.Threads_job_queue_set
    __swig_getmethods__["job_queue"] = _sim_services.Threads_job_queue_get
    if _newclass:
        job_queue = _swig_property(_sim_services.Threads_job_queue_get, _sim_services.Threads_job_queue_set)
    __swig_setmethods__["top_of_frame_queue"] = _sim_services.Threads_top_of_frame_queue_set
    __swig_getmethods__["top_of_frame_queue"] = _sim_services.Threads_top_of_frame_queue_get
    if _newclass:
        top_of_frame_queue = _swig_property(_sim_services.Threads_top_of_frame_queue_get, _sim_services.Threads_top_of_frame_queue_set)
    __swig_setmethods__["end_of_frame_queue"] = _sim_services.Threads_end_of_frame_queue_set
    __swig_getmethods__["end_of_frame_queue"] = _sim_services.Threads_end_of_frame_queue_get
    if _newclass:
        end_of_frame_queue = _swig_property(_sim_services.Threads_end_of_frame_queue_get, _sim_services.Threads_end_of_frame_queue_set)
    __swig_setmethods__["curr_job"] = _sim_services.Threads_curr_job_set
    __swig_getmethods__["curr_job"] = _sim_services.Threads_curr_job_get
    if _newclass:
        curr_job = _swig_property(_sim_services.Threads_curr_job_get, _sim_services.Threads_curr_job_set)
    __swig_setmethods__["rt_nap"] = _sim_services.Threads_rt_nap_set
    __swig_getmethods__["rt_nap"] = _sim_services.Threads_rt_nap_get
    if _newclass:
        rt_nap = _swig_property(_sim_services.Threads_rt_nap_get, _sim_services.Threads_rt_nap_set)
    __swig_setmethods__["process_type"] = _sim_services.Threads_process_type_set
    __swig_getmethods__["process_type"] = _sim_services.Threads_process_type_get
    if _newclass:
        process_type = _swig_property(_sim_services.Threads_process_type_get, _sim_services.Threads_process_type_set)
    __swig_setmethods__["child_complete"] = _sim_services.Threads_child_complete_set
    __swig_getmethods__["child_complete"] = _sim_services.Threads_child_complete_get
    if _newclass:
        child_complete = _swig_property(_sim_services.Threads_child_complete_get, _sim_services.Threads_child_complete_set)
    __swig_setmethods__["running"] = _sim_services.Threads_running_set
    __swig_getmethods__["running"] = _sim_services.Threads_running_get
    if _newclass:
        running = _swig_property(_sim_services.Threads_running_get, _sim_services.Threads_running_set)
    __swig_setmethods__["trigger_container"] = _sim_services.Threads_trigger_container_set
    __swig_getmethods__["trigger_container"] = _sim_services.Threads_trigger_container_get
    if _newclass:
        trigger_container = _swig_property(_sim_services.Threads_trigger_container_get, _sim_services.Threads_trigger_container_set)
    __swig_setmethods__["shutdown_wait_async"] = _sim_services.Threads_shutdown_wait_async_set
    __swig_getmethods__["shutdown_wait_async"] = _sim_services.Threads_shutdown_wait_async_get
    if _newclass:
        shutdown_wait_async = _swig_property(_sim_services.Threads_shutdown_wait_async_get, _sim_services.Threads_shutdown_wait_async_set)
    __swig_destroy__ = _sim_services.delete_Threads
    __del__ = lambda self: None
Threads_swigregister = _sim_services.Threads_swigregister
Threads_swigregister(Threads)


_sim_services.NoCmd_swigconstant(_sim_services)
NoCmd = _sim_services.NoCmd

_sim_services.FreezeCmd_swigconstant(_sim_services)
FreezeCmd = _sim_services.FreezeCmd

_sim_services.RunCmd_swigconstant(_sim_services)
RunCmd = _sim_services.RunCmd

_sim_services.ExitCmd_swigconstant(_sim_services)
ExitCmd = _sim_services.ExitCmd

_sim_services.Initialization_swigconstant(_sim_services)
Initialization = _sim_services.Initialization

_sim_services.Freeze_swigconstant(_sim_services)
Freeze = _sim_services.Freeze

_sim_services.Step_swigconstant(_sim_services)
Step = _sim_services.Step

_sim_services.Run_swigconstant(_sim_services)
Run = _sim_services.Run

_sim_services.ExitMode_swigconstant(_sim_services)
ExitMode = _sim_services.ExitMode
class Executive(Scheduler):
    __swig_setmethods__ = {}
    for _s in [Scheduler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Executive, name, value)
    __swig_getmethods__ = {}
    for _s in [Scheduler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Executive, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_Executive(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_Executive
    __del__ = lambda self: None

    def get_all_jobs_vector(self, *args):
        return _sim_services.Executive_get_all_jobs_vector(self, *args)

    def get_attach_debugger(self, *args):
        return _sim_services.Executive_get_attach_debugger(self, *args)

    def get_current_version(self, *args):
        return _sim_services.Executive_get_current_version(self, *args)

    def get_debugger_command(self, *args):
        return _sim_services.Executive_get_debugger_command(self, *args)

    def get_exec_command(self, *args):
        return _sim_services.Executive_get_exec_command(self, *args)

    def get_enable_freeze(self, *args):
        return _sim_services.Executive_get_enable_freeze(self, *args)

    def get_freeze_command(self, *args):
        return _sim_services.Executive_get_freeze_command(self, *args)

    def get_freeze_on_frame_boundary(self, *args):
        return _sim_services.Executive_get_freeze_on_frame_boundary(self, *args)

    def get_freeze_frame(self, *args):
        return _sim_services.Executive_get_freeze_frame(self, *args)

    def get_freeze_frame_tics(self, *args):
        return _sim_services.Executive_get_freeze_frame_tics(self, *args)

    def get_mode(self, *args):
        return _sim_services.Executive_get_mode(self, *args)

    def get_num_threads(self, *args):
        return _sim_services.Executive_get_num_threads(self, *args)

    def get_old_time_tic_value(self, *args):
        return _sim_services.Executive_get_old_time_tic_value(self, *args)

    def get_rt_nap(self, *args):
        return _sim_services.Executive_get_rt_nap(self, *args)

    def get_scheduled_start_index(self, *args):
        return _sim_services.Executive_get_scheduled_start_index(self, *args)

    def get_sim_objects(self, *args):
        return _sim_services.Executive_get_sim_objects(self, *args)

    def get_software_frame(self, *args):
        return _sim_services.Executive_get_software_frame(self, *args)

    def get_software_frame_tics(self, *args):
        return _sim_services.Executive_get_software_frame_tics(self, *args)

    def get_frame_count(self, *args):
        return _sim_services.Executive_get_frame_count(self, *args)

    def get_freeze_frame_count(self, *args):
        return _sim_services.Executive_get_freeze_frame_count(self, *args)

    def get_pthread_id(self, *args):
        return _sim_services.Executive_get_pthread_id(self, *args)

    def get_stack_trace(self, *args):
        return _sim_services.Executive_get_stack_trace(self, *args)

    def get_terminate_time(self, *args):
        return _sim_services.Executive_get_terminate_time(self, *args)

    def get_thread_amf_cycle_time(self, *args):
        return _sim_services.Executive_get_thread_amf_cycle_time(self, *args)

    def get_time_tic_value(self, *args):
        return _sim_services.Executive_get_time_tic_value(self, *args)

    def get_time_tics(self, *args):
        return _sim_services.Executive_get_time_tics(self, *args)

    def get_freeze_time_tics(self, *args):
        return _sim_services.Executive_get_freeze_time_tics(self, *args)

    def get_trap_sigbus(self, *args):
        return _sim_services.Executive_get_trap_sigbus(self, *args)

    def get_trap_sigfpe(self, *args):
        return _sim_services.Executive_get_trap_sigfpe(self, *args)

    def get_trap_sigsegv(self, *args):
        return _sim_services.Executive_get_trap_sigsegv(self, *args)

    def get_trap_sigabrt(self, *args):
        return _sim_services.Executive_get_trap_sigabrt(self, *args)

    def set_attach_debugger(self, *args):
        return _sim_services.Executive_set_attach_debugger(self, *args)

    def set_debugger_command(self, *args):
        return _sim_services.Executive_set_debugger_command(self, *args)

    def set_enable_freeze(self, *args):
        return _sim_services.Executive_set_enable_freeze(self, *args)

    def set_freeze_command(self, *args):
        return _sim_services.Executive_set_freeze_command(self, *args)

    def set_freeze_on_frame_boundary(self, *args):
        return _sim_services.Executive_set_freeze_on_frame_boundary(self, *args)

    def set_freeze_frame(self, *args):
        return _sim_services.Executive_set_freeze_frame(self, *args)

    def set_exec_command(self, *args):
        return _sim_services.Executive_set_exec_command(self, *args)

    def set_rt_nap(self, *args):
        return _sim_services.Executive_set_rt_nap(self, *args)

    def set_software_frame(self, *args):
        return _sim_services.Executive_set_software_frame(self, *args)

    def set_stack_trace(self, *args):
        return _sim_services.Executive_set_stack_trace(self, *args)

    def set_time(self, *args):
        return _sim_services.Executive_set_time(self, *args)

    def set_time_tics(self, *args):
        return _sim_services.Executive_set_time_tics(self, *args)

    def set_time_tic_value(self, *args):
        return _sim_services.Executive_set_time_tic_value(self, *args)

    def set_terminate_time(self, *args):
        return _sim_services.Executive_set_terminate_time(self, *args)

    def set_trap_sigbus(self, *args):
        return _sim_services.Executive_set_trap_sigbus(self, *args)

    def set_trap_sigfpe(self, *args):
        return _sim_services.Executive_set_trap_sigfpe(self, *args)

    def set_trap_sigsegv(self, *args):
        return _sim_services.Executive_set_trap_sigsegv(self, *args)

    def set_trap_sigabrt(self, *args):
        return _sim_services.Executive_set_trap_sigabrt(self, *args)

    def get_sim_time(self, *args):
        return _sim_services.Executive_get_sim_time(self, *args)

    def get_process_id(self, *args):
        return _sim_services.Executive_get_process_id(self, *args)

    def get_freeze_job(self, *args):
        return _sim_services.Executive_get_freeze_job(self, *args)

    def get_job(self, *args):
        return _sim_services.Executive_get_job(self, *args)

    def get_curr_job(self, *args):
        return _sim_services.Executive_get_curr_job(self, *args)

    def get_job_cycle(self, *args):
        return _sim_services.Executive_get_job_cycle(self, *args)

    def set_job_onoff(self, *args):
        return _sim_services.Executive_set_job_onoff(self, *args)

    def set_job_cycle(self, *args):
        return _sim_services.Executive_set_job_cycle(self, *args)

    def set_sim_object_onoff(self, *args):
        return _sim_services.Executive_set_sim_object_onoff(self, *args)

    def set_version_date_tag(self, *args):
        return _sim_services.Executive_set_version_date_tag(self, *args)

    def set_build_date(self, *args):
        return _sim_services.Executive_set_build_date(self, *args)

    def set_current_version(self, *args):
        return _sim_services.Executive_set_current_version(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.Executive_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.Executive_init(self, *args)

    def call_default_data(self, *args):
        return _sim_services.Executive_call_default_data(self, *args)

    def call_input_processor(self, *args):
        return _sim_services.Executive_call_input_processor(self, *args)

    def call_initialization(self, *args):
        return _sim_services.Executive_call_initialization(self, *args)

    def checkpoint(self, *args):
        return _sim_services.Executive_checkpoint(self, *args)

    def post_checkpoint(self, *args):
        return _sim_services.Executive_post_checkpoint(self, *args)

    def restart(self, *args):
        return _sim_services.Executive_restart(self, *args)

    def clear_scheduled_queues(self, *args):
        return _sim_services.Executive_clear_scheduled_queues(self, *args)

    def write_s_run_summary(self, *args):
        return _sim_services.Executive_write_s_run_summary(self, *args)

    def create_threads(self, *args):
        return _sim_services.Executive_create_threads(self, *args)

    def loop(self, *args):
        return _sim_services.Executive_loop(self, *args)

    def loop_multi_thread(self, *args):
        return _sim_services.Executive_loop_multi_thread(self, *args)

    def loop_single_thread(self, *args):
        return _sim_services.Executive_loop_single_thread(self, *args)

    def async_freeze_to_exec_command(self, *args):
        return _sim_services.Executive_async_freeze_to_exec_command(self, *args)

    def sched_freeze_to_exec_command(self, *args):
        return _sim_services.Executive_sched_freeze_to_exec_command(self, *args)

    def advance_sim_time(self, *args):
        return _sim_services.Executive_advance_sim_time(self, *args)

    def thread_sync(self, *args):
        return _sim_services.Executive_thread_sync(self, *args)

    def scheduled_thread_sync(self, *args):
        return _sim_services.Executive_scheduled_thread_sync(self, *args)

    def init_freeze_scheduled(self, *args):
        return _sim_services.Executive_init_freeze_scheduled(self, *args)

    def freeze_loop(self, *args):
        return _sim_services.Executive_freeze_loop(self, *args)

    def shutdown(self, *args):
        return _sim_services.Executive_shutdown(self, *args)

    def add_scheduled_job_class(self, *args):
        return _sim_services.Executive_add_scheduled_job_class(self, *args)

    def add_sim_object(self, *args):
        return _sim_services.Executive_add_sim_object(self, *args)

    def add_jobs_to_queue(self, *args):
        return _sim_services.Executive_add_jobs_to_queue(self, *args)

    def add_job_to_queue(self, *args):
        return _sim_services.Executive_add_job_to_queue(self, *args)

    def delete_sim_object(self, *args):
        return _sim_services.Executive_delete_sim_object(self, *args)

    def remove_jobs(self, *args):
        return _sim_services.Executive_remove_jobs(self, *args)

    def add_depends_on_job(self, *args):
        return _sim_services.Executive_add_depends_on_job(self, *args)

    def check_all_jobs_handled(self, *args):
        return _sim_services.Executive_check_all_jobs_handled(self, *args)

    def check_all_job_cycle_times(self, *args):
        return _sim_services.Executive_check_all_job_cycle_times(self, *args)

    def init_signal_handlers(self, *args):
        return _sim_services.Executive_init_signal_handlers(self, *args)

    def signal_handler(self, *args):
        return _sim_services.Executive_signal_handler(self, *args)

    def ctrl_c_handler(self, *args):
        return _sim_services.Executive_ctrl_c_handler(self, *args)

    def term_handler(self, *args):
        return _sim_services.Executive_term_handler(self, *args)

    def usr1_handler(self, *args):
        return _sim_services.Executive_usr1_handler(self, *args)

    def fpe_handler(self, *args):
        return _sim_services.Executive_fpe_handler(self, *args)

    def get_thread(self, *args):
        return _sim_services.Executive_get_thread(self, *args)

    def set_thread_enabled(self, *args):
        return _sim_services.Executive_set_thread_enabled(self, *args)

    def set_thread_process_type(self, *args):
        return _sim_services.Executive_set_thread_process_type(self, *args)

    def set_thread_amf_cycle_time(self, *args):
        return _sim_services.Executive_set_thread_amf_cycle_time(self, *args)

    def set_thread_async_wait(self, *args):
        return _sim_services.Executive_set_thread_async_wait(self, *args)

    def set_thread_rt_semaphores(self, *args):
        return _sim_services.Executive_set_thread_rt_semaphores(self, *args)

    def set_thread_priority(self, *args):
        return _sim_services.Executive_set_thread_priority(self, *args)

    def set_thread_cpu_affinity(self, *args):
        return _sim_services.Executive_set_thread_cpu_affinity(self, *args)

    def run(self, *args):
        return _sim_services.Executive_run(self, *args)

    def freeze(self, *args):
        return _sim_services.Executive_freeze(self, *args)

    def stop(self, *args):
        return _sim_services.Executive_stop(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.Executive_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.Executive_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.Executive_instrument_job_remove(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.Executive_write_s_job_execution(self, *args)

    def register_scheduler(self, *args):
        return _sim_services.Executive_register_scheduler(self, *args)

    def exec_terminate(self, *args):
        return _sim_services.Executive_exec_terminate(self, *args)
Executive_swigregister = _sim_services.Executive_swigregister
Executive_swigregister(Executive)


def exec_get_attach_debugger(*args):
    return _sim_services.exec_get_attach_debugger(*args)
exec_get_attach_debugger = _sim_services.exec_get_attach_debugger

def exec_get_current_version(*args):
    return _sim_services.exec_get_current_version(*args)
exec_get_current_version = _sim_services.exec_get_current_version

def exec_get_debugger_command(*args):
    return _sim_services.exec_get_debugger_command(*args)
exec_get_debugger_command = _sim_services.exec_get_debugger_command

def exec_get_enable_freeze(*args):
    return _sim_services.exec_get_enable_freeze(*args)
exec_get_enable_freeze = _sim_services.exec_get_enable_freeze

def exec_get_exec_command(*args):
    return _sim_services.exec_get_exec_command(*args)
exec_get_exec_command = _sim_services.exec_get_exec_command

def exec_get_frame_count(*args):
    return _sim_services.exec_get_frame_count(*args)
exec_get_frame_count = _sim_services.exec_get_frame_count

def exec_get_freeze_frame(*args):
    return _sim_services.exec_get_freeze_frame(*args)
exec_get_freeze_frame = _sim_services.exec_get_freeze_frame

def exec_get_freeze_frame_count(*args):
    return _sim_services.exec_get_freeze_frame_count(*args)
exec_get_freeze_frame_count = _sim_services.exec_get_freeze_frame_count

def exec_get_freeze_command(*args):
    return _sim_services.exec_get_freeze_command(*args)
exec_get_freeze_command = _sim_services.exec_get_freeze_command

def exec_get_freeze_on_frame_boundary(*args):
    return _sim_services.exec_get_freeze_on_frame_boundary(*args)
exec_get_freeze_on_frame_boundary = _sim_services.exec_get_freeze_on_frame_boundary

def exec_get_freeze_frame_tics(*args):
    return _sim_services.exec_get_freeze_frame_tics(*args)
exec_get_freeze_frame_tics = _sim_services.exec_get_freeze_frame_tics

def exec_get_freeze_time_tics(*args):
    return _sim_services.exec_get_freeze_time_tics(*args)
exec_get_freeze_time_tics = _sim_services.exec_get_freeze_time_tics

def exec_get_job_cycle(*args):
    return _sim_services.exec_get_job_cycle(*args)
exec_get_job_cycle = _sim_services.exec_get_job_cycle

def exec_get_mode(*args):
    return _sim_services.exec_get_mode(*args)
exec_get_mode = _sim_services.exec_get_mode

def exec_get_num_threads(*args):
    return _sim_services.exec_get_num_threads(*args)
exec_get_num_threads = _sim_services.exec_get_num_threads

def exec_get_old_time_tic_value(*args):
    return _sim_services.exec_get_old_time_tic_value(*args)
exec_get_old_time_tic_value = _sim_services.exec_get_old_time_tic_value

def exec_get_process_id(*args):
    return _sim_services.exec_get_process_id(*args)
exec_get_process_id = _sim_services.exec_get_process_id

def exec_get_rt_nap(*args):
    return _sim_services.exec_get_rt_nap(*args)
exec_get_rt_nap = _sim_services.exec_get_rt_nap

def exec_get_scheduled_start_index(*args):
    return _sim_services.exec_get_scheduled_start_index(*args)
exec_get_scheduled_start_index = _sim_services.exec_get_scheduled_start_index

def exec_get_sim_time(*args):
    return _sim_services.exec_get_sim_time(*args)
exec_get_sim_time = _sim_services.exec_get_sim_time

def exec_get_software_frame(*args):
    return _sim_services.exec_get_software_frame(*args)
exec_get_software_frame = _sim_services.exec_get_software_frame

def exec_get_software_frame_tics(*args):
    return _sim_services.exec_get_software_frame_tics(*args)
exec_get_software_frame_tics = _sim_services.exec_get_software_frame_tics

def exec_get_stack_trace(*args):
    return _sim_services.exec_get_stack_trace(*args)
exec_get_stack_trace = _sim_services.exec_get_stack_trace

def exec_get_terminate_time(*args):
    return _sim_services.exec_get_terminate_time(*args)
exec_get_terminate_time = _sim_services.exec_get_terminate_time

def exec_get_thread_amf_cycle_time(*args):
    return _sim_services.exec_get_thread_amf_cycle_time(*args)
exec_get_thread_amf_cycle_time = _sim_services.exec_get_thread_amf_cycle_time

def exec_get_time_tic_value(*args):
    return _sim_services.exec_get_time_tic_value(*args)
exec_get_time_tic_value = _sim_services.exec_get_time_tic_value

def exec_get_time_tics(*args):
    return _sim_services.exec_get_time_tics(*args)
exec_get_time_tics = _sim_services.exec_get_time_tics

def exec_get_trap_sigbus(*args):
    return _sim_services.exec_get_trap_sigbus(*args)
exec_get_trap_sigbus = _sim_services.exec_get_trap_sigbus

def exec_get_trap_sigfpe(*args):
    return _sim_services.exec_get_trap_sigfpe(*args)
exec_get_trap_sigfpe = _sim_services.exec_get_trap_sigfpe

def exec_get_trap_sigsegv(*args):
    return _sim_services.exec_get_trap_sigsegv(*args)
exec_get_trap_sigsegv = _sim_services.exec_get_trap_sigsegv

def exec_get_trap_sigabrt(*args):
    return _sim_services.exec_get_trap_sigabrt(*args)
exec_get_trap_sigabrt = _sim_services.exec_get_trap_sigabrt

def exec_set_attach_debugger(*args):
    return _sim_services.exec_set_attach_debugger(*args)
exec_set_attach_debugger = _sim_services.exec_set_attach_debugger

def exec_set_debugger_command(*args):
    return _sim_services.exec_set_debugger_command(*args)
exec_set_debugger_command = _sim_services.exec_set_debugger_command

def exec_set_exec_command(*args):
    return _sim_services.exec_set_exec_command(*args)
exec_set_exec_command = _sim_services.exec_set_exec_command

def exec_set_freeze_command(*args):
    return _sim_services.exec_set_freeze_command(*args)
exec_set_freeze_command = _sim_services.exec_set_freeze_command

def exec_set_freeze_on_frame_boundary(*args):
    return _sim_services.exec_set_freeze_on_frame_boundary(*args)
exec_set_freeze_on_frame_boundary = _sim_services.exec_set_freeze_on_frame_boundary

def exec_set_freeze_frame(*args):
    return _sim_services.exec_set_freeze_frame(*args)
exec_set_freeze_frame = _sim_services.exec_set_freeze_frame

def exec_set_enable_freeze(*args):
    return _sim_services.exec_set_enable_freeze(*args)
exec_set_enable_freeze = _sim_services.exec_set_enable_freeze

def exec_set_job_cycle(*args):
    return _sim_services.exec_set_job_cycle(*args)
exec_set_job_cycle = _sim_services.exec_set_job_cycle

def exec_set_job_onoff(*args):
    return _sim_services.exec_set_job_onoff(*args)
exec_set_job_onoff = _sim_services.exec_set_job_onoff

def exec_set_rt_nap(*args):
    return _sim_services.exec_set_rt_nap(*args)
exec_set_rt_nap = _sim_services.exec_set_rt_nap

def exec_set_sim_object_onoff(*args):
    return _sim_services.exec_set_sim_object_onoff(*args)
exec_set_sim_object_onoff = _sim_services.exec_set_sim_object_onoff

def exec_set_software_frame(*args):
    return _sim_services.exec_set_software_frame(*args)
exec_set_software_frame = _sim_services.exec_set_software_frame

def exec_set_stack_trace(*args):
    return _sim_services.exec_set_stack_trace(*args)
exec_set_stack_trace = _sim_services.exec_set_stack_trace

def exec_set_terminate_time(*args):
    return _sim_services.exec_set_terminate_time(*args)
exec_set_terminate_time = _sim_services.exec_set_terminate_time

def exec_set_thread_enabled(*args):
    return _sim_services.exec_set_thread_enabled(*args)
exec_set_thread_enabled = _sim_services.exec_set_thread_enabled

def exec_set_thread_amf_cycle_time(*args):
    return _sim_services.exec_set_thread_amf_cycle_time(*args)
exec_set_thread_amf_cycle_time = _sim_services.exec_set_thread_amf_cycle_time

def exec_set_thread_async_cycle_time(*args):
    return _sim_services.exec_set_thread_async_cycle_time(*args)
exec_set_thread_async_cycle_time = _sim_services.exec_set_thread_async_cycle_time

def exec_set_thread_async_wait(*args):
    return _sim_services.exec_set_thread_async_wait(*args)
exec_set_thread_async_wait = _sim_services.exec_set_thread_async_wait

def exec_set_thread_rt_semaphores(*args):
    return _sim_services.exec_set_thread_rt_semaphores(*args)
exec_set_thread_rt_semaphores = _sim_services.exec_set_thread_rt_semaphores

def exec_set_thread_cpu_affinity(*args):
    return _sim_services.exec_set_thread_cpu_affinity(*args)
exec_set_thread_cpu_affinity = _sim_services.exec_set_thread_cpu_affinity

def exec_set_thread_priority(*args):
    return _sim_services.exec_set_thread_priority(*args)
exec_set_thread_priority = _sim_services.exec_set_thread_priority

def exec_set_thread_process_type(*args):
    return _sim_services.exec_set_thread_process_type(*args)
exec_set_thread_process_type = _sim_services.exec_set_thread_process_type

def exec_set_time(*args):
    return _sim_services.exec_set_time(*args)
exec_set_time = _sim_services.exec_set_time

def exec_set_time_tics(*args):
    return _sim_services.exec_set_time_tics(*args)
exec_set_time_tics = _sim_services.exec_set_time_tics

def exec_set_time_tic_value(*args):
    return _sim_services.exec_set_time_tic_value(*args)
exec_set_time_tic_value = _sim_services.exec_set_time_tic_value

def exec_set_trap_sigbus(*args):
    return _sim_services.exec_set_trap_sigbus(*args)
exec_set_trap_sigbus = _sim_services.exec_set_trap_sigbus

def exec_set_trap_sigfpe(*args):
    return _sim_services.exec_set_trap_sigfpe(*args)
exec_set_trap_sigfpe = _sim_services.exec_set_trap_sigfpe

def exec_set_trap_sigsegv(*args):
    return _sim_services.exec_set_trap_sigsegv(*args)
exec_set_trap_sigsegv = _sim_services.exec_set_trap_sigsegv

def exec_set_trap_sigabrt(*args):
    return _sim_services.exec_set_trap_sigabrt(*args)
exec_set_trap_sigabrt = _sim_services.exec_set_trap_sigabrt

def exec_set_version_date_tag(*args):
    return _sim_services.exec_set_version_date_tag(*args)
exec_set_version_date_tag = _sim_services.exec_set_version_date_tag

def exec_set_build_date(*args):
    return _sim_services.exec_set_build_date(*args)
exec_set_build_date = _sim_services.exec_set_build_date

def exec_set_current_version(*args):
    return _sim_services.exec_set_current_version(*args)
exec_set_current_version = _sim_services.exec_set_current_version

def exec_freeze(*args):
    return _sim_services.exec_freeze(*args)
exec_freeze = _sim_services.exec_freeze

def exec_run(*args):
    return _sim_services.exec_run(*args)
exec_run = _sim_services.exec_run

def exec_signal_terminate(*args):
    return _sim_services.exec_signal_terminate(*args)
exec_signal_terminate = _sim_services.exec_signal_terminate

def exec_terminate(*args):
    return _sim_services.exec_terminate(*args)
exec_terminate = _sim_services.exec_terminate

def exec_terminate_with_return(*args):
    return _sim_services.exec_terminate_with_return(*args)
exec_terminate_with_return = _sim_services.exec_terminate_with_return

def exec_instrument_before(*args):
    return _sim_services.exec_instrument_before(*args)
exec_instrument_before = _sim_services.exec_instrument_before

def exec_instrument_after(*args):
    return _sim_services.exec_instrument_after(*args)
exec_instrument_after = _sim_services.exec_instrument_after

def exec_instrument_remove(*args):
    return _sim_services.exec_instrument_remove(*args)
exec_instrument_remove = _sim_services.exec_instrument_remove

def exec_add_scheduled_job_class(*args):
    return _sim_services.exec_add_scheduled_job_class(*args)
exec_add_scheduled_job_class = _sim_services.exec_add_scheduled_job_class

def exec_add_depends_on_job(*args):
    return _sim_services.exec_add_depends_on_job(*args)
exec_add_depends_on_job = _sim_services.exec_add_depends_on_job

def exec_get_exec_cpp(*args):
    return _sim_services.exec_get_exec_cpp(*args)
exec_get_exec_cpp = _sim_services.exec_get_exec_cpp

def exec_add_sim_object(*args):
    return _sim_services.exec_add_sim_object(*args)
exec_add_sim_object = _sim_services.exec_add_sim_object

def exec_remove_sim_object(*args):
    return _sim_services.exec_remove_sim_object(*args)
exec_remove_sim_object = _sim_services.exec_remove_sim_object

def exec_get_sim_objects(*args):
    return _sim_services.exec_get_sim_objects(*args)
exec_get_sim_objects = _sim_services.exec_get_sim_objects

def exec_get_job(*args):
    return _sim_services.exec_get_job(*args)
exec_get_job = _sim_services.exec_get_job

def exec_get_curr_job(*args):
    return _sim_services.exec_get_curr_job(*args)
exec_get_curr_job = _sim_services.exec_get_curr_job

def exec_get_thread(*args):
    return _sim_services.exec_get_thread(*args)
exec_get_thread = _sim_services.exec_get_thread

def exec_get_all_jobs_vector(*args):
    return _sim_services.exec_get_all_jobs_vector(*args)
exec_get_all_jobs_vector = _sim_services.exec_get_all_jobs_vector

def exec_register_scheduler(*args):
    return _sim_services.exec_register_scheduler(*args)
exec_register_scheduler = _sim_services.exec_register_scheduler
class ExternalApplication(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalApplication, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalApplication, name)
    __repr__ = _swig_repr
    CLOSE = _sim_services.ExternalApplication_CLOSE
    NOTIFY = _sim_services.ExternalApplication_NOTIFY
    NOTHING = _sim_services.ExternalApplication_NOTHING

    def __init__(self, *args):
        this = _sim_services.new_ExternalApplication(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ExternalApplication
    __del__ = lambda self: None

    def set_startup_command(self, *args):
        return _sim_services.ExternalApplication_set_startup_command(self, *args)

    def get_startup_command(self, *args):
        return _sim_services.ExternalApplication_get_startup_command(self, *args)

    def add_arguments(self, *args):
        return _sim_services.ExternalApplication_add_arguments(self, *args)

    def set_arguments(self, *args):
        return _sim_services.ExternalApplication_set_arguments(self, *args)

    def get_arguments(self, *args):
        return _sim_services.ExternalApplication_get_arguments(self, *args)

    def set_host(self, *args):
        return _sim_services.ExternalApplication_set_host(self, *args)

    def get_host(self, *args):
        return _sim_services.ExternalApplication_get_host(self, *args)

    def set_port(self, *args):
        return _sim_services.ExternalApplication_set_port(self, *args)

    def get_port(self, *args):
        return _sim_services.ExternalApplication_get_port(self, *args)

    def set_auto_reconnect(self, *args):
        return _sim_services.ExternalApplication_set_auto_reconnect(self, *args)

    def get_auto_reconnect(self, *args):
        return _sim_services.ExternalApplication_get_auto_reconnect(self, *args)

    def set_cycle_period(self, *args):
        return _sim_services.ExternalApplication_set_cycle_period(self, *args)

    def get_cycle_period(self, *args):
        return _sim_services.ExternalApplication_get_cycle_period(self, *args)

    def set_minimum_cycle_period(self, *args):
        return _sim_services.ExternalApplication_set_minimum_cycle_period(self, *args)

    def get_minimum_cycle_period(self, *args):
        return _sim_services.ExternalApplication_get_minimum_cycle_period(self, *args)

    def set_disconnect_behavior(self, *args):
        return _sim_services.ExternalApplication_set_disconnect_behavior(self, *args)

    def get_disconnect_behavior(self, *args):
        return _sim_services.ExternalApplication_get_disconnect_behavior(self, *args)

    def set_height(self, *args):
        return _sim_services.ExternalApplication_set_height(self, *args)

    def get_height(self, *args):
        return _sim_services.ExternalApplication_get_height(self, *args)

    def set_width(self, *args):
        return _sim_services.ExternalApplication_set_width(self, *args)

    def get_width(self, *args):
        return _sim_services.ExternalApplication_get_width(self, *args)

    def set_x(self, *args):
        return _sim_services.ExternalApplication_set_x(self, *args)

    def get_x(self, *args):
        return _sim_services.ExternalApplication_get_x(self, *args)

    def set_y(self, *args):
        return _sim_services.ExternalApplication_set_y(self, *args)

    def get_y(self, *args):
        return _sim_services.ExternalApplication_get_y(self, *args)

    def launch(self, *args):
        return _sim_services.ExternalApplication_launch(self, *args)
ExternalApplication_swigregister = _sim_services.ExternalApplication_swigregister
ExternalApplication_swigregister(ExternalApplication)

class MalfunctionsTrickView(ExternalApplication):
    __swig_setmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MalfunctionsTrickView, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MalfunctionsTrickView, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MalfunctionsTrickView(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MalfunctionsTrickView
    __del__ = lambda self: None
MalfunctionsTrickView_swigregister = _sim_services.MalfunctionsTrickView_swigregister
MalfunctionsTrickView_swigregister(MalfunctionsTrickView)

class MonteMonitor(ExternalApplication):
    __swig_setmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteMonitor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteMonitor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MonteMonitor
    __del__ = lambda self: None
MonteMonitor_swigregister = _sim_services.MonteMonitor_swigregister
MonteMonitor_swigregister(MonteMonitor)

class SimControlPanel(ExternalApplication):
    __swig_setmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimControlPanel, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimControlPanel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_SimControlPanel(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["auto_exit"] = _sim_services.SimControlPanel_auto_exit_set
    __swig_getmethods__["auto_exit"] = _sim_services.SimControlPanel_auto_exit_get
    if _newclass:
        auto_exit = _swig_property(_sim_services.SimControlPanel_auto_exit_get, _sim_services.SimControlPanel_auto_exit_set)
    __swig_destroy__ = _sim_services.delete_SimControlPanel
    __del__ = lambda self: None
SimControlPanel_swigregister = _sim_services.SimControlPanel_swigregister
SimControlPanel_swigregister(SimControlPanel)

class StripChart(ExternalApplication):
    __swig_setmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StripChart, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StripChart, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_StripChart(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_arguments(self, *args):
        return _sim_services.StripChart_set_arguments(self, *args)

    def set_input_file(self, *args):
        return _sim_services.StripChart_set_input_file(self, *args)

    def get_input_file(self, *args):
        return _sim_services.StripChart_get_input_file(self, *args)
    __swig_destroy__ = _sim_services.delete_StripChart
    __del__ = lambda self: None
StripChart_swigregister = _sim_services.StripChart_swigregister
StripChart_swigregister(StripChart)

class TrickView(ExternalApplication):
    __swig_setmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrickView, name, value)
    __swig_getmethods__ = {}
    for _s in [ExternalApplication]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrickView, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_TrickView(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_arguments(self, *args):
        return _sim_services.TrickView_set_arguments(self, *args)

    def set_strip_charts_only(self, *args):
        return _sim_services.TrickView_set_strip_charts_only(self, *args)

    def get_strip_charts_only(self, *args):
        return _sim_services.TrickView_get_strip_charts_only(self, *args)

    def set_auto_open_file(self, *args):
        return _sim_services.TrickView_set_auto_open_file(self, *args)

    def get_auto_open_file(self, *args):
        return _sim_services.TrickView_get_auto_open_file(self, *args)

    def set_auto_open_and_set_file(self, *args):
        return _sim_services.TrickView_set_auto_open_and_set_file(self, *args)

    def get_auto_open_and_set_file(self, *args):
        return _sim_services.TrickView_get_auto_open_and_set_file(self, *args)

    def set_auto_set_file(self, *args):
        return _sim_services.TrickView_set_auto_set_file(self, *args)

    def get_auto_set_file(self, *args):
        return _sim_services.TrickView_get_auto_set_file(self, *args)
    __swig_destroy__ = _sim_services.delete_TrickView
    __del__ = lambda self: None
TrickView_swigregister = _sim_services.TrickView_swigregister
TrickView_swigregister(TrickView)


def get_external_applications(*args):
    return _sim_services.get_external_applications(*args)
get_external_applications = _sim_services.get_external_applications

def add_external_application(*args):
    return _sim_services.add_external_application(*args)
add_external_application = _sim_services.add_external_application

def remove_external_application(*args):
    return _sim_services.remove_external_application(*args)
remove_external_application = _sim_services.remove_external_application

def remove_all_external_applications(*args):
    return _sim_services.remove_all_external_applications(*args)
remove_all_external_applications = _sim_services.remove_all_external_applications

def launch_all_external_applications(*args):
    return _sim_services.launch_all_external_applications(*args)
launch_all_external_applications = _sim_services.launch_all_external_applications

def sim_control_panel_set_enabled(*args):
    return _sim_services.sim_control_panel_set_enabled(*args)
sim_control_panel_set_enabled = _sim_services.sim_control_panel_set_enabled

def sim_control_panel_get_enabled(*args):
    return _sim_services.sim_control_panel_get_enabled(*args)
sim_control_panel_get_enabled = _sim_services.sim_control_panel_get_enabled

def sim_control_panel_auto_exit_set_enabled(*args):
    return _sim_services.sim_control_panel_auto_exit_set_enabled(*args)
sim_control_panel_auto_exit_set_enabled = _sim_services.sim_control_panel_auto_exit_set_enabled

def trick_view_set_enabled(*args):
    return _sim_services.trick_view_set_enabled(*args)
trick_view_set_enabled = _sim_services.trick_view_set_enabled

def trick_view_get_enabled(*args):
    return _sim_services.trick_view_get_enabled(*args)
trick_view_get_enabled = _sim_services.trick_view_get_enabled

def malfunctions_trick_view_set_enabled(*args):
    return _sim_services.malfunctions_trick_view_set_enabled(*args)
malfunctions_trick_view_set_enabled = _sim_services.malfunctions_trick_view_set_enabled

def malfunctions_trick_view_get_enabled(*args):
    return _sim_services.malfunctions_trick_view_get_enabled(*args)
malfunctions_trick_view_get_enabled = _sim_services.malfunctions_trick_view_get_enabled

def monte_monitor_set_enabled(*args):
    return _sim_services.monte_monitor_set_enabled(*args)
monte_monitor_set_enabled = _sim_services.monte_monitor_set_enabled

def monte_monitor_get_enabled(*args):
    return _sim_services.monte_monitor_get_enabled(*args)
monte_monitor_get_enabled = _sim_services.monte_monitor_get_enabled

def stripchart_set_enabled(*args):
    return _sim_services.stripchart_set_enabled(*args)
stripchart_set_enabled = _sim_services.stripchart_set_enabled

def stripchart_get_enabled(*args):
    return _sim_services.stripchart_get_enabled(*args)
stripchart_get_enabled = _sim_services.stripchart_get_enabled

def sim_control_panel_set_startup_command(*args):
    return _sim_services.sim_control_panel_set_startup_command(*args)
sim_control_panel_set_startup_command = _sim_services.sim_control_panel_set_startup_command

def sim_control_panel_get_startup_command(*args):
    return _sim_services.sim_control_panel_get_startup_command(*args)
sim_control_panel_get_startup_command = _sim_services.sim_control_panel_get_startup_command

def trick_view_set_startup_command(*args):
    return _sim_services.trick_view_set_startup_command(*args)
trick_view_set_startup_command = _sim_services.trick_view_set_startup_command

def trick_view_get_startup_command(*args):
    return _sim_services.trick_view_get_startup_command(*args)
trick_view_get_startup_command = _sim_services.trick_view_get_startup_command

def malfunctions_trick_view_set_startup_command(*args):
    return _sim_services.malfunctions_trick_view_set_startup_command(*args)
malfunctions_trick_view_set_startup_command = _sim_services.malfunctions_trick_view_set_startup_command

def malfunctions_trick_view_get_startup_command(*args):
    return _sim_services.malfunctions_trick_view_get_startup_command(*args)
malfunctions_trick_view_get_startup_command = _sim_services.malfunctions_trick_view_get_startup_command

def monte_monitor_set_startup_command(*args):
    return _sim_services.monte_monitor_set_startup_command(*args)
monte_monitor_set_startup_command = _sim_services.monte_monitor_set_startup_command

def monte_monitor_get_startup_command(*args):
    return _sim_services.monte_monitor_get_startup_command(*args)
monte_monitor_get_startup_command = _sim_services.monte_monitor_get_startup_command

def stripchart_set_startup_command(*args):
    return _sim_services.stripchart_set_startup_command(*args)
stripchart_set_startup_command = _sim_services.stripchart_set_startup_command

def stripchart_get_startup_command(*args):
    return _sim_services.stripchart_get_startup_command(*args)
stripchart_get_startup_command = _sim_services.stripchart_get_startup_command

def sim_control_panel_launch(*args):
    return _sim_services.sim_control_panel_launch(*args)
sim_control_panel_launch = _sim_services.sim_control_panel_launch

def trick_view_launch(*args):
    return _sim_services.trick_view_launch(*args)
trick_view_launch = _sim_services.trick_view_launch

def malfunctions_trick_view_launch(*args):
    return _sim_services.malfunctions_trick_view_launch(*args)
malfunctions_trick_view_launch = _sim_services.malfunctions_trick_view_launch

def monte_monitor_launch(*args):
    return _sim_services.monte_monitor_launch(*args)
monte_monitor_launch = _sim_services.monte_monitor_launch

def stripchart_launch(*args):
    return _sim_services.stripchart_launch(*args)
stripchart_launch = _sim_services.stripchart_launch

def trick_view_set_cycle_period(*args):
    return _sim_services.trick_view_set_cycle_period(*args)
trick_view_set_cycle_period = _sim_services.trick_view_set_cycle_period

def trick_view_add_auto_load_file(*args):
    return _sim_services.trick_view_add_auto_load_file(*args)
trick_view_add_auto_load_file = _sim_services.trick_view_add_auto_load_file
class VAR_DECLARE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VAR_DECLARE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VAR_DECLARE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_pointers"] = _sim_services.VAR_DECLARE_num_pointers_set
    __swig_getmethods__["num_pointers"] = _sim_services.VAR_DECLARE_num_pointers_get
    if _newclass:
        num_pointers = _swig_property(_sim_services.VAR_DECLARE_num_pointers_get, _sim_services.VAR_DECLARE_num_pointers_set)
    __swig_setmethods__["name"] = _sim_services.VAR_DECLARE_name_set
    __swig_getmethods__["name"] = _sim_services.VAR_DECLARE_name_get
    if _newclass:
        name = _swig_property(_sim_services.VAR_DECLARE_name_get, _sim_services.VAR_DECLARE_name_set)
    __swig_setmethods__["dim_list"] = _sim_services.VAR_DECLARE_dim_list_set
    __swig_getmethods__["dim_list"] = _sim_services.VAR_DECLARE_dim_list_get
    if _newclass:
        dim_list = _swig_property(_sim_services.VAR_DECLARE_dim_list_get, _sim_services.VAR_DECLARE_dim_list_set)
    __swig_setmethods__["value"] = _sim_services.VAR_DECLARE_value_set
    __swig_getmethods__["value"] = _sim_services.VAR_DECLARE_value_get
    if _newclass:
        value = _swig_property(_sim_services.VAR_DECLARE_value_get, _sim_services.VAR_DECLARE_value_set)

    def __init__(self):
        this = _sim_services.new_VAR_DECLARE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VAR_DECLARE
    __del__ = lambda self: None
VAR_DECLARE_swigregister = _sim_services.VAR_DECLARE_swigregister
VAR_DECLARE_swigregister(VAR_DECLARE)

class VAR_LIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VAR_LIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VAR_LIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_vars"] = _sim_services.VAR_LIST_num_vars_set
    __swig_getmethods__["num_vars"] = _sim_services.VAR_LIST_num_vars_get
    if _newclass:
        num_vars = _swig_property(_sim_services.VAR_LIST_num_vars_get, _sim_services.VAR_LIST_num_vars_set)
    __swig_setmethods__["var_declare"] = _sim_services.VAR_LIST_var_declare_set
    __swig_getmethods__["var_declare"] = _sim_services.VAR_LIST_var_declare_get
    if _newclass:
        var_declare = _swig_property(_sim_services.VAR_LIST_var_declare_get, _sim_services.VAR_LIST_var_declare_set)

    def __init__(self):
        this = _sim_services.new_VAR_LIST()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VAR_LIST
    __del__ = lambda self: None
VAR_LIST_swigregister = _sim_services.VAR_LIST_swigregister
VAR_LIST_swigregister(VAR_LIST)


_sim_services.TRICK_LOCAL_swigconstant(_sim_services)
TRICK_LOCAL = _sim_services.TRICK_LOCAL

_sim_services.TRICK_EXTERN_swigconstant(_sim_services)
TRICK_EXTERN = _sim_services.TRICK_EXTERN

_sim_services.TRICK_ALLOC_MALLOC_swigconstant(_sim_services)
TRICK_ALLOC_MALLOC = _sim_services.TRICK_ALLOC_MALLOC

_sim_services.TRICK_ALLOC_NEW_swigconstant(_sim_services)
TRICK_ALLOC_NEW = _sim_services.TRICK_ALLOC_NEW

_sim_services.TRICK_ALLOC_OTHER_swigconstant(_sim_services)
TRICK_ALLOC_OTHER = _sim_services.TRICK_ALLOC_OTHER
class ALLOC_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ALLOC_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ALLOC_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _sim_services.ALLOC_INFO_start_set
    __swig_getmethods__["start"] = _sim_services.ALLOC_INFO_start_get
    if _newclass:
        start = _swig_property(_sim_services.ALLOC_INFO_start_get, _sim_services.ALLOC_INFO_start_set)
    __swig_setmethods__["end"] = _sim_services.ALLOC_INFO_end_set
    __swig_getmethods__["end"] = _sim_services.ALLOC_INFO_end_get
    if _newclass:
        end = _swig_property(_sim_services.ALLOC_INFO_end_get, _sim_services.ALLOC_INFO_end_set)
    __swig_setmethods__["name"] = _sim_services.ALLOC_INFO_name_set
    __swig_getmethods__["name"] = _sim_services.ALLOC_INFO_name_get
    if _newclass:
        name = _swig_property(_sim_services.ALLOC_INFO_name_get, _sim_services.ALLOC_INFO_name_set)
    __swig_setmethods__["size"] = _sim_services.ALLOC_INFO_size_set
    __swig_getmethods__["size"] = _sim_services.ALLOC_INFO_size_get
    if _newclass:
        size = _swig_property(_sim_services.ALLOC_INFO_size_get, _sim_services.ALLOC_INFO_size_set)
    __swig_setmethods__["sentinel_bytes"] = _sim_services.ALLOC_INFO_sentinel_bytes_set
    __swig_getmethods__["sentinel_bytes"] = _sim_services.ALLOC_INFO_sentinel_bytes_get
    if _newclass:
        sentinel_bytes = _swig_property(_sim_services.ALLOC_INFO_sentinel_bytes_get, _sim_services.ALLOC_INFO_sentinel_bytes_set)
    __swig_setmethods__["language"] = _sim_services.ALLOC_INFO_language_set
    __swig_getmethods__["language"] = _sim_services.ALLOC_INFO_language_get
    if _newclass:
        language = _swig_property(_sim_services.ALLOC_INFO_language_get, _sim_services.ALLOC_INFO_language_set)
    __swig_setmethods__["type"] = _sim_services.ALLOC_INFO_type_set
    __swig_getmethods__["type"] = _sim_services.ALLOC_INFO_type_get
    if _newclass:
        type = _swig_property(_sim_services.ALLOC_INFO_type_get, _sim_services.ALLOC_INFO_type_set)
    __swig_setmethods__["stcl"] = _sim_services.ALLOC_INFO_stcl_set
    __swig_getmethods__["stcl"] = _sim_services.ALLOC_INFO_stcl_get
    if _newclass:
        stcl = _swig_property(_sim_services.ALLOC_INFO_stcl_get, _sim_services.ALLOC_INFO_stcl_set)
    __swig_setmethods__["alloc_type"] = _sim_services.ALLOC_INFO_alloc_type_set
    __swig_getmethods__["alloc_type"] = _sim_services.ALLOC_INFO_alloc_type_get
    if _newclass:
        alloc_type = _swig_property(_sim_services.ALLOC_INFO_alloc_type_get, _sim_services.ALLOC_INFO_alloc_type_set)
    __swig_setmethods__["user_type_name"] = _sim_services.ALLOC_INFO_user_type_name_set
    __swig_getmethods__["user_type_name"] = _sim_services.ALLOC_INFO_user_type_name_get
    if _newclass:
        user_type_name = _swig_property(_sim_services.ALLOC_INFO_user_type_name_get, _sim_services.ALLOC_INFO_user_type_name_set)
    __swig_setmethods__["attr"] = _sim_services.ALLOC_INFO_attr_set
    __swig_getmethods__["attr"] = _sim_services.ALLOC_INFO_attr_get
    if _newclass:
        attr = _swig_property(_sim_services.ALLOC_INFO_attr_get, _sim_services.ALLOC_INFO_attr_set)
    __swig_setmethods__["num"] = _sim_services.ALLOC_INFO_num_set
    __swig_getmethods__["num"] = _sim_services.ALLOC_INFO_num_get
    if _newclass:
        num = _swig_property(_sim_services.ALLOC_INFO_num_get, _sim_services.ALLOC_INFO_num_set)
    __swig_setmethods__["num_index"] = _sim_services.ALLOC_INFO_num_index_set
    __swig_getmethods__["num_index"] = _sim_services.ALLOC_INFO_num_index_get
    if _newclass:
        num_index = _swig_property(_sim_services.ALLOC_INFO_num_index_get, _sim_services.ALLOC_INFO_num_index_set)
    __swig_setmethods__["index"] = _sim_services.ALLOC_INFO_index_set
    __swig_getmethods__["index"] = _sim_services.ALLOC_INFO_index_get
    if _newclass:
        index = _swig_property(_sim_services.ALLOC_INFO_index_get, _sim_services.ALLOC_INFO_index_set)
    __swig_setmethods__["id"] = _sim_services.ALLOC_INFO_id_set
    __swig_getmethods__["id"] = _sim_services.ALLOC_INFO_id_get
    if _newclass:
        id = _swig_property(_sim_services.ALLOC_INFO_id_get, _sim_services.ALLOC_INFO_id_set)
    __swig_setmethods__["alloced_in_memory_init"] = _sim_services.ALLOC_INFO_alloced_in_memory_init_set
    __swig_getmethods__["alloced_in_memory_init"] = _sim_services.ALLOC_INFO_alloced_in_memory_init_get
    if _newclass:
        alloced_in_memory_init = _swig_property(_sim_services.ALLOC_INFO_alloced_in_memory_init_get, _sim_services.ALLOC_INFO_alloced_in_memory_init_set)

    def __init__(self):
        this = _sim_services.new_ALLOC_INFO()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ALLOC_INFO
    __del__ = lambda self: None
ALLOC_INFO_swigregister = _sim_services.ALLOC_INFO_swigregister
ALLOC_INFO_swigregister(ALLOC_INFO)


def TMM_declare_var(*args):
    return _sim_services.TMM_declare_var(*args)
TMM_declare_var = _sim_services.TMM_declare_var

def TMM_declare_var_1d(*args):
    return _sim_services.TMM_declare_var_1d(*args)
TMM_declare_var_1d = _sim_services.TMM_declare_var_1d

def TMM_declare_var_s(*args):
    return _sim_services.TMM_declare_var_s(*args)
TMM_declare_var_s = _sim_services.TMM_declare_var_s

def alloc_type(*args):
    return _sim_services.alloc_type(*args)
alloc_type = _sim_services.alloc_type

def TMM_declare_operatornew_var(*args):
    return _sim_services.TMM_declare_operatornew_var(*args)
TMM_declare_operatornew_var = _sim_services.TMM_declare_operatornew_var

def TMM_declare_ext_var(*args):
    return _sim_services.TMM_declare_ext_var(*args)
TMM_declare_ext_var = _sim_services.TMM_declare_ext_var

def TMM_declare_ext_var_1d(*args):
    return _sim_services.TMM_declare_ext_var_1d(*args)
TMM_declare_ext_var_1d = _sim_services.TMM_declare_ext_var_1d

def TMM_declare_ext_var_s(*args):
    return _sim_services.TMM_declare_ext_var_s(*args)
TMM_declare_ext_var_s = _sim_services.TMM_declare_ext_var_s

def TMM_resize_array_a(*args):
    return _sim_services.TMM_resize_array_a(*args)
TMM_resize_array_a = _sim_services.TMM_resize_array_a

def TMM_resize_array_n(*args):
    return _sim_services.TMM_resize_array_n(*args)
TMM_resize_array_n = _sim_services.TMM_resize_array_n

def TMM_resize_array_1d_a(*args):
    return _sim_services.TMM_resize_array_1d_a(*args)
TMM_resize_array_1d_a = _sim_services.TMM_resize_array_1d_a

def TMM_resize_array_1d_n(*args):
    return _sim_services.TMM_resize_array_1d_n(*args)
TMM_resize_array_1d_n = _sim_services.TMM_resize_array_1d_n

def TMM_strdup(*args):
    return _sim_services.TMM_strdup(*args)
TMM_strdup = _sim_services.TMM_strdup

def TMM_var_exists(*args):
    return _sim_services.TMM_var_exists(*args)
TMM_var_exists = _sim_services.TMM_var_exists

def TMM_is_alloced(*args):
    return _sim_services.TMM_is_alloced(*args)
TMM_is_alloced = _sim_services.TMM_is_alloced

def TMM_set_debug_level(*args):
    return _sim_services.TMM_set_debug_level(*args)
TMM_set_debug_level = _sim_services.TMM_set_debug_level

def TMM_reduced_checkpoint(*args):
    return _sim_services.TMM_reduced_checkpoint(*args)
TMM_reduced_checkpoint = _sim_services.TMM_reduced_checkpoint

def TMM_hexfloat_checkpoint(*args):
    return _sim_services.TMM_hexfloat_checkpoint(*args)
TMM_hexfloat_checkpoint = _sim_services.TMM_hexfloat_checkpoint

def TMM_clear_var_a(*args):
    return _sim_services.TMM_clear_var_a(*args)
TMM_clear_var_a = _sim_services.TMM_clear_var_a

def TMM_clear_var_n(*args):
    return _sim_services.TMM_clear_var_n(*args)
TMM_clear_var_n = _sim_services.TMM_clear_var_n

def TMM_delete_var_a(*args):
    return _sim_services.TMM_delete_var_a(*args)
TMM_delete_var_a = _sim_services.TMM_delete_var_a

def TMM_delete_var_n(*args):
    return _sim_services.TMM_delete_var_n(*args)
TMM_delete_var_n = _sim_services.TMM_delete_var_n

def TMM_delete_extern_var_a(*args):
    return _sim_services.TMM_delete_extern_var_a(*args)
TMM_delete_extern_var_a = _sim_services.TMM_delete_extern_var_a

def TMM_delete_extern_var_n(*args):
    return _sim_services.TMM_delete_extern_var_n(*args)
TMM_delete_extern_var_n = _sim_services.TMM_delete_extern_var_n

def TMM_write_checkpoint(*args):
    return _sim_services.TMM_write_checkpoint(*args)
TMM_write_checkpoint = _sim_services.TMM_write_checkpoint

def TMM_read_checkpoint(*args):
    return _sim_services.TMM_read_checkpoint(*args)
TMM_read_checkpoint = _sim_services.TMM_read_checkpoint

def TMM_read_checkpoint_from_string(*args):
    return _sim_services.TMM_read_checkpoint_from_string(*args)
TMM_read_checkpoint_from_string = _sim_services.TMM_read_checkpoint_from_string

def TMM_init_from_checkpoint(*args):
    return _sim_services.TMM_init_from_checkpoint(*args)
TMM_init_from_checkpoint = _sim_services.TMM_init_from_checkpoint

def TMM_add_shared_library_symbols(*args):
    return _sim_services.TMM_add_shared_library_symbols(*args)
TMM_add_shared_library_symbols = _sim_services.TMM_add_shared_library_symbols

def ref_attributes(*args):
    return _sim_services.ref_attributes(*args)
ref_attributes = _sim_services.ref_attributes

def ref_var(*args):
    return _sim_services.ref_var(*args)
ref_var = _sim_services.ref_var

def get_size(*args):
    return _sim_services.get_size(*args)
get_size = _sim_services.get_size

def add_var(*args):
    return _sim_services.add_var(*args)
add_var = _sim_services.add_var

def add_vars(*args):
    return _sim_services.add_vars(*args)
add_vars = _sim_services.add_vars

def follow_address_path(*args):
    return _sim_services.follow_address_path(*args)
follow_address_path = _sim_services.follow_address_path

def ref_allocate(*args):
    return _sim_services.ref_allocate(*args)
ref_allocate = _sim_services.ref_allocate

def ref_assignment(*args):
    return _sim_services.ref_assignment(*args)
ref_assignment = _sim_services.ref_assignment

def get_truncated_size(*args):
    return _sim_services.get_truncated_size(*args)
get_truncated_size = _sim_services.get_truncated_size

def io_get_fixed_truncated_size(*args):
    return _sim_services.io_get_fixed_truncated_size(*args)
io_get_fixed_truncated_size = _sim_services.io_get_fixed_truncated_size

def get_alloc_info_of(*args):
    return _sim_services.get_alloc_info_of(*args)
get_alloc_info_of = _sim_services.get_alloc_info_of

def get_alloc_info_at(*args):
    return _sim_services.get_alloc_info_at(*args)
get_alloc_info_at = _sim_services.get_alloc_info_at

def set_alloc_name_at(*args):
    return _sim_services.set_alloc_name_at(*args)
set_alloc_name_at = _sim_services.set_alloc_name_at

def ref_free(*args):
    return _sim_services.ref_free(*args)
ref_free = _sim_services.ref_free

def get_enumerated(*args):
    return _sim_services.get_enumerated(*args)
get_enumerated = _sim_services.get_enumerated

def TMM_add_checkpoint_alloc_dependency(*args):
    return _sim_services.TMM_add_checkpoint_alloc_dependency(*args)
TMM_add_checkpoint_alloc_dependency = _sim_services.TMM_add_checkpoint_alloc_dependency

_sim_services.MM_OK_swigconstant(_sim_services)
MM_OK = _sim_services.MM_OK

_sim_services.MM_ASSIGNMENT_LIST_swigconstant(_sim_services)
MM_ASSIGNMENT_LIST = _sim_services.MM_ASSIGNMENT_LIST

_sim_services.MM_ERROR_swigconstant(_sim_services)
MM_ERROR = _sim_services.MM_ERROR

_sim_services.MM_FILE_STREAM_swigconstant(_sim_services)
MM_FILE_STREAM = _sim_services.MM_FILE_STREAM

_sim_services.MM_FILE_STREAM_HIGH_ARG_swigconstant(_sim_services)
MM_FILE_STREAM_HIGH_ARG = _sim_services.MM_FILE_STREAM_HIGH_ARG

_sim_services.MM_INIT_GT_512_LINE_swigconstant(_sim_services)
MM_INIT_GT_512_LINE = _sim_services.MM_INIT_GT_512_LINE

_sim_services.MM_INVALID_UNITS_swigconstant(_sim_services)
MM_INVALID_UNITS = _sim_services.MM_INVALID_UNITS

_sim_services.MM_MAX_ERROR_swigconstant(_sim_services)
MM_MAX_ERROR = _sim_services.MM_MAX_ERROR

_sim_services.MM_PARAMETER_ARRAY_DIM_swigconstant(_sim_services)
MM_PARAMETER_ARRAY_DIM = _sim_services.MM_PARAMETER_ARRAY_DIM

_sim_services.MM_PARAMETER_ARRAY_SIZE_swigconstant(_sim_services)
MM_PARAMETER_ARRAY_SIZE = _sim_services.MM_PARAMETER_ARRAY_SIZE

_sim_services.MM_PARAMETER_TYPE_swigconstant(_sim_services)
MM_PARAMETER_TYPE = _sim_services.MM_PARAMETER_TYPE

_sim_services.MM_STRUCT_NOT_ASSIGNABLE_swigconstant(_sim_services)
MM_STRUCT_NOT_ASSIGNABLE = _sim_services.MM_STRUCT_NOT_ASSIGNABLE

_sim_services.MM_SYNTAX_ERROR_swigconstant(_sim_services)
MM_SYNTAX_ERROR = _sim_services.MM_SYNTAX_ERROR

_sim_services.MM_TOO_MANY_ARRAY_DIMENSIONS_swigconstant(_sim_services)
MM_TOO_MANY_ARRAY_DIMENSIONS = _sim_services.MM_TOO_MANY_ARRAY_DIMENSIONS

_sim_services.MM_UNCLOSED_COMMENT_swigconstant(_sim_services)
MM_UNCLOSED_COMMENT = _sim_services.MM_UNCLOSED_COMMENT

_sim_services.MM_UNDEFINED_REFERENCE_swigconstant(_sim_services)
MM_UNDEFINED_REFERENCE = _sim_services.MM_UNDEFINED_REFERENCE

_sim_services.MM_UNTERMINATED_STRING_swigconstant(_sim_services)
MM_UNTERMINATED_STRING = _sim_services.MM_UNTERMINATED_STRING

_sim_services.BASE_NAME_swigconstant(_sim_services)
BASE_NAME = _sim_services.BASE_NAME

_sim_services.ELEM_NAME_swigconstant(_sim_services)
ELEM_NAME = _sim_services.ELEM_NAME

_sim_services.ARRAY_INDEX_swigconstant(_sim_services)
ARRAY_INDEX = _sim_services.ARRAY_INDEX
class VarNameElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarNameElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarNameElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _sim_services.VarNameElement_type_set
    __swig_getmethods__["type"] = _sim_services.VarNameElement_type_get
    if _newclass:
        type = _swig_property(_sim_services.VarNameElement_type_get, _sim_services.VarNameElement_type_set)
    __swig_setmethods__["index"] = _sim_services.VarNameElement_index_set
    __swig_getmethods__["index"] = _sim_services.VarNameElement_index_get
    if _newclass:
        index = _swig_property(_sim_services.VarNameElement_index_get, _sim_services.VarNameElement_index_set)
    __swig_setmethods__["name"] = _sim_services.VarNameElement_name_set
    __swig_getmethods__["name"] = _sim_services.VarNameElement_name_get
    if _newclass:
        name = _swig_property(_sim_services.VarNameElement_name_get, _sim_services.VarNameElement_name_set)

    def __init__(self):
        this = _sim_services.new_VarNameElement()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VarNameElement
    __del__ = lambda self: None
VarNameElement_swigregister = _sim_services.VarNameElement_swigregister
VarNameElement_swigregister(VarNameElement)

class CheckPointAgent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckPointAgent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CheckPointAgent, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_CheckPointAgent
    __del__ = lambda self: None

    def input_perm_check(self, *args):
        return _sim_services.CheckPointAgent_input_perm_check(self, *args)

    def output_perm_check(self, *args):
        return _sim_services.CheckPointAgent_output_perm_check(self, *args)

    def write_decl(self, *args):
        return _sim_services.CheckPointAgent_write_decl(self, *args)

    def push_basename(self, *args):
        return _sim_services.CheckPointAgent_push_basename(self, *args)

    def push_struct_elem(self, *args):
        return _sim_services.CheckPointAgent_push_struct_elem(self, *args)

    def push_array_elem(self, *args):
        return _sim_services.CheckPointAgent_push_array_elem(self, *args)

    def pop_elem(self, *args):
        return _sim_services.CheckPointAgent_pop_elem(self, *args)

    def assign_rvalue(self, *args):
        return _sim_services.CheckPointAgent_assign_rvalue(self, *args)

    def restore(self, *args):
        return _sim_services.CheckPointAgent_restore(self, *args)

    def set_reduced_checkpoint(self, *args):
        return _sim_services.CheckPointAgent_set_reduced_checkpoint(self, *args)

    def set_hexfloat_checkpoint(self, *args):
        return _sim_services.CheckPointAgent_set_hexfloat_checkpoint(self, *args)

    def set_debug_level(self, *args):
        return _sim_services.CheckPointAgent_set_debug_level(self, *args)
    __swig_setmethods__["reduced_checkpoint"] = _sim_services.CheckPointAgent_reduced_checkpoint_set
    __swig_getmethods__["reduced_checkpoint"] = _sim_services.CheckPointAgent_reduced_checkpoint_get
    if _newclass:
        reduced_checkpoint = _swig_property(_sim_services.CheckPointAgent_reduced_checkpoint_get, _sim_services.CheckPointAgent_reduced_checkpoint_set)
    __swig_setmethods__["hexfloat_checkpoint"] = _sim_services.CheckPointAgent_hexfloat_checkpoint_set
    __swig_getmethods__["hexfloat_checkpoint"] = _sim_services.CheckPointAgent_hexfloat_checkpoint_get
    if _newclass:
        hexfloat_checkpoint = _swig_property(_sim_services.CheckPointAgent_hexfloat_checkpoint_get, _sim_services.CheckPointAgent_hexfloat_checkpoint_set)
    __swig_setmethods__["debug_level"] = _sim_services.CheckPointAgent_debug_level_set
    __swig_getmethods__["debug_level"] = _sim_services.CheckPointAgent_debug_level_get
    if _newclass:
        debug_level = _swig_property(_sim_services.CheckPointAgent_debug_level_get, _sim_services.CheckPointAgent_debug_level_set)
    __swig_setmethods__["leftside_stack"] = _sim_services.CheckPointAgent_leftside_stack_set
    __swig_getmethods__["leftside_stack"] = _sim_services.CheckPointAgent_leftside_stack_get
    if _newclass:
        leftside_stack = _swig_property(_sim_services.CheckPointAgent_leftside_stack_get, _sim_services.CheckPointAgent_leftside_stack_set)
CheckPointAgent_swigregister = _sim_services.CheckPointAgent_swigregister
CheckPointAgent_swigregister(CheckPointAgent)

class MemoryManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryManager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MemoryManager(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MemoryManager
    __del__ = lambda self: None

    def declare_var(self, *args):
        return _sim_services.MemoryManager_declare_var(self, *args)

    def declare_operatornew_var(self, *args):
        return _sim_services.MemoryManager_declare_operatornew_var(self, *args)

    def declare_extern_var(self, *args):
        return _sim_services.MemoryManager_declare_extern_var(self, *args)

    def resize_array(self, *args):
        return _sim_services.MemoryManager_resize_array(self, *args)

    def mm_strdup(self, *args):
        return _sim_services.MemoryManager_mm_strdup(self, *args)

    def var_exists(self, *args):
        return _sim_services.MemoryManager_var_exists(self, *args)

    def sizeof_type(self, *args):
        return _sim_services.MemoryManager_sizeof_type(self, *args)

    def is_alloced(self, *args):
        return _sim_services.MemoryManager_is_alloced(self, *args)

    def set_debug_level(self, *args):
        return _sim_services.MemoryManager_set_debug_level(self, *args)

    def set_expanded_arrays(self, *args):
        return _sim_services.MemoryManager_set_expanded_arrays(self, *args)

    def set_reduced_checkpoint(self, *args):
        return _sim_services.MemoryManager_set_reduced_checkpoint(self, *args)

    def set_hexfloat_checkpoint(self, *args):
        return _sim_services.MemoryManager_set_hexfloat_checkpoint(self, *args)

    def clear_var(self, *args):
        return _sim_services.MemoryManager_clear_var(self, *args)

    def clear_all_vars(self, *args):
        return _sim_services.MemoryManager_clear_all_vars(self, *args)

    def delete_var(self, *args):
        return _sim_services.MemoryManager_delete_var(self, *args)

    def delete_extern_var(self, *args):
        return _sim_services.MemoryManager_delete_extern_var(self, *args)

    def write_checkpoint(self, *args):
        return _sim_services.MemoryManager_write_checkpoint(self, *args)

    def read_checkpoint(self, *args):
        return _sim_services.MemoryManager_read_checkpoint(self, *args)

    def read_checkpoint_from_string(self, *args):
        return _sim_services.MemoryManager_read_checkpoint_from_string(self, *args)

    def init_from_checkpoint(self, *args):
        return _sim_services.MemoryManager_init_from_checkpoint(self, *args)

    def reset_memory(self, *args):
        return _sim_services.MemoryManager_reset_memory(self, *args)

    def add_attr_info(self, *args):
        return _sim_services.MemoryManager_add_attr_info(self, *args)

    def add_template_name_trans(self, *args):
        return _sim_services.MemoryManager_add_template_name_trans(self, *args)

    def add_var(self, *args):
        return _sim_services.MemoryManager_add_var(self, *args)

    def add_vars(self, *args):
        return _sim_services.MemoryManager_add_vars(self, *args)

    def ref_allocate(self, *args):
        return _sim_services.MemoryManager_ref_allocate(self, *args)

    def ref_attributes(self, *args):
        return _sim_services.MemoryManager_ref_attributes(self, *args)

    def ref_name_from_address(self, *args):
        return _sim_services.MemoryManager_ref_name_from_address(self, *args)

    def ref_assignment(self, *args):
        return _sim_services.MemoryManager_ref_assignment(self, *args)

    def ref_var(self, *args):
        return _sim_services.MemoryManager_ref_var(self, *args)

    def ref_dim(self, *args):
        return _sim_services.MemoryManager_ref_dim(self, *args)

    def ref_name(self, *args):
        return _sim_services.MemoryManager_ref_name(self, *args)

    def get_enumerated(self, *args):
        return _sim_services.MemoryManager_get_enumerated(self, *args)

    def get_size(self, *args):
        return _sim_services.MemoryManager_get_size(self, *args)

    def get_truncated_size(self, *args):
        return _sim_services.MemoryManager_get_truncated_size(self, *args)

    def io_get_fixed_truncated_size(self, *args):
        return _sim_services.MemoryManager_io_get_fixed_truncated_size(self, *args)

    def get_alloc_info_of(self, *args):
        return _sim_services.MemoryManager_get_alloc_info_of(self, *args)

    def get_alloc_info_at(self, *args):
        return _sim_services.MemoryManager_get_alloc_info_at(self, *args)

    def set_name_at(self, *args):
        return _sim_services.MemoryManager_set_name_at(self, *args)

    def add_checkpoint_alloc_dependency(self, *args):
        return _sim_services.MemoryManager_add_checkpoint_alloc_dependency(self, *args)

    def add_shared_library_symbols(self, *args):
        return _sim_services.MemoryManager_add_shared_library_symbols(self, *args)
    __swig_setmethods__["dlhandles"] = _sim_services.MemoryManager_dlhandles_set
    __swig_getmethods__["dlhandles"] = _sim_services.MemoryManager_dlhandles_get
    if _newclass:
        dlhandles = _swig_property(_sim_services.MemoryManager_dlhandles_get, _sim_services.MemoryManager_dlhandles_set)

    def get_CheckPointAgent(self, *args):
        return _sim_services.MemoryManager_get_CheckPointAgent(self, *args)

    def set_CheckPointAgent(self, *args):
        return _sim_services.MemoryManager_set_CheckPointAgent(self, *args)

    def reset_CheckPointAgent(self, *args):
        return _sim_services.MemoryManager_reset_CheckPointAgent(self, *args)

    def write_var(self, *args):
        return _sim_services.MemoryManager_write_var(self, *args)

    def write_composite_var(self, *args):
        return _sim_services.MemoryManager_write_composite_var(self, *args)

    def write_array_var(self, *args):
        return _sim_services.MemoryManager_write_array_var(self, *args)

    def make_decl_string(self, *args):
        return _sim_services.MemoryManager_make_decl_string(self, *args)

    def io_src_sizeof_user_type(self, *args):
        return _sim_services.MemoryManager_io_src_sizeof_user_type(self, *args)

    def alloc_info_map_begin(self, *args):
        return _sim_services.MemoryManager_alloc_info_map_begin(self, *args)

    def alloc_info_map_end(self, *args):
        return _sim_services.MemoryManager_alloc_info_map_end(self, *args)

    def variable_map_begin(self, *args):
        return _sim_services.MemoryManager_variable_map_begin(self, *args)

    def variable_map_end(self, *args):
        return _sim_services.MemoryManager_variable_map_end(self, *args)
    __swig_setmethods__["debug_level"] = _sim_services.MemoryManager_debug_level_set
    __swig_getmethods__["debug_level"] = _sim_services.MemoryManager_debug_level_get
    if _newclass:
        debug_level = _swig_property(_sim_services.MemoryManager_debug_level_get, _sim_services.MemoryManager_debug_level_set)
    __swig_getmethods__["emitMessage"] = lambda x: _sim_services.MemoryManager_emitMessage
    if _newclass:
        emitMessage = staticmethod(_sim_services.MemoryManager_emitMessage)
    __swig_getmethods__["emitError"] = lambda x: _sim_services.MemoryManager_emitError
    if _newclass:
        emitError = staticmethod(_sim_services.MemoryManager_emitError)
    __swig_getmethods__["emitWarning"] = lambda x: _sim_services.MemoryManager_emitWarning
    if _newclass:
        emitWarning = staticmethod(_sim_services.MemoryManager_emitWarning)
MemoryManager_swigregister = _sim_services.MemoryManager_swigregister
MemoryManager_swigregister(MemoryManager)

def MemoryManager_emitMessage(*args):
    return _sim_services.MemoryManager_emitMessage(*args)
MemoryManager_emitMessage = _sim_services.MemoryManager_emitMessage

def MemoryManager_emitError(*args):
    return _sim_services.MemoryManager_emitError(*args)
MemoryManager_emitError = _sim_services.MemoryManager_emitError

def MemoryManager_emitWarning(*args):
    return _sim_services.MemoryManager_emitWarning(*args)
MemoryManager_emitWarning = _sim_services.MemoryManager_emitWarning

class FrameDataRecordGroup(DRBinary):
    __swig_setmethods__ = {}
    for _s in [DRBinary]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameDataRecordGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [DRBinary]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameDataRecordGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_FrameDataRecordGroup(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def start_timer(self, *args):
        return _sim_services.FrameDataRecordGroup_start_timer(self, *args)

    def stop_timer(self, *args):
        return _sim_services.FrameDataRecordGroup_stop_timer(self, *args)

    def frame_log_clear(self, *args):
        return _sim_services.FrameDataRecordGroup_frame_log_clear(self, *args)

    def adjust_time(self, *args):
        return _sim_services.FrameDataRecordGroup_adjust_time(self, *args)

    def enable(self, *args):
        return _sim_services.FrameDataRecordGroup_enable(self, *args)

    def add_rec_job(self, *args):
        return _sim_services.FrameDataRecordGroup_add_rec_job(self, *args)

    def restart(self, *args):
        return _sim_services.FrameDataRecordGroup_restart(self, *args)

    def call_function(self, *args):
        return _sim_services.FrameDataRecordGroup_call_function(self, *args)
    __swig_destroy__ = _sim_services.delete_FrameDataRecordGroup
    __del__ = lambda self: None
FrameDataRecordGroup_swigregister = _sim_services.FrameDataRecordGroup_swigregister
FrameDataRecordGroup_swigregister(FrameDataRecordGroup)

class timeline_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, timeline_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, timeline_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["trick_job"] = _sim_services.timeline_t_trick_job_set
    __swig_getmethods__["trick_job"] = _sim_services.timeline_t_trick_job_get
    if _newclass:
        trick_job = _swig_property(_sim_services.timeline_t_trick_job_get, _sim_services.timeline_t_trick_job_set)
    __swig_setmethods__["id"] = _sim_services.timeline_t_id_set
    __swig_getmethods__["id"] = _sim_services.timeline_t_id_get
    if _newclass:
        id = _swig_property(_sim_services.timeline_t_id_get, _sim_services.timeline_t_id_set)
    __swig_setmethods__["start"] = _sim_services.timeline_t_start_set
    __swig_getmethods__["start"] = _sim_services.timeline_t_start_get
    if _newclass:
        start = _swig_property(_sim_services.timeline_t_start_get, _sim_services.timeline_t_start_set)
    __swig_setmethods__["stop"] = _sim_services.timeline_t_stop_set
    __swig_getmethods__["stop"] = _sim_services.timeline_t_stop_get
    if _newclass:
        stop = _swig_property(_sim_services.timeline_t_stop_get, _sim_services.timeline_t_stop_set)

    def __init__(self):
        this = _sim_services.new_timeline_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_timeline_t
    __del__ = lambda self: None
timeline_t_swigregister = _sim_services.timeline_t_swigregister
timeline_t_swigregister(timeline_t)

class FrameLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameLog, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frame_log_flag"] = _sim_services.FrameLog_frame_log_flag_set
    __swig_getmethods__["frame_log_flag"] = _sim_services.FrameLog_frame_log_flag_get
    if _newclass:
        frame_log_flag = _swig_property(_sim_services.FrameLog_frame_log_flag_get, _sim_services.FrameLog_frame_log_flag_set)
    __swig_setmethods__["drg_users"] = _sim_services.FrameLog_drg_users_set
    __swig_getmethods__["drg_users"] = _sim_services.FrameLog_drg_users_get
    if _newclass:
        drg_users = _swig_property(_sim_services.FrameLog_drg_users_get, _sim_services.FrameLog_drg_users_set)
    __swig_setmethods__["drg_trick"] = _sim_services.FrameLog_drg_trick_set
    __swig_getmethods__["drg_trick"] = _sim_services.FrameLog_drg_trick_get
    if _newclass:
        drg_trick = _swig_property(_sim_services.FrameLog_drg_trick_get, _sim_services.FrameLog_drg_trick_set)
    __swig_setmethods__["drg_frame"] = _sim_services.FrameLog_drg_frame_set
    __swig_getmethods__["drg_frame"] = _sim_services.FrameLog_drg_frame_get
    if _newclass:
        drg_frame = _swig_property(_sim_services.FrameLog_drg_frame_get, _sim_services.FrameLog_drg_frame_set)
    __swig_setmethods__["timeline"] = _sim_services.FrameLog_timeline_set
    __swig_getmethods__["timeline"] = _sim_services.FrameLog_timeline_get
    if _newclass:
        timeline = _swig_property(_sim_services.FrameLog_timeline_get, _sim_services.FrameLog_timeline_set)
    __swig_setmethods__["timeline_other"] = _sim_services.FrameLog_timeline_other_set
    __swig_getmethods__["timeline_other"] = _sim_services.FrameLog_timeline_other_get
    if _newclass:
        timeline_other = _swig_property(_sim_services.FrameLog_timeline_other_get, _sim_services.FrameLog_timeline_other_set)
    __swig_setmethods__["num_threads"] = _sim_services.FrameLog_num_threads_set
    __swig_getmethods__["num_threads"] = _sim_services.FrameLog_num_threads_get
    if _newclass:
        num_threads = _swig_property(_sim_services.FrameLog_num_threads_get, _sim_services.FrameLog_num_threads_set)
    __swig_setmethods__["tl_max_samples"] = _sim_services.FrameLog_tl_max_samples_set
    __swig_getmethods__["tl_max_samples"] = _sim_services.FrameLog_tl_max_samples_get
    if _newclass:
        tl_max_samples = _swig_property(_sim_services.FrameLog_tl_max_samples_get, _sim_services.FrameLog_tl_max_samples_set)
    __swig_setmethods__["tl_count"] = _sim_services.FrameLog_tl_count_set
    __swig_getmethods__["tl_count"] = _sim_services.FrameLog_tl_count_get
    if _newclass:
        tl_count = _swig_property(_sim_services.FrameLog_tl_count_get, _sim_services.FrameLog_tl_count_set)
    __swig_setmethods__["tl_other_count"] = _sim_services.FrameLog_tl_other_count_set
    __swig_getmethods__["tl_other_count"] = _sim_services.FrameLog_tl_other_count_get
    if _newclass:
        tl_other_count = _swig_property(_sim_services.FrameLog_tl_other_count_get, _sim_services.FrameLog_tl_other_count_set)
    __swig_setmethods__["log_init_start"] = _sim_services.FrameLog_log_init_start_set
    __swig_getmethods__["log_init_start"] = _sim_services.FrameLog_log_init_start_get
    if _newclass:
        log_init_start = _swig_property(_sim_services.FrameLog_log_init_start_get, _sim_services.FrameLog_log_init_start_set)
    __swig_setmethods__["log_init_end"] = _sim_services.FrameLog_log_init_end_set
    __swig_getmethods__["log_init_end"] = _sim_services.FrameLog_log_init_end_get
    if _newclass:
        log_init_end = _swig_property(_sim_services.FrameLog_log_init_end_get, _sim_services.FrameLog_log_init_end_set)
    __swig_setmethods__["fp_time_main"] = _sim_services.FrameLog_fp_time_main_set
    __swig_getmethods__["fp_time_main"] = _sim_services.FrameLog_fp_time_main_get
    if _newclass:
        fp_time_main = _swig_property(_sim_services.FrameLog_fp_time_main_get, _sim_services.FrameLog_fp_time_main_set)
    __swig_setmethods__["fp_time_other"] = _sim_services.FrameLog_fp_time_other_set
    __swig_getmethods__["fp_time_other"] = _sim_services.FrameLog_fp_time_other_get
    if _newclass:
        fp_time_other = _swig_property(_sim_services.FrameLog_fp_time_other_get, _sim_services.FrameLog_fp_time_other_set)
    __swig_setmethods__["time_value_attr"] = _sim_services.FrameLog_time_value_attr_set
    __swig_getmethods__["time_value_attr"] = _sim_services.FrameLog_time_value_attr_get
    if _newclass:
        time_value_attr = _swig_property(_sim_services.FrameLog_time_value_attr_get, _sim_services.FrameLog_time_value_attr_set)
    __swig_setmethods__["msg_sim_object_name"] = _sim_services.FrameLog_msg_sim_object_name_set
    __swig_getmethods__["msg_sim_object_name"] = _sim_services.FrameLog_msg_sim_object_name_get
    if _newclass:
        msg_sim_object_name = _swig_property(_sim_services.FrameLog_msg_sim_object_name_get, _sim_services.FrameLog_msg_sim_object_name_set)
    __swig_setmethods__["dr_sim_object_name"] = _sim_services.FrameLog_dr_sim_object_name_set
    __swig_getmethods__["dr_sim_object_name"] = _sim_services.FrameLog_dr_sim_object_name_get
    if _newclass:
        dr_sim_object_name = _swig_property(_sim_services.FrameLog_dr_sim_object_name_get, _sim_services.FrameLog_dr_sim_object_name_set)
    __swig_setmethods__["rt_sim_object_name"] = _sim_services.FrameLog_rt_sim_object_name_set
    __swig_getmethods__["rt_sim_object_name"] = _sim_services.FrameLog_rt_sim_object_name_get
    if _newclass:
        rt_sim_object_name = _swig_property(_sim_services.FrameLog_rt_sim_object_name_get, _sim_services.FrameLog_rt_sim_object_name_set)
    __swig_setmethods__["ms_sim_object_name"] = _sim_services.FrameLog_ms_sim_object_name_set
    __swig_getmethods__["ms_sim_object_name"] = _sim_services.FrameLog_ms_sim_object_name_get
    if _newclass:
        ms_sim_object_name = _swig_property(_sim_services.FrameLog_ms_sim_object_name_get, _sim_services.FrameLog_ms_sim_object_name_set)
    __swig_setmethods__["clock"] = _sim_services.FrameLog_clock_set
    __swig_getmethods__["clock"] = _sim_services.FrameLog_clock_get
    if _newclass:
        clock = _swig_property(_sim_services.FrameLog_clock_get, _sim_services.FrameLog_clock_set)

    def __init__(self, *args):
        this = _sim_services.new_FrameLog(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_FrameLog
    __del__ = lambda self: None

    def frame_clock_start(self, *args):
        return _sim_services.FrameLog_frame_clock_start(self, *args)

    def frame_clock_stop(self, *args):
        return _sim_services.FrameLog_frame_clock_stop(self, *args)

    def framelog_on(self, *args):
        return _sim_services.FrameLog_framelog_on(self, *args)

    def framelog_off(self, *args):
        return _sim_services.FrameLog_framelog_off(self, *args)

    def default_data(self, *args):
        return _sim_services.FrameLog_default_data(self, *args)

    def create_DP_files(self, *args):
        return _sim_services.FrameLog_create_DP_files(self, *args)

    def set_max_samples(self, *args):
        return _sim_services.FrameLog_set_max_samples(self, *args)

    def clear_data_record_info(self, *args):
        return _sim_services.FrameLog_clear_data_record_info(self, *args)

    def restart(self, *args):
        return _sim_services.FrameLog_restart(self, *args)

    def shutdown(self, *args):
        return _sim_services.FrameLog_shutdown(self, *args)

    def set_clock(self, *args):
        return _sim_services.FrameLog_set_clock(self, *args)
FrameLog_swigregister = _sim_services.FrameLog_swigregister
FrameLog_swigregister(FrameLog)


def frame_log_on(*args):
    return _sim_services.frame_log_on(*args)
frame_log_on = _sim_services.frame_log_on

def frame_log_off(*args):
    return _sim_services.frame_log_off(*args)
frame_log_off = _sim_services.frame_log_off

def frame_log_set_max_samples(*args):
    return _sim_services.frame_log_set_max_samples(*args)
frame_log_set_max_samples = _sim_services.frame_log_set_max_samples

def ip_parse(*args):
    return _sim_services.ip_parse(*args)
ip_parse = _sim_services.ip_parse

_sim_services.EVENT_NOTARGET_swigconstant(_sim_services)
EVENT_NOTARGET = _sim_services.EVENT_NOTARGET

_sim_services.EVENT_BEFORETARGET_swigconstant(_sim_services)
EVENT_BEFORETARGET = _sim_services.EVENT_BEFORETARGET

_sim_services.EVENT_AFTERTARGET_swigconstant(_sim_services)
EVENT_AFTERTARGET = _sim_services.EVENT_AFTERTARGET
class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Event
    __del__ = lambda self: None

    def get_name(self, *args):
        return _sim_services.Event_get_name(self, *args)

    def set_name(self, *args):
        return _sim_services.Event_set_name(self, *args)

    def is_active(self, *args):
        return _sim_services.Event_is_active(self, *args)

    def activate(self, *args):
        return _sim_services.Event_activate(self, *args)

    def deactivate(self, *args):
        return _sim_services.Event_deactivate(self, *args)

    def set_thread(self, *args):
        return _sim_services.Event_set_thread(self, *args)

    def get_thread(self, *args):
        return _sim_services.Event_get_thread(self, *args)

    def set_before_after(self, *args):
        return _sim_services.Event_set_before_after(self, *args)

    def get_before_after(self, *args):
        return _sim_services.Event_get_before_after(self, *args)

    def set_cycle(self, *args):
        return _sim_services.Event_set_cycle(self, *args)

    def get_cycle(self, *args):
        return _sim_services.Event_get_cycle(self, *args)

    def get_cycle_tics(self, *args):
        return _sim_services.Event_get_cycle_tics(self, *args)

    def get_next_tics(self, *args):
        return _sim_services.Event_get_next_tics(self, *args)

    def set_next_tics(self, *args):
        return _sim_services.Event_set_next_tics(self, *args)

    def advance_next_tics(self, *args):
        return _sim_services.Event_advance_next_tics(self, *args)

    def get_free_on_removal(self, *args):
        return _sim_services.Event_get_free_on_removal(self, *args)

    def set_free_on_removal(self, *args):
        return _sim_services.Event_set_free_on_removal(self, *args)

    def get_target_name(self, *args):
        return _sim_services.Event_get_target_name(self, *args)

    def set_target_name(self, *args):
        return _sim_services.Event_set_target_name(self, *args)

    def get_target_inst(self, *args):
        return _sim_services.Event_get_target_inst(self, *args)

    def set_target_inst(self, *args):
        return _sim_services.Event_set_target_inst(self, *args)

    def process(self, *args):
        return _sim_services.Event_process(self, *args)

    def add(self, *args):
        return _sim_services.Event_add(self, *args)

    def remove(self, *args):
        return _sim_services.Event_remove(self, *args)

    def restart(self, *args):
        return _sim_services.Event_restart(self, *args)
Event_swigregister = _sim_services.Event_swigregister
Event_swigregister(Event)

class condition_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, condition_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, condition_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_condition_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["enabled"] = _sim_services.condition_t_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.condition_t_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.condition_t_enabled_get, _sim_services.condition_t_enabled_set)
    __swig_setmethods__["hold"] = _sim_services.condition_t_hold_set
    __swig_getmethods__["hold"] = _sim_services.condition_t_hold_get
    if _newclass:
        hold = _swig_property(_sim_services.condition_t_hold_get, _sim_services.condition_t_hold_set)
    __swig_setmethods__["fired"] = _sim_services.condition_t_fired_set
    __swig_getmethods__["fired"] = _sim_services.condition_t_fired_get
    if _newclass:
        fired = _swig_property(_sim_services.condition_t_fired_get, _sim_services.condition_t_fired_set)
    __swig_setmethods__["fired_count"] = _sim_services.condition_t_fired_count_set
    __swig_getmethods__["fired_count"] = _sim_services.condition_t_fired_count_get
    if _newclass:
        fired_count = _swig_property(_sim_services.condition_t_fired_count_get, _sim_services.condition_t_fired_count_set)
    __swig_setmethods__["fired_time"] = _sim_services.condition_t_fired_time_set
    __swig_getmethods__["fired_time"] = _sim_services.condition_t_fired_time_get
    if _newclass:
        fired_time = _swig_property(_sim_services.condition_t_fired_time_get, _sim_services.condition_t_fired_time_set)
    __swig_setmethods__["str"] = _sim_services.condition_t_str_set
    __swig_getmethods__["str"] = _sim_services.condition_t_str_get
    if _newclass:
        str = _swig_property(_sim_services.condition_t_str_get, _sim_services.condition_t_str_set)
    __swig_setmethods__["comment"] = _sim_services.condition_t_comment_set
    __swig_getmethods__["comment"] = _sim_services.condition_t_comment_get
    if _newclass:
        comment = _swig_property(_sim_services.condition_t_comment_get, _sim_services.condition_t_comment_set)
    __swig_setmethods__["ref"] = _sim_services.condition_t_ref_set
    __swig_getmethods__["ref"] = _sim_services.condition_t_ref_get
    if _newclass:
        ref = _swig_property(_sim_services.condition_t_ref_get, _sim_services.condition_t_ref_set)
    __swig_setmethods__["job"] = _sim_services.condition_t_job_set
    __swig_getmethods__["job"] = _sim_services.condition_t_job_get
    if _newclass:
        job = _swig_property(_sim_services.condition_t_job_get, _sim_services.condition_t_job_set)
    __swig_setmethods__["cond_type"] = _sim_services.condition_t_cond_type_set
    __swig_getmethods__["cond_type"] = _sim_services.condition_t_cond_type_get
    if _newclass:
        cond_type = _swig_property(_sim_services.condition_t_cond_type_get, _sim_services.condition_t_cond_type_set)
    __swig_destroy__ = _sim_services.delete_condition_t
    __del__ = lambda self: None
condition_t_swigregister = _sim_services.condition_t_swigregister
condition_t_swigregister(condition_t)

class action_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, action_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, action_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_action_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["enabled"] = _sim_services.action_t_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.action_t_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.action_t_enabled_get, _sim_services.action_t_enabled_set)
    __swig_setmethods__["ran"] = _sim_services.action_t_ran_set
    __swig_getmethods__["ran"] = _sim_services.action_t_ran_get
    if _newclass:
        ran = _swig_property(_sim_services.action_t_ran_get, _sim_services.action_t_ran_set)
    __swig_setmethods__["ran_count"] = _sim_services.action_t_ran_count_set
    __swig_getmethods__["ran_count"] = _sim_services.action_t_ran_count_get
    if _newclass:
        ran_count = _swig_property(_sim_services.action_t_ran_count_get, _sim_services.action_t_ran_count_set)
    __swig_setmethods__["ran_time"] = _sim_services.action_t_ran_time_set
    __swig_getmethods__["ran_time"] = _sim_services.action_t_ran_time_get
    if _newclass:
        ran_time = _swig_property(_sim_services.action_t_ran_time_get, _sim_services.action_t_ran_time_set)
    __swig_setmethods__["str"] = _sim_services.action_t_str_set
    __swig_getmethods__["str"] = _sim_services.action_t_str_get
    if _newclass:
        str = _swig_property(_sim_services.action_t_str_get, _sim_services.action_t_str_set)
    __swig_setmethods__["comment"] = _sim_services.action_t_comment_set
    __swig_getmethods__["comment"] = _sim_services.action_t_comment_get
    if _newclass:
        comment = _swig_property(_sim_services.action_t_comment_get, _sim_services.action_t_comment_set)
    __swig_setmethods__["job"] = _sim_services.action_t_job_set
    __swig_getmethods__["job"] = _sim_services.action_t_job_get
    if _newclass:
        job = _swig_property(_sim_services.action_t_job_get, _sim_services.action_t_job_set)
    __swig_setmethods__["act_type"] = _sim_services.action_t_act_type_set
    __swig_getmethods__["act_type"] = _sim_services.action_t_act_type_get
    if _newclass:
        act_type = _swig_property(_sim_services.action_t_act_type_get, _sim_services.action_t_act_type_set)
    __swig_destroy__ = _sim_services.delete_action_t
    __del__ = lambda self: None
action_t_swigregister = _sim_services.action_t_swigregister
action_t_swigregister(action_t)

class IPPythonEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPPythonEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPPythonEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["added"] = _sim_services.IPPythonEvent_added_set
    __swig_getmethods__["added"] = _sim_services.IPPythonEvent_added_get
    if _newclass:
        added = _swig_property(_sim_services.IPPythonEvent_added_get, _sim_services.IPPythonEvent_added_set)
    __swig_setmethods__["is_user_event"] = _sim_services.IPPythonEvent_is_user_event_set
    __swig_getmethods__["is_user_event"] = _sim_services.IPPythonEvent_is_user_event_get
    if _newclass:
        is_user_event = _swig_property(_sim_services.IPPythonEvent_is_user_event_get, _sim_services.IPPythonEvent_is_user_event_set)
    __swig_setmethods__["manual"] = _sim_services.IPPythonEvent_manual_set
    __swig_getmethods__["manual"] = _sim_services.IPPythonEvent_manual_get
    if _newclass:
        manual = _swig_property(_sim_services.IPPythonEvent_manual_get, _sim_services.IPPythonEvent_manual_set)
    __swig_setmethods__["manual_fired"] = _sim_services.IPPythonEvent_manual_fired_set
    __swig_getmethods__["manual_fired"] = _sim_services.IPPythonEvent_manual_fired_get
    if _newclass:
        manual_fired = _swig_property(_sim_services.IPPythonEvent_manual_fired_get, _sim_services.IPPythonEvent_manual_fired_set)
    __swig_setmethods__["info_msg"] = _sim_services.IPPythonEvent_info_msg_set
    __swig_getmethods__["info_msg"] = _sim_services.IPPythonEvent_info_msg_get
    if _newclass:
        info_msg = _swig_property(_sim_services.IPPythonEvent_info_msg_get, _sim_services.IPPythonEvent_info_msg_set)
    __swig_setmethods__["cond_all"] = _sim_services.IPPythonEvent_cond_all_set
    __swig_getmethods__["cond_all"] = _sim_services.IPPythonEvent_cond_all_get
    if _newclass:
        cond_all = _swig_property(_sim_services.IPPythonEvent_cond_all_get, _sim_services.IPPythonEvent_cond_all_set)
    __swig_setmethods__["fired"] = _sim_services.IPPythonEvent_fired_set
    __swig_getmethods__["fired"] = _sim_services.IPPythonEvent_fired_get
    if _newclass:
        fired = _swig_property(_sim_services.IPPythonEvent_fired_get, _sim_services.IPPythonEvent_fired_set)
    __swig_setmethods__["hold"] = _sim_services.IPPythonEvent_hold_set
    __swig_getmethods__["hold"] = _sim_services.IPPythonEvent_hold_get
    if _newclass:
        hold = _swig_property(_sim_services.IPPythonEvent_hold_get, _sim_services.IPPythonEvent_hold_set)
    __swig_setmethods__["ran"] = _sim_services.IPPythonEvent_ran_set
    __swig_getmethods__["ran"] = _sim_services.IPPythonEvent_ran_get
    if _newclass:
        ran = _swig_property(_sim_services.IPPythonEvent_ran_get, _sim_services.IPPythonEvent_ran_set)
    __swig_setmethods__["condition_count"] = _sim_services.IPPythonEvent_condition_count_set
    __swig_getmethods__["condition_count"] = _sim_services.IPPythonEvent_condition_count_get
    if _newclass:
        condition_count = _swig_property(_sim_services.IPPythonEvent_condition_count_get, _sim_services.IPPythonEvent_condition_count_set)
    __swig_setmethods__["fired_count"] = _sim_services.IPPythonEvent_fired_count_set
    __swig_getmethods__["fired_count"] = _sim_services.IPPythonEvent_fired_count_get
    if _newclass:
        fired_count = _swig_property(_sim_services.IPPythonEvent_fired_count_get, _sim_services.IPPythonEvent_fired_count_set)
    __swig_setmethods__["fired_time"] = _sim_services.IPPythonEvent_fired_time_set
    __swig_getmethods__["fired_time"] = _sim_services.IPPythonEvent_fired_time_get
    if _newclass:
        fired_time = _swig_property(_sim_services.IPPythonEvent_fired_time_get, _sim_services.IPPythonEvent_fired_time_set)
    __swig_setmethods__["action_count"] = _sim_services.IPPythonEvent_action_count_set
    __swig_getmethods__["action_count"] = _sim_services.IPPythonEvent_action_count_get
    if _newclass:
        action_count = _swig_property(_sim_services.IPPythonEvent_action_count_get, _sim_services.IPPythonEvent_action_count_set)
    __swig_setmethods__["ran_count"] = _sim_services.IPPythonEvent_ran_count_set
    __swig_getmethods__["ran_count"] = _sim_services.IPPythonEvent_ran_count_get
    if _newclass:
        ran_count = _swig_property(_sim_services.IPPythonEvent_ran_count_get, _sim_services.IPPythonEvent_ran_count_set)
    __swig_setmethods__["ran_time"] = _sim_services.IPPythonEvent_ran_time_set
    __swig_getmethods__["ran_time"] = _sim_services.IPPythonEvent_ran_time_get
    if _newclass:
        ran_time = _swig_property(_sim_services.IPPythonEvent_ran_time_get, _sim_services.IPPythonEvent_ran_time_set)
    __swig_setmethods__["condition_list"] = _sim_services.IPPythonEvent_condition_list_set
    __swig_getmethods__["condition_list"] = _sim_services.IPPythonEvent_condition_list_get
    if _newclass:
        condition_list = _swig_property(_sim_services.IPPythonEvent_condition_list_get, _sim_services.IPPythonEvent_condition_list_set)
    __swig_setmethods__["action_list"] = _sim_services.IPPythonEvent_action_list_set
    __swig_getmethods__["action_list"] = _sim_services.IPPythonEvent_action_list_get
    if _newclass:
        action_list = _swig_property(_sim_services.IPPythonEvent_action_list_get, _sim_services.IPPythonEvent_action_list_set)

    def __init__(self, *args):
        this = _sim_services.new_IPPythonEvent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_IPPythonEvent
    __del__ = lambda self: None

    def condition_all(self, *args):
        return _sim_services.IPPythonEvent_condition_all(self, *args)

    def condition_any(self, *args):
        return _sim_services.IPPythonEvent_condition_any(self, *args)

    def manual_on(self, *args):
        return _sim_services.IPPythonEvent_manual_on(self, *args)

    def manual_fire(self, *args):
        return _sim_services.IPPythonEvent_manual_fire(self, *args)

    def manual_off(self, *args):
        return _sim_services.IPPythonEvent_manual_off(self, *args)

    def manual_done(self, *args):
        return _sim_services.IPPythonEvent_manual_done(self, *args)
    __swig_getmethods__["set_event_info_msg_on"] = lambda x: _sim_services.IPPythonEvent_set_event_info_msg_on
    if _newclass:
        set_event_info_msg_on = staticmethod(_sim_services.IPPythonEvent_set_event_info_msg_on)
    __swig_getmethods__["set_event_info_msg_off"] = lambda x: _sim_services.IPPythonEvent_set_event_info_msg_off
    if _newclass:
        set_event_info_msg_off = staticmethod(_sim_services.IPPythonEvent_set_event_info_msg_off)

    def restart(self, *args):
        return _sim_services.IPPythonEvent_restart(self, *args)

    def condition(self, *args):
        return _sim_services.IPPythonEvent_condition(self, *args)

    def condition_var(self, *args):
        return _sim_services.IPPythonEvent_condition_var(self, *args)

    def condition_job(self, *args):
        return _sim_services.IPPythonEvent_condition_job(self, *args)

    def condition_hold_on(self, *args):
        return _sim_services.IPPythonEvent_condition_hold_on(self, *args)

    def condition_hold_off(self, *args):
        return _sim_services.IPPythonEvent_condition_hold_off(self, *args)

    def condition_enable(self, *args):
        return _sim_services.IPPythonEvent_condition_enable(self, *args)

    def condition_disable(self, *args):
        return _sim_services.IPPythonEvent_condition_disable(self, *args)

    def condition_fired(self, *args):
        return _sim_services.IPPythonEvent_condition_fired(self, *args)

    def condition_fired_count(self, *args):
        return _sim_services.IPPythonEvent_condition_fired_count(self, *args)

    def condition_fired_time(self, *args):
        return _sim_services.IPPythonEvent_condition_fired_time(self, *args)

    def condition_string(self, *args):
        return _sim_services.IPPythonEvent_condition_string(self, *args)

    def action(self, *args):
        return _sim_services.IPPythonEvent_action(self, *args)

    def action_job(self, *args):
        return _sim_services.IPPythonEvent_action_job(self, *args)

    def action_job_on(self, *args):
        return _sim_services.IPPythonEvent_action_job_on(self, *args)

    def action_job_off(self, *args):
        return _sim_services.IPPythonEvent_action_job_off(self, *args)

    def action_enable(self, *args):
        return _sim_services.IPPythonEvent_action_enable(self, *args)

    def action_disable(self, *args):
        return _sim_services.IPPythonEvent_action_disable(self, *args)

    def action_ran(self, *args):
        return _sim_services.IPPythonEvent_action_ran(self, *args)

    def action_ran_count(self, *args):
        return _sim_services.IPPythonEvent_action_ran_count(self, *args)

    def action_ran_time(self, *args):
        return _sim_services.IPPythonEvent_action_ran_time(self, *args)

    def process(self, *args):
        return _sim_services.IPPythonEvent_process(self, *args)

    def process_user_event(self, *args):
        return _sim_services.IPPythonEvent_process_user_event(self, *args)

    def add(self, *args):
        return _sim_services.IPPythonEvent_add(self, *args)

    def remove(self, *args):
        return _sim_services.IPPythonEvent_remove(self, *args)
    __swig_getmethods__["set_python_processor"] = lambda x: _sim_services.IPPythonEvent_set_python_processor
    if _newclass:
        set_python_processor = staticmethod(_sim_services.IPPythonEvent_set_python_processor)
    __swig_getmethods__["set_mtv"] = lambda x: _sim_services.IPPythonEvent_set_mtv
    if _newclass:
        set_mtv = staticmethod(_sim_services.IPPythonEvent_set_mtv)

    def __getitem__(self, *args):
        return _sim_services.IPPythonEvent___getitem__(self, *args)

    def __len__(self, *args):
        return _sim_services.IPPythonEvent___len__(self, *args)
IPPythonEvent_swigregister = _sim_services.IPPythonEvent_swigregister
IPPythonEvent_swigregister(IPPythonEvent)

def IPPythonEvent_set_event_info_msg_on(*args):
    return _sim_services.IPPythonEvent_set_event_info_msg_on(*args)
IPPythonEvent_set_event_info_msg_on = _sim_services.IPPythonEvent_set_event_info_msg_on

def IPPythonEvent_set_event_info_msg_off(*args):
    return _sim_services.IPPythonEvent_set_event_info_msg_off(*args)
IPPythonEvent_set_event_info_msg_off = _sim_services.IPPythonEvent_set_event_info_msg_off

def IPPythonEvent_set_python_processor(*args):
    return _sim_services.IPPythonEvent_set_python_processor(*args)
IPPythonEvent_set_python_processor = _sim_services.IPPythonEvent_set_python_processor

def IPPythonEvent_set_mtv(*args):
    return _sim_services.IPPythonEvent_set_mtv(*args)
IPPythonEvent_set_mtv = _sim_services.IPPythonEvent_set_mtv


def ippython_new_event(*args):
    return _sim_services.ippython_new_event(*args)
ippython_new_event = _sim_services.ippython_new_event

def ippython_delete_event(*args):
    return _sim_services.ippython_delete_event(*args)
ippython_delete_event = _sim_services.ippython_delete_event

def ippython_add_event(*args):
    return _sim_services.ippython_add_event(*args)
ippython_add_event = _sim_services.ippython_add_event

def ippython_add_event_before(*args):
    return _sim_services.ippython_add_event_before(*args)
ippython_add_event_before = _sim_services.ippython_add_event_before

def ippython_add_event_after(*args):
    return _sim_services.ippython_add_event_after(*args)
ippython_add_event_after = _sim_services.ippython_add_event_after

def ippython_add_read(*args):
    return _sim_services.ippython_add_read(*args)
ippython_add_read = _sim_services.ippython_add_read

def ippython_manual_on(*args):
    return _sim_services.ippython_manual_on(*args)
ippython_manual_on = _sim_services.ippython_manual_on

def ippython_manual_fire(*args):
    return _sim_services.ippython_manual_fire(*args)
ippython_manual_fire = _sim_services.ippython_manual_fire

def ippython_manual_off(*args):
    return _sim_services.ippython_manual_off(*args)
ippython_manual_off = _sim_services.ippython_manual_off

def ippython_manual_done(*args):
    return _sim_services.ippython_manual_done(*args)
ippython_manual_done = _sim_services.ippython_manual_done

def castAsTrick__IPPythonEvent(*args):
    return _sim_services.castAsTrick__IPPythonEvent(*args)
castAsTrick__IPPythonEvent = _sim_services.castAsTrick__IPPythonEvent
class MTV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MTV, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MTV(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["dummy_event"] = _sim_services.MTV_dummy_event_set
    __swig_getmethods__["dummy_event"] = _sim_services.MTV_dummy_event_get
    if _newclass:
        dummy_event = _swig_property(_sim_services.MTV_dummy_event_get, _sim_services.MTV_dummy_event_set)
    __swig_setmethods__["mtv_list"] = _sim_services.MTV_mtv_list_set
    __swig_getmethods__["mtv_list"] = _sim_services.MTV_mtv_list_get
    if _newclass:
        mtv_list = _swig_property(_sim_services.MTV_mtv_list_get, _sim_services.MTV_mtv_list_set)
    __swig_setmethods__["mtv_count"] = _sim_services.MTV_mtv_count_set
    __swig_getmethods__["mtv_count"] = _sim_services.MTV_mtv_count_get
    if _newclass:
        mtv_count = _swig_property(_sim_services.MTV_mtv_count_get, _sim_services.MTV_mtv_count_set)
    __swig_setmethods__["mtv_update_ticker"] = _sim_services.MTV_mtv_update_ticker_set
    __swig_getmethods__["mtv_update_ticker"] = _sim_services.MTV_mtv_update_ticker_get
    if _newclass:
        mtv_update_ticker = _swig_property(_sim_services.MTV_mtv_update_ticker_get, _sim_services.MTV_mtv_update_ticker_set)

    def add_event(self, *args):
        return _sim_services.MTV_add_event(self, *args)

    def delete_event(self, *args):
        return _sim_services.MTV_delete_event(self, *args)

    def get_event(self, *args):
        return _sim_services.MTV_get_event(self, *args)

    def send_event_data(self, *args):
        return _sim_services.MTV_send_event_data(self, *args)
    __swig_destroy__ = _sim_services.delete_MTV
    __del__ = lambda self: None
MTV_swigregister = _sim_services.MTV_swigregister
MTV_swigregister(MTV)


def mtv_add_event(*args):
    return _sim_services.mtv_add_event(*args)
mtv_add_event = _sim_services.mtv_add_event

def mtv_delete_event(*args):
    return _sim_services.mtv_delete_event(*args)
mtv_delete_event = _sim_services.mtv_delete_event

def mtv_get_event(*args):
    return _sim_services.mtv_get_event(*args)
mtv_get_event = _sim_services.mtv_get_event

def mtv_send_event_data(*args):
    return _sim_services.mtv_send_event_data(*args)
mtv_send_event_data = _sim_services.mtv_send_event_data
class EventInstrument(InstrumentBase):
    __swig_setmethods__ = {}
    for _s in [InstrumentBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventInstrument, name, value)
    __swig_getmethods__ = {}
    for _s in [InstrumentBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventInstrument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_EventInstrument(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def call(self, *args):
        return _sim_services.EventInstrument_call(self, *args)

    def get_event(self, *args):
        return _sim_services.EventInstrument_get_event(self, *args)
    __swig_destroy__ = _sim_services.delete_EventInstrument
    __del__ = lambda self: None
EventInstrument_swigregister = _sim_services.EventInstrument_swigregister
EventInstrument_swigregister(EventInstrument)

class EventProcessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventProcessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventProcessor, name)
    __repr__ = _swig_repr

    def set_process_event_job(self, *args):
        return _sim_services.EventProcessor_set_process_event_job(self, *args)

    def add_event(self, *args):
        return _sim_services.EventProcessor_add_event(self, *args)

    def remove_event(self, *args):
        return _sim_services.EventProcessor_remove_event(self, *args)

    def add_pending_events(self, *args):
        return _sim_services.EventProcessor_add_pending_events(self, *args)

    def process_event(self, *args):
        return _sim_services.EventProcessor_process_event(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.EventProcessor_preload_checkpoint(self, *args)

    def __init__(self):
        this = _sim_services.new_EventProcessor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_EventProcessor
    __del__ = lambda self: None
EventProcessor_swigregister = _sim_services.EventProcessor_swigregister
EventProcessor_swigregister(EventProcessor)

class EventManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventManager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_EventManager(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_event(self, *args):
        return _sim_services.EventManager_get_event(self, *args)

    def add_event(self, *args):
        return _sim_services.EventManager_add_event(self, *args)

    def add_event_before(self, *args):
        return _sim_services.EventManager_add_event_before(self, *args)

    def add_event_after(self, *args):
        return _sim_services.EventManager_add_event_after(self, *args)

    def activate_event(self, *args):
        return _sim_services.EventManager_activate_event(self, *args)

    def deactivate_event(self, *args):
        return _sim_services.EventManager_deactivate_event(self, *args)

    def remove_event(self, *args):
        return _sim_services.EventManager_remove_event(self, *args)

    def time_tic_changed(self, *args):
        return _sim_services.EventManager_time_tic_changed(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.EventManager_preload_checkpoint(self, *args)

    def restart(self, *args):
        return _sim_services.EventManager_restart(self, *args)

    def add_event_processor(self, *args):
        return _sim_services.EventManager_add_event_processor(self, *args)
    __swig_destroy__ = _sim_services.delete_EventManager
    __del__ = lambda self: None
EventManager_swigregister = _sim_services.EventManager_swigregister
EventManager_swigregister(EventManager)


def event_manager_get_event(*args):
    return _sim_services.event_manager_get_event(*args)
event_manager_get_event = _sim_services.event_manager_get_event

def event_manager_add_event(*args):
    return _sim_services.event_manager_add_event(*args)
event_manager_add_event = _sim_services.event_manager_add_event

def event_manager_add_event_before(*args):
    return _sim_services.event_manager_add_event_before(*args)
event_manager_add_event_before = _sim_services.event_manager_add_event_before

def event_manager_add_event_after(*args):
    return _sim_services.event_manager_add_event_after(*args)
event_manager_add_event_after = _sim_services.event_manager_add_event_after

def event_manager_remove_event(*args):
    return _sim_services.event_manager_remove_event(*args)
event_manager_remove_event = _sim_services.event_manager_remove_event
class JITEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JITEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JITEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_JITEvent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def process(self, *args):
        return _sim_services.JITEvent_process(self, *args)

    def add(self, *args):
        return _sim_services.JITEvent_add(self, *args)

    def remove(self, *args):
        return _sim_services.JITEvent_remove(self, *args)

    def restart(self, *args):
        return _sim_services.JITEvent_restart(self, *args)
    __swig_setmethods__["func_name"] = _sim_services.JITEvent_func_name_set
    __swig_getmethods__["func_name"] = _sim_services.JITEvent_func_name_get
    if _newclass:
        func_name = _swig_property(_sim_services.JITEvent_func_name_get, _sim_services.JITEvent_func_name_set)
    __swig_destroy__ = _sim_services.delete_JITEvent
    __del__ = lambda self: None
JITEvent_swigregister = _sim_services.JITEvent_swigregister
JITEvent_swigregister(JITEvent)

class JITLibInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JITLibInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JITLibInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_JITLibInfo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["library_name"] = _sim_services.JITLibInfo_library_name_set
    __swig_getmethods__["library_name"] = _sim_services.JITLibInfo_library_name_get
    if _newclass:
        library_name = _swig_property(_sim_services.JITLibInfo_library_name_get, _sim_services.JITLibInfo_library_name_set)
    __swig_setmethods__["handle"] = _sim_services.JITLibInfo_handle_set
    __swig_getmethods__["handle"] = _sim_services.JITLibInfo_handle_get
    if _newclass:
        handle = _swig_property(_sim_services.JITLibInfo_handle_get, _sim_services.JITLibInfo_handle_set)

    def find_symbol(self, *args):
        return _sim_services.JITLibInfo_find_symbol(self, *args)
    __swig_destroy__ = _sim_services.delete_JITLibInfo
    __del__ = lambda self: None
JITLibInfo_swigregister = _sim_services.JITLibInfo_swigregister
JITLibInfo_swigregister(JITLibInfo)

class JITInputFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JITInputFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JITInputFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_JITInputFile(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def process_sim_args(self, *args):
        return _sim_services.JITInputFile_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.JITInputFile_init(self, *args)

    def compile(self, *args):
        return _sim_services.JITInputFile_compile(self, *args)

    def run(self, *args):
        return _sim_services.JITInputFile_run(self, *args)

    def compile_and_run(self, *args):
        return _sim_services.JITInputFile_compile_and_run(self, *args)

    def add_library(self, *args):
        return _sim_services.JITInputFile_add_library(self, *args)

    def find_symbol(self, *args):
        return _sim_services.JITInputFile_find_symbol(self, *args)
    __swig_destroy__ = _sim_services.delete_JITInputFile
    __del__ = lambda self: None
JITInputFile_swigregister = _sim_services.JITInputFile_swigregister
JITInputFile_swigregister(JITInputFile)


def jit_compile(*args):
    return _sim_services.jit_compile(*args)
jit_compile = _sim_services.jit_compile

def jit_run(*args):
    return _sim_services.jit_run(*args)
jit_run = _sim_services.jit_run

def jit_compile_and_run(*args):
    return _sim_services.jit_compile_and_run(*args)
jit_compile_and_run = _sim_services.jit_compile_and_run

def jit_add_library(*args):
    return _sim_services.jit_add_library(*args)
jit_add_library = _sim_services.jit_add_library

def jit_find_symbol(*args):
    return _sim_services.jit_find_symbol(*args)
jit_find_symbol = _sim_services.jit_find_symbol

def jit_add_read(*args):
    return _sim_services.jit_add_read(*args)
jit_add_read = _sim_services.jit_add_read

def jit_add_event(*args):
    return _sim_services.jit_add_event(*args)
jit_add_event = _sim_services.jit_add_event

def jit_add_event_before(*args):
    return _sim_services.jit_add_event_before(*args)
jit_add_event_before = _sim_services.jit_add_event_before

def jit_add_event_after(*args):
    return _sim_services.jit_add_event_after(*args)
jit_add_event_after = _sim_services.jit_add_event_after

_sim_services.TRICK_ERROR_ALL_swigconstant(_sim_services)
TRICK_ERROR_ALL = _sim_services.TRICK_ERROR_ALL

_sim_services.TRICK_ERROR_TRIVIAL_swigconstant(_sim_services)
TRICK_ERROR_TRIVIAL = _sim_services.TRICK_ERROR_TRIVIAL

_sim_services.TRICK_ERROR_ADVISORY_swigconstant(_sim_services)
TRICK_ERROR_ADVISORY = _sim_services.TRICK_ERROR_ADVISORY

_sim_services.TRICK_ERROR_CAUTION_swigconstant(_sim_services)
TRICK_ERROR_CAUTION = _sim_services.TRICK_ERROR_CAUTION

_sim_services.TRICK_ERROR_WARNING_swigconstant(_sim_services)
TRICK_ERROR_WARNING = _sim_services.TRICK_ERROR_WARNING

_sim_services.TRICK_ERROR_ALERT_swigconstant(_sim_services)
TRICK_ERROR_ALERT = _sim_services.TRICK_ERROR_ALERT

_sim_services.TRICK_ERROR_FATAL_swigconstant(_sim_services)
TRICK_ERROR_FATAL = _sim_services.TRICK_ERROR_FATAL

_sim_services.TRICK_ERROR_ABORT_swigconstant(_sim_services)
TRICK_ERROR_ABORT = _sim_services.TRICK_ERROR_ABORT

_sim_services.TRICK_ERROR_SILENT_swigconstant(_sim_services)
TRICK_ERROR_SILENT = _sim_services.TRICK_ERROR_SILENT
class TrickErrorHndlr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrickErrorHndlr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrickErrorHndlr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_func"] = _sim_services.TrickErrorHndlr_error_func_set
    __swig_getmethods__["error_func"] = _sim_services.TrickErrorHndlr_error_func_get
    if _newclass:
        error_func = _swig_property(_sim_services.TrickErrorHndlr_error_func_get, _sim_services.TrickErrorHndlr_error_func_set)
    __swig_setmethods__["data_ptr"] = _sim_services.TrickErrorHndlr_data_ptr_set
    __swig_getmethods__["data_ptr"] = _sim_services.TrickErrorHndlr_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_sim_services.TrickErrorHndlr_data_ptr_get, _sim_services.TrickErrorHndlr_data_ptr_set)
    __swig_setmethods__["report_level"] = _sim_services.TrickErrorHndlr_report_level_set
    __swig_getmethods__["report_level"] = _sim_services.TrickErrorHndlr_report_level_get
    if _newclass:
        report_level = _swig_property(_sim_services.TrickErrorHndlr_report_level_get, _sim_services.TrickErrorHndlr_report_level_set)
    __swig_setmethods__["use_send_hs"] = _sim_services.TrickErrorHndlr_use_send_hs_set
    __swig_getmethods__["use_send_hs"] = _sim_services.TrickErrorHndlr_use_send_hs_get
    if _newclass:
        use_send_hs = _swig_property(_sim_services.TrickErrorHndlr_use_send_hs_get, _sim_services.TrickErrorHndlr_use_send_hs_set)
    __swig_setmethods__["report_stream"] = _sim_services.TrickErrorHndlr_report_stream_set
    __swig_getmethods__["report_stream"] = _sim_services.TrickErrorHndlr_report_stream_get
    if _newclass:
        report_stream = _swig_property(_sim_services.TrickErrorHndlr_report_stream_get, _sim_services.TrickErrorHndlr_report_stream_set)

    def __init__(self):
        this = _sim_services.new_TrickErrorHndlr()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TrickErrorHndlr
    __del__ = lambda self: None
TrickErrorHndlr_swigregister = _sim_services.TrickErrorHndlr_swigregister
TrickErrorHndlr_swigregister(TrickErrorHndlr)


def trick_error_func_default(*args):
    return _sim_services.trick_error_func_default(*args)
trick_error_func_default = _sim_services.trick_error_func_default

def trick_error_init(*args):
    return _sim_services.trick_error_init(*args)
trick_error_init = _sim_services.trick_error_init

def trick_error_shutdown(*args):
    return _sim_services.trick_error_shutdown(*args)
trick_error_shutdown = _sim_services.trick_error_shutdown

def trick_error_set_func(*args):
    return _sim_services.trick_error_set_func(*args)
trick_error_set_func = _sim_services.trick_error_set_func

def trick_error_set_data(*args):
    return _sim_services.trick_error_set_data(*args)
trick_error_set_data = _sim_services.trick_error_set_data

def trick_error_set_report_level(*args):
    return _sim_services.trick_error_set_report_level(*args)
trick_error_set_report_level = _sim_services.trick_error_set_report_level

def trick_error_set_stream(*args):
    return _sim_services.trick_error_set_stream(*args)
trick_error_set_stream = _sim_services.trick_error_set_stream

def trick_error_set_all_streams(*args):
    return _sim_services.trick_error_set_all_streams(*args)
trick_error_set_all_streams = _sim_services.trick_error_set_all_streams

def trick_error_copy_streams(*args):
    return _sim_services.trick_error_copy_streams(*args)
trick_error_copy_streams = _sim_services.trick_error_copy_streams

def trick_error_set_send_hs_flag(*args):
    return _sim_services.trick_error_set_send_hs_flag(*args)
trick_error_set_send_hs_flag = _sim_services.trick_error_set_send_hs_flag

def trick_error_set_all_send_hs_flags(*args):
    return _sim_services.trick_error_set_all_send_hs_flags(*args)
trick_error_set_all_send_hs_flags = _sim_services.trick_error_set_all_send_hs_flags

def trick_error_copy_send_hs_flags(*args):
    return _sim_services.trick_error_copy_send_hs_flags(*args)
trick_error_copy_send_hs_flags = _sim_services.trick_error_copy_send_hs_flags

def trick_error_get_func(*args):
    return _sim_services.trick_error_get_func(*args)
trick_error_get_func = _sim_services.trick_error_get_func

def trick_error_get_data(*args):
    return _sim_services.trick_error_get_data(*args)
trick_error_get_data = _sim_services.trick_error_get_data

def trick_error_get_report_level(*args):
    return _sim_services.trick_error_get_report_level(*args)
trick_error_get_report_level = _sim_services.trick_error_get_report_level

def trick_error_get_stream(*args):
    return _sim_services.trick_error_get_stream(*args)
trick_error_get_stream = _sim_services.trick_error_get_stream

def trick_error_get_curr_stream(*args):
    return _sim_services.trick_error_get_curr_stream(*args)
trick_error_get_curr_stream = _sim_services.trick_error_get_curr_stream

def trick_error_get_send_hs_flag(*args):
    return _sim_services.trick_error_get_send_hs_flag(*args)
trick_error_get_send_hs_flag = _sim_services.trick_error_get_send_hs_flag

def trick_error_get_curr_send_hs_flag(*args):
    return _sim_services.trick_error_get_curr_send_hs_flag(*args)
trick_error_get_curr_send_hs_flag = _sim_services.trick_error_get_curr_send_hs_flag

def trick_error_report(*args):
    return _sim_services.trick_error_report(*args)
trick_error_report = _sim_services.trick_error_report

_sim_services.TC_NOSIGNAL_swigconstant(_sim_services)
TC_NOSIGNAL = _sim_services.TC_NOSIGNAL

_sim_services.TC_SUCCESS_swigconstant(_sim_services)
TC_SUCCESS = _sim_services.TC_SUCCESS

_sim_services.TC_COULD_NOT_OPEN_SOCKET_swigconstant(_sim_services)
TC_COULD_NOT_OPEN_SOCKET = _sim_services.TC_COULD_NOT_OPEN_SOCKET

_sim_services.TC_COULD_NOT_BIND_SOCKET_swigconstant(_sim_services)
TC_COULD_NOT_BIND_SOCKET = _sim_services.TC_COULD_NOT_BIND_SOCKET

_sim_services.TC_COULD_NOT_LISTEN_SOCKET_swigconstant(_sim_services)
TC_COULD_NOT_LISTEN_SOCKET = _sim_services.TC_COULD_NOT_LISTEN_SOCKET

_sim_services.TC_COULD_NOT_ACCEPT_swigconstant(_sim_services)
TC_COULD_NOT_ACCEPT = _sim_services.TC_COULD_NOT_ACCEPT

_sim_services.TC_DRIVER_NOT_INSTALLED_swigconstant(_sim_services)
TC_DRIVER_NOT_INSTALLED = _sim_services.TC_DRIVER_NOT_INSTALLED

_sim_services.TC_DRIVER_ALREADY_INSTALLED_swigconstant(_sim_services)
TC_DRIVER_ALREADY_INSTALLED = _sim_services.TC_DRIVER_ALREADY_INSTALLED

_sim_services.TC_DRIVER_IS_NULL_swigconstant(_sim_services)
TC_DRIVER_IS_NULL = _sim_services.TC_DRIVER_IS_NULL

_sim_services.TC_HOST_NOT_FOUND_swigconstant(_sim_services)
TC_HOST_NOT_FOUND = _sim_services.TC_HOST_NOT_FOUND

_sim_services.TC_COULD_NOT_CONNECT_swigconstant(_sim_services)
TC_COULD_NOT_CONNECT = _sim_services.TC_COULD_NOT_CONNECT

_sim_services.TC_RESOURCE_EXCEEDED_swigconstant(_sim_services)
TC_RESOURCE_EXCEEDED = _sim_services.TC_RESOURCE_EXCEEDED

_sim_services.TC_DRIVER_NOT_FOUND_swigconstant(_sim_services)
TC_DRIVER_NOT_FOUND = _sim_services.TC_DRIVER_NOT_FOUND

_sim_services.TC_DRIVER_ALREADY_DISCONNECTED_swigconstant(_sim_services)
TC_DRIVER_ALREADY_DISCONNECTED = _sim_services.TC_DRIVER_ALREADY_DISCONNECTED

_sim_services.TC_CONN_DISABLED_swigconstant(_sim_services)
TC_CONN_DISABLED = _sim_services.TC_CONN_DISABLED

_sim_services.TC_COULD_NOT_SET_TTL_swigconstant(_sim_services)
TC_COULD_NOT_SET_TTL = _sim_services.TC_COULD_NOT_SET_TTL

_sim_services.TC_COULD_NOT_ADD_MEMBERSHIP_swigconstant(_sim_services)
TC_COULD_NOT_ADD_MEMBERSHIP = _sim_services.TC_COULD_NOT_ADD_MEMBERSHIP

_sim_services.TC_EWOULDBLOCK_swigconstant(_sim_services)
TC_EWOULDBLOCK = _sim_services.TC_EWOULDBLOCK

_sim_services.TC_READWRITE_TIMEOUT_swigconstant(_sim_services)
TC_READWRITE_TIMEOUT = _sim_services.TC_READWRITE_TIMEOUT

_sim_services.TC_BROKEN_PIPE_swigconstant(_sim_services)
TC_BROKEN_PIPE = _sim_services.TC_BROKEN_PIPE

_sim_services.MAX_BLOCKIO_TIMEOUT_LIMIT_swigconstant(_sim_services)
MAX_BLOCKIO_TIMEOUT_LIMIT = _sim_services.MAX_BLOCKIO_TIMEOUT_LIMIT

_sim_services.TRICKCOMM_SOCKET_PROTO_swigconstant(_sim_services)
TRICKCOMM_SOCKET_PROTO = _sim_services.TRICKCOMM_SOCKET_PROTO

_sim_services.TRICKCOMM_INVALID_SOCKET_swigconstant(_sim_services)
TRICKCOMM_INVALID_SOCKET = _sim_services.TRICKCOMM_INVALID_SOCKET

_sim_services.TC_TAG_LENGTH_swigconstant(_sim_services)
TC_TAG_LENGTH = _sim_services.TC_TAG_LENGTH

_sim_services.TC_BYTE_ORDER_NDX_swigconstant(_sim_services)
TC_BYTE_ORDER_NDX = _sim_services.TC_BYTE_ORDER_NDX

_sim_services.TC_LONG_SIZE_NDX_swigconstant(_sim_services)
TC_LONG_SIZE_NDX = _sim_services.TC_LONG_SIZE_NDX

_sim_services.TC_BYTE_INFO_LENGTH_swigconstant(_sim_services)
TC_BYTE_INFO_LENGTH = _sim_services.TC_BYTE_INFO_LENGTH

_sim_services.TC_MULT_PORT_swigconstant(_sim_services)
TC_MULT_PORT = _sim_services.TC_MULT_PORT

_sim_services.TC_MULT_GROUP_swigconstant(_sim_services)
TC_MULT_GROUP = _sim_services.TC_MULT_GROUP

_sim_services.TC_COMM_FALSE_swigconstant(_sim_services)
TC_COMM_FALSE = _sim_services.TC_COMM_FALSE

_sim_services.TC_COMM_TRUE_swigconstant(_sim_services)
TC_COMM_TRUE = _sim_services.TC_COMM_TRUE

_sim_services.TC_COMM_NO_swigconstant(_sim_services)
TC_COMM_NO = _sim_services.TC_COMM_NO

_sim_services.TC_COMM_YES_swigconstant(_sim_services)
TC_COMM_YES = _sim_services.TC_COMM_YES

_sim_services.TC_COMM_DISABLED_swigconstant(_sim_services)
TC_COMM_DISABLED = _sim_services.TC_COMM_DISABLED

_sim_services.TC_COMM_ENABLED_swigconstant(_sim_services)
TC_COMM_ENABLED = _sim_services.TC_COMM_ENABLED

_sim_services.TC_COMM_BLOCKIO_swigconstant(_sim_services)
TC_COMM_BLOCKIO = _sim_services.TC_COMM_BLOCKIO

_sim_services.TC_COMM_NOBLOCKIO_swigconstant(_sim_services)
TC_COMM_NOBLOCKIO = _sim_services.TC_COMM_NOBLOCKIO

_sim_services.TC_COMM_TIMED_BLOCKIO_swigconstant(_sim_services)
TC_COMM_TIMED_BLOCKIO = _sim_services.TC_COMM_TIMED_BLOCKIO

_sim_services.TC_COMM_ALL_OR_NOTHING_swigconstant(_sim_services)
TC_COMM_ALL_OR_NOTHING = _sim_services.TC_COMM_ALL_OR_NOTHING
class TCDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCDevice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["socket"] = _sim_services.TCDevice_socket_set
    __swig_getmethods__["socket"] = _sim_services.TCDevice_socket_get
    if _newclass:
        socket = _swig_property(_sim_services.TCDevice_socket_get, _sim_services.TCDevice_socket_set)
    __swig_setmethods__["socket_type"] = _sim_services.TCDevice_socket_type_set
    __swig_getmethods__["socket_type"] = _sim_services.TCDevice_socket_type_get
    if _newclass:
        socket_type = _swig_property(_sim_services.TCDevice_socket_type_get, _sim_services.TCDevice_socket_type_set)
    __swig_setmethods__["disabled"] = _sim_services.TCDevice_disabled_set
    __swig_getmethods__["disabled"] = _sim_services.TCDevice_disabled_get
    if _newclass:
        disabled = _swig_property(_sim_services.TCDevice_disabled_get, _sim_services.TCDevice_disabled_set)
    __swig_setmethods__["disable_handshaking"] = _sim_services.TCDevice_disable_handshaking_set
    __swig_getmethods__["disable_handshaking"] = _sim_services.TCDevice_disable_handshaking_get
    if _newclass:
        disable_handshaking = _swig_property(_sim_services.TCDevice_disable_handshaking_get, _sim_services.TCDevice_disable_handshaking_set)
    __swig_setmethods__["dmtcp_use_real"] = _sim_services.TCDevice_dmtcp_use_real_set
    __swig_getmethods__["dmtcp_use_real"] = _sim_services.TCDevice_dmtcp_use_real_get
    if _newclass:
        dmtcp_use_real = _swig_property(_sim_services.TCDevice_dmtcp_use_real_get, _sim_services.TCDevice_dmtcp_use_real_set)
    __swig_setmethods__["blockio_limit"] = _sim_services.TCDevice_blockio_limit_set
    __swig_getmethods__["blockio_limit"] = _sim_services.TCDevice_blockio_limit_get
    if _newclass:
        blockio_limit = _swig_property(_sim_services.TCDevice_blockio_limit_get, _sim_services.TCDevice_blockio_limit_set)
    __swig_setmethods__["blockio_type"] = _sim_services.TCDevice_blockio_type_set
    __swig_getmethods__["blockio_type"] = _sim_services.TCDevice_blockio_type_get
    if _newclass:
        blockio_type = _swig_property(_sim_services.TCDevice_blockio_type_get, _sim_services.TCDevice_blockio_type_set)
    __swig_setmethods__["byte_info"] = _sim_services.TCDevice_byte_info_set
    __swig_getmethods__["byte_info"] = _sim_services.TCDevice_byte_info_get
    if _newclass:
        byte_info = _swig_property(_sim_services.TCDevice_byte_info_get, _sim_services.TCDevice_byte_info_set)
    __swig_setmethods__["client_id"] = _sim_services.TCDevice_client_id_set
    __swig_getmethods__["client_id"] = _sim_services.TCDevice_client_id_get
    if _newclass:
        client_id = _swig_property(_sim_services.TCDevice_client_id_get, _sim_services.TCDevice_client_id_set)
    __swig_setmethods__["client_tag"] = _sim_services.TCDevice_client_tag_set
    __swig_getmethods__["client_tag"] = _sim_services.TCDevice_client_tag_get
    if _newclass:
        client_tag = _swig_property(_sim_services.TCDevice_client_tag_get, _sim_services.TCDevice_client_tag_set)
    __swig_setmethods__["client_addr"] = _sim_services.TCDevice_client_addr_set
    __swig_getmethods__["client_addr"] = _sim_services.TCDevice_client_addr_get
    if _newclass:
        client_addr = _swig_property(_sim_services.TCDevice_client_addr_get, _sim_services.TCDevice_client_addr_set)
    __swig_setmethods__["error_handler"] = _sim_services.TCDevice_error_handler_set
    __swig_getmethods__["error_handler"] = _sim_services.TCDevice_error_handler_get
    if _newclass:
        error_handler = _swig_property(_sim_services.TCDevice_error_handler_get, _sim_services.TCDevice_error_handler_set)
    __swig_setmethods__["hostname"] = _sim_services.TCDevice_hostname_set
    __swig_getmethods__["hostname"] = _sim_services.TCDevice_hostname_get
    if _newclass:
        hostname = _swig_property(_sim_services.TCDevice_hostname_get, _sim_services.TCDevice_hostname_set)
    __swig_setmethods__["port"] = _sim_services.TCDevice_port_set
    __swig_getmethods__["port"] = _sim_services.TCDevice_port_get
    if _newclass:
        port = _swig_property(_sim_services.TCDevice_port_get, _sim_services.TCDevice_port_set)
    __swig_setmethods__["remoteServAddr"] = _sim_services.TCDevice_remoteServAddr_set
    __swig_getmethods__["remoteServAddr"] = _sim_services.TCDevice_remoteServAddr_get
    if _newclass:
        remoteServAddr = _swig_property(_sim_services.TCDevice_remoteServAddr_get, _sim_services.TCDevice_remoteServAddr_set)
    __swig_setmethods__["mcast_group"] = _sim_services.TCDevice_mcast_group_set
    __swig_getmethods__["mcast_group"] = _sim_services.TCDevice_mcast_group_get
    if _newclass:
        mcast_group = _swig_property(_sim_services.TCDevice_mcast_group_get, _sim_services.TCDevice_mcast_group_set)
    __swig_setmethods__["ttl"] = _sim_services.TCDevice_ttl_set
    __swig_getmethods__["ttl"] = _sim_services.TCDevice_ttl_get
    if _newclass:
        ttl = _swig_property(_sim_services.TCDevice_ttl_get, _sim_services.TCDevice_ttl_set)
    __swig_setmethods__["cliAddr"] = _sim_services.TCDevice_cliAddr_set
    __swig_getmethods__["cliAddr"] = _sim_services.TCDevice_cliAddr_get
    if _newclass:
        cliAddr = _swig_property(_sim_services.TCDevice_cliAddr_get, _sim_services.TCDevice_cliAddr_set)

    def __init__(self):
        this = _sim_services.new_TCDevice()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TCDevice
    __del__ = lambda self: None
TCDevice_swigregister = _sim_services.TCDevice_swigregister
TCDevice_swigregister(TCDevice)

class SEND_ME(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEND_ME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SEND_ME, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _sim_services.SEND_ME_addr_set
    __swig_getmethods__["addr"] = _sim_services.SEND_ME_addr_get
    if _newclass:
        addr = _swig_property(_sim_services.SEND_ME_addr_get, _sim_services.SEND_ME_addr_set)
    __swig_setmethods__["port"] = _sim_services.SEND_ME_port_set
    __swig_getmethods__["port"] = _sim_services.SEND_ME_port_get
    if _newclass:
        port = _swig_property(_sim_services.SEND_ME_port_get, _sim_services.SEND_ME_port_set)
    __swig_setmethods__["pid"] = _sim_services.SEND_ME_pid_set
    __swig_getmethods__["pid"] = _sim_services.SEND_ME_pid_get
    if _newclass:
        pid = _swig_property(_sim_services.SEND_ME_pid_get, _sim_services.SEND_ME_pid_set)
    __swig_setmethods__["conn_initiated"] = _sim_services.SEND_ME_conn_initiated_set
    __swig_getmethods__["conn_initiated"] = _sim_services.SEND_ME_conn_initiated_get
    if _newclass:
        conn_initiated = _swig_property(_sim_services.SEND_ME_conn_initiated_get, _sim_services.SEND_ME_conn_initiated_set)
    __swig_setmethods__["disabled"] = _sim_services.SEND_ME_disabled_set
    __swig_getmethods__["disabled"] = _sim_services.SEND_ME_disabled_get
    if _newclass:
        disabled = _swig_property(_sim_services.SEND_ME_disabled_get, _sim_services.SEND_ME_disabled_set)
    __swig_setmethods__["my_tag"] = _sim_services.SEND_ME_my_tag_set
    __swig_getmethods__["my_tag"] = _sim_services.SEND_ME_my_tag_get
    if _newclass:
        my_tag = _swig_property(_sim_services.SEND_ME_my_tag_get, _sim_services.SEND_ME_my_tag_set)
    __swig_setmethods__["other_tag"] = _sim_services.SEND_ME_other_tag_set
    __swig_getmethods__["other_tag"] = _sim_services.SEND_ME_other_tag_get
    if _newclass:
        other_tag = _swig_property(_sim_services.SEND_ME_other_tag_get, _sim_services.SEND_ME_other_tag_set)

    def __init__(self):
        this = _sim_services.new_SEND_ME()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_SEND_ME
    __del__ = lambda self: None
SEND_ME_swigregister = _sim_services.SEND_ME_swigregister
SEND_ME_swigregister(SEND_ME)

class BC_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BC_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BC_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["send_me"] = _sim_services.BC_INFO_send_me_set
    __swig_getmethods__["send_me"] = _sim_services.BC_INFO_send_me_get
    if _newclass:
        send_me = _swig_property(_sim_services.BC_INFO_send_me_get, _sim_services.BC_INFO_send_me_set)
    __swig_setmethods__["device"] = _sim_services.BC_INFO_device_set
    __swig_getmethods__["device"] = _sim_services.BC_INFO_device_get
    if _newclass:
        device = _swig_property(_sim_services.BC_INFO_device_get, _sim_services.BC_INFO_device_set)
    __swig_setmethods__["addr"] = _sim_services.BC_INFO_addr_set
    __swig_getmethods__["addr"] = _sim_services.BC_INFO_addr_get
    if _newclass:
        addr = _swig_property(_sim_services.BC_INFO_addr_get, _sim_services.BC_INFO_addr_set)
    __swig_setmethods__["fd"] = _sim_services.BC_INFO_fd_set
    __swig_getmethods__["fd"] = _sim_services.BC_INFO_fd_get
    if _newclass:
        fd = _swig_property(_sim_services.BC_INFO_fd_get, _sim_services.BC_INFO_fd_set)

    def __init__(self):
        this = _sim_services.new_BC_INFO()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_BC_INFO
    __del__ = lambda self: None
BC_INFO_swigregister = _sim_services.BC_INFO_swigregister
BC_INFO_swigregister(BC_INFO)

class JSONVariableServer(ThreadBase):
    __swig_setmethods__ = {}
    for _s in [ThreadBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JSONVariableServer, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JSONVariableServer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_JSONVariableServer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_JSONVariableServer
    __del__ = lambda self: None
    __swig_setmethods__["enabled"] = _sim_services.JSONVariableServer_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.JSONVariableServer_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.JSONVariableServer_enabled_get, _sim_services.JSONVariableServer_enabled_set)

    def get_hostname(self, *args):
        return _sim_services.JSONVariableServer_get_hostname(self, *args)

    def get_port(self, *args):
        return _sim_services.JSONVariableServer_get_port(self, *args)

    def set_port(self, *args):
        return _sim_services.JSONVariableServer_set_port(self, *args)

    def set_source_address(self, *args):
        return _sim_services.JSONVariableServer_set_source_address(self, *args)

    def get_source_address(self, *args):
        return _sim_services.JSONVariableServer_get_source_address(self, *args)

    def init_listen_device(self, *args):
        return _sim_services.JSONVariableServer_init_listen_device(self, *args)

    def init(self, *args):
        return _sim_services.JSONVariableServer_init(self, *args)

    def check_and_move_listen_device(self, *args):
        return _sim_services.JSONVariableServer_check_and_move_listen_device(self, *args)

    def thread_body(self, *args):
        return _sim_services.JSONVariableServer_thread_body(self, *args)

    def restart(self, *args):
        return _sim_services.JSONVariableServer_restart(self, *args)

    def dump(self, *args):
        return _sim_services.JSONVariableServer_dump(self, *args)
JSONVariableServer_swigregister = _sim_services.JSONVariableServer_swigregister
JSONVariableServer_swigregister(JSONVariableServer)

class IntegrationManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationManager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_IntegrationManager(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def is_empty(self, *args):
        return _sim_services.IntegrationManager_is_empty(self, *args)

    def build_sim_object_info(self, *args):
        return _sim_services.IntegrationManager_build_sim_object_info(self, *args)

    def clear_sim_object_info(self, *args):
        return _sim_services.IntegrationManager_clear_sim_object_info(self, *args)

    def clear_integrated_by(self, *args):
        return _sim_services.IntegrationManager_clear_integrated_by(self, *args)

    def get_integrated_by(self, *args):
        return _sim_services.IntegrationManager_get_integrated_by(self, *args)

    def set_integrated_by(self, *args):
        return _sim_services.IntegrationManager_set_integrated_by(self, *args)

    def add_jobs_to_queue(self, *args):
        return _sim_services.IntegrationManager_add_jobs_to_queue(self, *args)

    def find_sim_object(self, *args):
        return _sim_services.IntegrationManager_find_sim_object(self, *args)
    __swig_destroy__ = _sim_services.delete_IntegrationManager
    __del__ = lambda self: None
IntegrationManager_swigregister = _sim_services.IntegrationManager_swigregister
IntegrationManager_swigregister(IntegrationManager)


_sim_services.Euler_swigconstant(_sim_services)
Euler = _sim_services.Euler

_sim_services.Euler_Cromer_swigconstant(_sim_services)
Euler_Cromer = _sim_services.Euler_Cromer

_sim_services.Nystrom_Lear_2_swigconstant(_sim_services)
Nystrom_Lear_2 = _sim_services.Nystrom_Lear_2

_sim_services.Runge_Kutta_2_swigconstant(_sim_services)
Runge_Kutta_2 = _sim_services.Runge_Kutta_2

_sim_services.Modified_Midpoint_4_swigconstant(_sim_services)
Modified_Midpoint_4 = _sim_services.Modified_Midpoint_4

_sim_services.Runge_Kutta_4_swigconstant(_sim_services)
Runge_Kutta_4 = _sim_services.Runge_Kutta_4

_sim_services.Runge_Kutta_Gill_4_swigconstant(_sim_services)
Runge_Kutta_Gill_4 = _sim_services.Runge_Kutta_Gill_4

_sim_services.Runge_Kutta_Fehlberg_45_swigconstant(_sim_services)
Runge_Kutta_Fehlberg_45 = _sim_services.Runge_Kutta_Fehlberg_45

_sim_services.Runge_Kutta_Fehlberg_78_swigconstant(_sim_services)
Runge_Kutta_Fehlberg_78 = _sim_services.Runge_Kutta_Fehlberg_78

_sim_services.ABM_Method_swigconstant(_sim_services)
ABM_Method = _sim_services.ABM_Method

_sim_services.User_Defined_swigconstant(_sim_services)
User_Defined = _sim_services.User_Defined
class Integrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Integrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Integrator
    __del__ = lambda self: None

    def initialize(self, *args):
        return _sim_services.Integrator_initialize(self, *args)

    def integrate(self, *args):
        return _sim_services.Integrator_integrate(self, *args)

    def integrate_1st_order_ode(self, *args):
        return _sim_services.Integrator_integrate_1st_order_ode(self, *args)

    def integrate_2nd_order_ode(self, *args):
        return _sim_services.Integrator_integrate_2nd_order_ode(self, *args)

    def state_in(self, *args):
        return _sim_services.Integrator_state_in(self, *args)

    def deriv_in(self, *args):
        return _sim_services.Integrator_deriv_in(self, *args)

    def state_out(self, *args):
        return _sim_services.Integrator_state_out(self, *args)

    def deriv2_in(self, *args):
        return _sim_services.Integrator_deriv2_in(self, *args)
    __swig_setmethods__["num_state"] = _sim_services.Integrator_num_state_set
    __swig_getmethods__["num_state"] = _sim_services.Integrator_num_state_get
    if _newclass:
        num_state = _swig_property(_sim_services.Integrator_num_state_get, _sim_services.Integrator_num_state_set)
    __swig_setmethods__["intermediate_step"] = _sim_services.Integrator_intermediate_step_set
    __swig_getmethods__["intermediate_step"] = _sim_services.Integrator_intermediate_step_get
    if _newclass:
        intermediate_step = _swig_property(_sim_services.Integrator_intermediate_step_get, _sim_services.Integrator_intermediate_step_set)
    __swig_setmethods__["first_step_deriv"] = _sim_services.Integrator_first_step_deriv_set
    __swig_getmethods__["first_step_deriv"] = _sim_services.Integrator_first_step_deriv_get
    if _newclass:
        first_step_deriv = _swig_property(_sim_services.Integrator_first_step_deriv_get, _sim_services.Integrator_first_step_deriv_set)
    __swig_setmethods__["last_step_deriv"] = _sim_services.Integrator_last_step_deriv_set
    __swig_getmethods__["last_step_deriv"] = _sim_services.Integrator_last_step_deriv_get
    if _newclass:
        last_step_deriv = _swig_property(_sim_services.Integrator_last_step_deriv_get, _sim_services.Integrator_last_step_deriv_set)
    __swig_setmethods__["is_2nd_order_ODE_technique"] = _sim_services.Integrator_is_2nd_order_ODE_technique_set
    __swig_getmethods__["is_2nd_order_ODE_technique"] = _sim_services.Integrator_is_2nd_order_ODE_technique_get
    if _newclass:
        is_2nd_order_ODE_technique = _swig_property(_sim_services.Integrator_is_2nd_order_ODE_technique_get, _sim_services.Integrator_is_2nd_order_ODE_technique_set)
    __swig_setmethods__["use_deriv2"] = _sim_services.Integrator_use_deriv2_set
    __swig_getmethods__["use_deriv2"] = _sim_services.Integrator_use_deriv2_get
    if _newclass:
        use_deriv2 = _swig_property(_sim_services.Integrator_use_deriv2_get, _sim_services.Integrator_use_deriv2_set)
    __swig_setmethods__["dt"] = _sim_services.Integrator_dt_set
    __swig_getmethods__["dt"] = _sim_services.Integrator_dt_get
    if _newclass:
        dt = _swig_property(_sim_services.Integrator_dt_get, _sim_services.Integrator_dt_set)
    __swig_setmethods__["state"] = _sim_services.Integrator_state_set
    __swig_getmethods__["state"] = _sim_services.Integrator_state_get
    if _newclass:
        state = _swig_property(_sim_services.Integrator_state_get, _sim_services.Integrator_state_set)
    __swig_setmethods__["deriv"] = _sim_services.Integrator_deriv_set
    __swig_getmethods__["deriv"] = _sim_services.Integrator_deriv_get
    if _newclass:
        deriv = _swig_property(_sim_services.Integrator_deriv_get, _sim_services.Integrator_deriv_set)
    __swig_setmethods__["deriv2"] = _sim_services.Integrator_deriv2_set
    __swig_getmethods__["deriv2"] = _sim_services.Integrator_deriv2_get
    if _newclass:
        deriv2 = _swig_property(_sim_services.Integrator_deriv2_get, _sim_services.Integrator_deriv2_set)
    __swig_setmethods__["state_ws"] = _sim_services.Integrator_state_ws_set
    __swig_getmethods__["state_ws"] = _sim_services.Integrator_state_ws_get
    if _newclass:
        state_ws = _swig_property(_sim_services.Integrator_state_ws_get, _sim_services.Integrator_state_ws_set)
    __swig_setmethods__["time"] = _sim_services.Integrator_time_set
    __swig_getmethods__["time"] = _sim_services.Integrator_time_get
    if _newclass:
        time = _swig_property(_sim_services.Integrator_time_get, _sim_services.Integrator_time_set)
    __swig_setmethods__["time_0"] = _sim_services.Integrator_time_0_set
    __swig_getmethods__["time_0"] = _sim_services.Integrator_time_0_get
    if _newclass:
        time_0 = _swig_property(_sim_services.Integrator_time_0_get, _sim_services.Integrator_time_0_set)
    __swig_setmethods__["verbosity"] = _sim_services.Integrator_verbosity_set
    __swig_getmethods__["verbosity"] = _sim_services.Integrator_verbosity_get
    if _newclass:
        verbosity = _swig_property(_sim_services.Integrator_verbosity_get, _sim_services.Integrator_verbosity_set)

    def get_first_step_deriv(self, *args):
        return _sim_services.Integrator_get_first_step_deriv(self, *args)

    def set_first_step_deriv(self, *args):
        return _sim_services.Integrator_set_first_step_deriv(self, *args)

    def get_last_step_deriv(self, *args):
        return _sim_services.Integrator_get_last_step_deriv(self, *args)

    def set_last_step_deriv(self, *args):
        return _sim_services.Integrator_set_last_step_deriv(self, *args)

    def set_verbosity(self, *args):
        return _sim_services.Integrator_set_verbosity(self, *args)

    def reset(self, *args):
        return _sim_services.Integrator_reset(self, *args)

    def get_Integrator_type(self, *args):
        return _sim_services.Integrator_get_Integrator_type(self, *args)
Integrator_swigregister = _sim_services.Integrator_swigregister
Integrator_swigregister(Integrator)


def getIntegrator(*args):
    return _sim_services.getIntegrator(*args)
getIntegrator = _sim_services.getIntegrator
class IntegLoopScheduler(Scheduler):
    __swig_setmethods__ = {}
    for _s in [Scheduler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegLoopScheduler, name, value)
    __swig_getmethods__ = {}
    for _s in [Scheduler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegLoopScheduler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["verbosity"] = _sim_services.IntegLoopScheduler_verbosity_set
    __swig_getmethods__["verbosity"] = _sim_services.IntegLoopScheduler_verbosity_get
    if _newclass:
        verbosity = _swig_property(_sim_services.IntegLoopScheduler_verbosity_get, _sim_services.IntegLoopScheduler_verbosity_set)
    __swig_setmethods__["last_step_deriv"] = _sim_services.IntegLoopScheduler_last_step_deriv_set
    __swig_getmethods__["last_step_deriv"] = _sim_services.IntegLoopScheduler_last_step_deriv_get
    if _newclass:
        last_step_deriv = _swig_property(_sim_services.IntegLoopScheduler_last_step_deriv_get, _sim_services.IntegLoopScheduler_last_step_deriv_set)
    __swig_setmethods__["first_step_deriv"] = _sim_services.IntegLoopScheduler_first_step_deriv_set
    __swig_getmethods__["first_step_deriv"] = _sim_services.IntegLoopScheduler_first_step_deriv_get
    if _newclass:
        first_step_deriv = _swig_property(_sim_services.IntegLoopScheduler_first_step_deriv_get, _sim_services.IntegLoopScheduler_first_step_deriv_set)
    __swig_setmethods__["integ_ptr"] = _sim_services.IntegLoopScheduler_integ_ptr_set
    __swig_getmethods__["integ_ptr"] = _sim_services.IntegLoopScheduler_integ_ptr_get
    if _newclass:
        integ_ptr = _swig_property(_sim_services.IntegLoopScheduler_integ_ptr_get, _sim_services.IntegLoopScheduler_integ_ptr_set)
    __swig_setmethods__["sim_objects"] = _sim_services.IntegLoopScheduler_sim_objects_set
    __swig_getmethods__["sim_objects"] = _sim_services.IntegLoopScheduler_sim_objects_get
    if _newclass:
        sim_objects = _swig_property(_sim_services.IntegLoopScheduler_sim_objects_get, _sim_services.IntegLoopScheduler_sim_objects_set)

    def __init__(self, *args):
        this = _sim_services.new_IntegLoopScheduler(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_IntegLoopScheduler
    __del__ = lambda self: None

    def add_integ_jobs_from_sim_object(self, *args):
        return _sim_services.IntegLoopScheduler_add_integ_jobs_from_sim_object(self, *args)

    def call_deriv_jobs(self, *args):
        return _sim_services.IntegLoopScheduler_call_deriv_jobs(self, *args)

    def integrate(self, *args):
        return _sim_services.IntegLoopScheduler_integrate(self, *args)

    def add_sim_object(self, *args):
        return _sim_services.IntegLoopScheduler_add_sim_object(self, *args)

    def remove_sim_object(self, *args):
        return _sim_services.IntegLoopScheduler_remove_sim_object(self, *args)

    def rebuild_jobs(self, *args):
        return _sim_services.IntegLoopScheduler_rebuild_jobs(self, *args)

    def restart_checkpoint(self, *args):
        return _sim_services.IntegLoopScheduler_restart_checkpoint(self, *args)

    def get_first_step_deriv_from_integrator(self, *args):
        return _sim_services.IntegLoopScheduler_get_first_step_deriv_from_integrator(self, *args)

    def set_first_step_deriv(self, *args):
        return _sim_services.IntegLoopScheduler_set_first_step_deriv(self, *args)

    def get_last_step_deriv(self, *args):
        return _sim_services.IntegLoopScheduler_get_last_step_deriv(self, *args)

    def set_last_step_deriv(self, *args):
        return _sim_services.IntegLoopScheduler_set_last_step_deriv(self, *args)

    def set_verbosity(self, *args):
        return _sim_services.IntegLoopScheduler_set_verbosity(self, *args)

    def getIntegrator(self, *args):
        return _sim_services.IntegLoopScheduler_getIntegrator(self, *args)

    def get_integ_cycle(self, *args):
        return _sim_services.IntegLoopScheduler_get_integ_cycle(self, *args)

    def set_integ_cycle(self, *args):
        return _sim_services.IntegLoopScheduler_set_integ_cycle(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.IntegLoopScheduler_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.IntegLoopScheduler_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.IntegLoopScheduler_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.IntegLoopScheduler_instrument_job_remove(self, *args)
IntegLoopScheduler_swigregister = _sim_services.IntegLoopScheduler_swigregister
IntegLoopScheduler_swigregister(IntegLoopScheduler)

class IntegLoopSimObject(SimObject):
    __swig_setmethods__ = {}
    for _s in [SimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegLoopSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegLoopSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["integ_sched"] = _sim_services.IntegLoopSimObject_integ_sched_set
    __swig_getmethods__["integ_sched"] = _sim_services.IntegLoopSimObject_integ_sched_get
    if _newclass:
        integ_sched = _swig_property(_sim_services.IntegLoopSimObject_integ_sched_get, _sim_services.IntegLoopSimObject_integ_sched_set)

    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _sim_services.new_IntegLoopSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "IntegLoopSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def add_jobs(self, *args):
        return _sim_services.IntegLoopSimObject_add_jobs(self, *args)

    def call_function(self, *args):
        return _sim_services.IntegLoopSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _sim_services.IntegLoopSimObject_call_function_double(self, *args)

    def getIntegrator(self, *args):
        return _sim_services.IntegLoopSimObject_getIntegrator(self, *args)

    def set_integ_cycle(self, *args):
        return _sim_services.IntegLoopSimObject_set_integ_cycle(self, *args)

    def __getitem__(self, *args):
        return _sim_services.IntegLoopSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _sim_services.IntegLoopSimObject___len__(self, *args)
    __swig_destroy__ = _sim_services.delete_IntegLoopSimObject
    __del__ = lambda self: None
IntegLoopSimObject_swigregister = _sim_services.IntegLoopSimObject_swigregister
IntegLoopSimObject_swigregister(IntegLoopSimObject)


def castAsIntegLoopSimObject(*args):
    return _sim_services.castAsIntegLoopSimObject(*args)
castAsIntegLoopSimObject = _sim_services.castAsIntegLoopSimObject

_sim_services.BIG_TGO_swigconstant(_sim_services)
BIG_TGO = _sim_services.BIG_TGO

_sim_services.Decreasing_swigconstant(_sim_services)
Decreasing = _sim_services.Decreasing

_sim_services.Any_swigconstant(_sim_services)
Any = _sim_services.Any

_sim_services.Increasing_swigconstant(_sim_services)
Increasing = _sim_services.Increasing
class REGULA_FALSI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, REGULA_FALSI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, REGULA_FALSI, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lower_set"] = _sim_services.REGULA_FALSI_lower_set_set
    __swig_getmethods__["lower_set"] = _sim_services.REGULA_FALSI_lower_set_get
    if _newclass:
        lower_set = _swig_property(_sim_services.REGULA_FALSI_lower_set_get, _sim_services.REGULA_FALSI_lower_set_set)
    __swig_setmethods__["upper_set"] = _sim_services.REGULA_FALSI_upper_set_set
    __swig_getmethods__["upper_set"] = _sim_services.REGULA_FALSI_upper_set_get
    if _newclass:
        upper_set = _swig_property(_sim_services.REGULA_FALSI_upper_set_get, _sim_services.REGULA_FALSI_upper_set_set)
    __swig_setmethods__["iterations"] = _sim_services.REGULA_FALSI_iterations_set
    __swig_getmethods__["iterations"] = _sim_services.REGULA_FALSI_iterations_get
    if _newclass:
        iterations = _swig_property(_sim_services.REGULA_FALSI_iterations_get, _sim_services.REGULA_FALSI_iterations_set)
    __swig_setmethods__["fires"] = _sim_services.REGULA_FALSI_fires_set
    __swig_getmethods__["fires"] = _sim_services.REGULA_FALSI_fires_get
    if _newclass:
        fires = _swig_property(_sim_services.REGULA_FALSI_fires_get, _sim_services.REGULA_FALSI_fires_set)
    __swig_setmethods__["x_lower"] = _sim_services.REGULA_FALSI_x_lower_set
    __swig_getmethods__["x_lower"] = _sim_services.REGULA_FALSI_x_lower_get
    if _newclass:
        x_lower = _swig_property(_sim_services.REGULA_FALSI_x_lower_get, _sim_services.REGULA_FALSI_x_lower_set)
    __swig_setmethods__["t_lower"] = _sim_services.REGULA_FALSI_t_lower_set
    __swig_getmethods__["t_lower"] = _sim_services.REGULA_FALSI_t_lower_get
    if _newclass:
        t_lower = _swig_property(_sim_services.REGULA_FALSI_t_lower_get, _sim_services.REGULA_FALSI_t_lower_set)
    __swig_setmethods__["x_upper"] = _sim_services.REGULA_FALSI_x_upper_set
    __swig_getmethods__["x_upper"] = _sim_services.REGULA_FALSI_x_upper_get
    if _newclass:
        x_upper = _swig_property(_sim_services.REGULA_FALSI_x_upper_get, _sim_services.REGULA_FALSI_x_upper_set)
    __swig_setmethods__["t_upper"] = _sim_services.REGULA_FALSI_t_upper_set
    __swig_getmethods__["t_upper"] = _sim_services.REGULA_FALSI_t_upper_get
    if _newclass:
        t_upper = _swig_property(_sim_services.REGULA_FALSI_t_upper_get, _sim_services.REGULA_FALSI_t_upper_set)
    __swig_setmethods__["delta_time"] = _sim_services.REGULA_FALSI_delta_time_set
    __swig_getmethods__["delta_time"] = _sim_services.REGULA_FALSI_delta_time_get
    if _newclass:
        delta_time = _swig_property(_sim_services.REGULA_FALSI_delta_time_get, _sim_services.REGULA_FALSI_delta_time_set)
    __swig_setmethods__["error"] = _sim_services.REGULA_FALSI_error_set
    __swig_getmethods__["error"] = _sim_services.REGULA_FALSI_error_get
    if _newclass:
        error = _swig_property(_sim_services.REGULA_FALSI_error_get, _sim_services.REGULA_FALSI_error_set)
    __swig_setmethods__["last_error"] = _sim_services.REGULA_FALSI_last_error_set
    __swig_getmethods__["last_error"] = _sim_services.REGULA_FALSI_last_error_get
    if _newclass:
        last_error = _swig_property(_sim_services.REGULA_FALSI_last_error_get, _sim_services.REGULA_FALSI_last_error_set)
    __swig_setmethods__["last_tgo"] = _sim_services.REGULA_FALSI_last_tgo_set
    __swig_getmethods__["last_tgo"] = _sim_services.REGULA_FALSI_last_tgo_get
    if _newclass:
        last_tgo = _swig_property(_sim_services.REGULA_FALSI_last_tgo_get, _sim_services.REGULA_FALSI_last_tgo_set)
    __swig_setmethods__["error_tol"] = _sim_services.REGULA_FALSI_error_tol_set
    __swig_getmethods__["error_tol"] = _sim_services.REGULA_FALSI_error_tol_get
    if _newclass:
        error_tol = _swig_property(_sim_services.REGULA_FALSI_error_tol_get, _sim_services.REGULA_FALSI_error_tol_set)
    __swig_setmethods__["mode"] = _sim_services.REGULA_FALSI_mode_set
    __swig_getmethods__["mode"] = _sim_services.REGULA_FALSI_mode_get
    if _newclass:
        mode = _swig_property(_sim_services.REGULA_FALSI_mode_get, _sim_services.REGULA_FALSI_mode_set)
    __swig_setmethods__["function_slope"] = _sim_services.REGULA_FALSI_function_slope_set
    __swig_getmethods__["function_slope"] = _sim_services.REGULA_FALSI_function_slope_get
    if _newclass:
        function_slope = _swig_property(_sim_services.REGULA_FALSI_function_slope_get, _sim_services.REGULA_FALSI_function_slope_set)

    def __init__(self):
        this = _sim_services.new_REGULA_FALSI()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_REGULA_FALSI
    __del__ = lambda self: None
REGULA_FALSI_swigregister = _sim_services.REGULA_FALSI_swigregister
REGULA_FALSI_swigregister(REGULA_FALSI)


def regula_falsi(*args):
    return _sim_services.regula_falsi(*args)
regula_falsi = _sim_services.regula_falsi

def reset_regula_falsi(*args):
    return _sim_services.reset_regula_falsi(*args)
reset_regula_falsi = _sim_services.reset_regula_falsi
class Er7UtilsDeletable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Er7UtilsDeletable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Er7UtilsDeletable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Er7UtilsDeletable
    __del__ = lambda self: None

    def __init__(self):
        this = _sim_services.new_Er7UtilsDeletable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
Er7UtilsDeletable_swigregister = _sim_services.Er7UtilsDeletable_swigregister
Er7UtilsDeletable_swigregister(Er7UtilsDeletable)

class GeneralizedPositionDerivativeFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralizedPositionDerivativeFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralizedPositionDerivativeFunctions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_GeneralizedPositionDerivativeFunctions(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_GeneralizedPositionDerivativeFunctions
    __del__ = lambda self: None
    __swig_setmethods__["first_deriv_fun"] = _sim_services.GeneralizedPositionDerivativeFunctions_first_deriv_fun_set
    __swig_getmethods__["first_deriv_fun"] = _sim_services.GeneralizedPositionDerivativeFunctions_first_deriv_fun_get
    if _newclass:
        first_deriv_fun = _swig_property(_sim_services.GeneralizedPositionDerivativeFunctions_first_deriv_fun_get, _sim_services.GeneralizedPositionDerivativeFunctions_first_deriv_fun_set)
    __swig_setmethods__["second_deriv_fun"] = _sim_services.GeneralizedPositionDerivativeFunctions_second_deriv_fun_set
    __swig_getmethods__["second_deriv_fun"] = _sim_services.GeneralizedPositionDerivativeFunctions_second_deriv_fun_get
    if _newclass:
        second_deriv_fun = _swig_property(_sim_services.GeneralizedPositionDerivativeFunctions_second_deriv_fun_get, _sim_services.GeneralizedPositionDerivativeFunctions_second_deriv_fun_set)
GeneralizedPositionDerivativeFunctions_swigregister = _sim_services.GeneralizedPositionDerivativeFunctions_swigregister
GeneralizedPositionDerivativeFunctions_swigregister(GeneralizedPositionDerivativeFunctions)

class GeneralizedPositionStepFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralizedPositionStepFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralizedPositionStepFunctions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_GeneralizedPositionStepFunctions(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_GeneralizedPositionStepFunctions
    __del__ = lambda self: None
    __swig_setmethods__["expmap_step_fun"] = _sim_services.GeneralizedPositionStepFunctions_expmap_step_fun_set
    __swig_getmethods__["expmap_step_fun"] = _sim_services.GeneralizedPositionStepFunctions_expmap_step_fun_get
    if _newclass:
        expmap_step_fun = _swig_property(_sim_services.GeneralizedPositionStepFunctions_expmap_step_fun_get, _sim_services.GeneralizedPositionStepFunctions_expmap_step_fun_set)
    __swig_setmethods__["dexpinv_xform_fun"] = _sim_services.GeneralizedPositionStepFunctions_dexpinv_xform_fun_set
    __swig_getmethods__["dexpinv_xform_fun"] = _sim_services.GeneralizedPositionStepFunctions_dexpinv_xform_fun_get
    if _newclass:
        dexpinv_xform_fun = _swig_property(_sim_services.GeneralizedPositionStepFunctions_dexpinv_xform_fun_get, _sim_services.GeneralizedPositionStepFunctions_dexpinv_xform_fun_set)
GeneralizedPositionStepFunctions_swigregister = _sim_services.GeneralizedPositionStepFunctions_swigregister
GeneralizedPositionStepFunctions_swigregister(GeneralizedPositionStepFunctions)

class Integration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Integration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Integration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Unspecified = _sim_services.Integration_Unspecified
    Euler = _sim_services.Integration_Euler
    SymplecticEuler = _sim_services.Integration_SymplecticEuler
    Beeman = _sim_services.Integration_Beeman
    NystromLear2 = _sim_services.Integration_NystromLear2
    PositionVerlet = _sim_services.Integration_PositionVerlet
    RK2Heun = _sim_services.Integration_RK2Heun
    RK2Midpoint = _sim_services.Integration_RK2Midpoint
    VelocityVerlet = _sim_services.Integration_VelocityVerlet
    ModifiedMidpoint4 = _sim_services.Integration_ModifiedMidpoint4
    AdamsBashforthMoulton4 = _sim_services.Integration_AdamsBashforthMoulton4
    RungeKutta4 = _sim_services.Integration_RungeKutta4
    RKGill4 = _sim_services.Integration_RKGill4
    RKNystrom4 = _sim_services.Integration_RKNystrom4
    RKFehlberg45 = _sim_services.Integration_RKFehlberg45
    RKFehlberg78 = _sim_services.Integration_RKFehlberg78
    Unsupported = _sim_services.Integration_Unsupported
    Invalid = _sim_services.Integration_Invalid
    FirstOrderODE = _sim_services.Integration_FirstOrderODE
    SimpleSecondOrderODE = _sim_services.Integration_SimpleSecondOrderODE
    GeneralizedDerivSecondOrderODE = _sim_services.Integration_GeneralizedDerivSecondOrderODE
    GeneralizedStepSecondOrderODE = _sim_services.Integration_GeneralizedStepSecondOrderODE
Integration_swigregister = _sim_services.Integration_swigregister
Integration_swigregister(Integration)

class IntegratorConstructor(Er7UtilsDeletable):
    __swig_setmethods__ = {}
    for _s in [Er7UtilsDeletable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [Er7UtilsDeletable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegratorConstructor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegratorConstructor
    __del__ = lambda self: None

    def get_class_name(self, *args):
        return _sim_services.IntegratorConstructor_get_class_name(self, *args)

    def provides(self, *args):
        return _sim_services.IntegratorConstructor_provides(self, *args)

    def implements(self, *args):
        return _sim_services.IntegratorConstructor_implements(self, *args)

    def need_first_step_derivatives(self, *args):
        return _sim_services.IntegratorConstructor_need_first_step_derivatives(self, *args)

    def is_fixed_step_integrator(self, *args):
        return _sim_services.IntegratorConstructor_is_fixed_step_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.IntegratorConstructor_is_second_order_ode_technique(self, *args)

    def get_buffer_size(self, *args):
        return _sim_services.IntegratorConstructor_get_buffer_size(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.IntegratorConstructor_get_transition_table_size(self, *args)

    def create_copy(self, *args):
        return _sim_services.IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.IntegratorConstructor_create_integration_controls(self, *args)

    def create_integrator_results_merger(self, *args):
        return _sim_services.IntegratorConstructor_create_integrator_results_merger(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)
IntegratorConstructor_swigregister = _sim_services.IntegratorConstructor_swigregister
IntegratorConstructor_swigregister(IntegratorConstructor)

class PrimingIntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimingIntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrimingIntegratorConstructor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_PrimingIntegratorConstructor
    __del__ = lambda self: None

    def get_primer_constructor(self, *args):
        return _sim_services.PrimingIntegratorConstructor_get_primer_constructor(self, *args)

    def is_fixed_step_integrator(self, *args):
        return _sim_services.PrimingIntegratorConstructor_is_fixed_step_integrator(self, *args)

    def get_buffer_size(self, *args):
        return _sim_services.PrimingIntegratorConstructor_get_buffer_size(self, *args)

    def get_history_length(self, *args):
        return _sim_services.PrimingIntegratorConstructor_get_history_length(self, *args)
PrimingIntegratorConstructor_swigregister = _sim_services.PrimingIntegratorConstructor_swigregister
PrimingIntegratorConstructor_swigregister(PrimingIntegratorConstructor)

class RK4IntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RK4IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RK4IntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.RK4IntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.RK4IntegratorConstructor_create_constructor)

    def get_class_name(self, *args):
        return _sim_services.RK4IntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RK4IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        this = _sim_services.new_RK4IntegratorConstructor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RK4IntegratorConstructor
    __del__ = lambda self: None
RK4IntegratorConstructor_swigregister = _sim_services.RK4IntegratorConstructor_swigregister
RK4IntegratorConstructor_swigregister(RK4IntegratorConstructor)

def RK4IntegratorConstructor_create_constructor(*args):
    return _sim_services.RK4IntegratorConstructor_create_constructor(*args)
RK4IntegratorConstructor_create_constructor = _sim_services.RK4IntegratorConstructor_create_constructor

class ABM4IntegratorConstructor(PrimingIntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [PrimingIntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ABM4IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimingIntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ABM4IntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.ABM4IntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.ABM4IntegratorConstructor_create_constructor)

    def __init__(self, *args):
        this = _sim_services.new_ABM4IntegratorConstructor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_class_name(self, *args):
        return _sim_services.ABM4IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.ABM4IntegratorConstructor_implements(self, *args)

    def provides(self, *args):
        return _sim_services.ABM4IntegratorConstructor_provides(self, *args)

    def create_copy(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.ABM4IntegratorConstructor_get_transition_table_size(self, *args)

    def get_history_length(self, *args):
        return _sim_services.ABM4IntegratorConstructor_get_history_length(self, *args)
    __swig_destroy__ = _sim_services.delete_ABM4IntegratorConstructor
    __del__ = lambda self: None
ABM4IntegratorConstructor_swigregister = _sim_services.ABM4IntegratorConstructor_swigregister
ABM4IntegratorConstructor_swigregister(ABM4IntegratorConstructor)

def ABM4IntegratorConstructor_create_constructor(*args):
    return _sim_services.ABM4IntegratorConstructor_create_constructor(*args)
ABM4IntegratorConstructor_create_constructor = _sim_services.ABM4IntegratorConstructor_create_constructor

class StateIntegratorInterface(Er7UtilsDeletable):
    __swig_setmethods__ = {}
    for _s in [Er7UtilsDeletable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateIntegratorInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [Er7UtilsDeletable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateIntegratorInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_StateIntegratorInterface
    __del__ = lambda self: None

    def reset_integrator(self, *args):
        return _sim_services.StateIntegratorInterface_reset_integrator(self, *args)

    def create_copy(self, *args):
        return _sim_services.StateIntegratorInterface_create_copy(self, *args)
StateIntegratorInterface_swigregister = _sim_services.StateIntegratorInterface_swigregister
StateIntegratorInterface_swigregister(StateIntegratorInterface)

class IntegratorResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegratorResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegratorResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_IntegratorResult(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_time_scale(self, *args):
        return _sim_services.IntegratorResult_get_time_scale(self, *args)

    def get_passed(self, *args):
        return _sim_services.IntegratorResult_get_passed(self, *args)

    def get_failure_mode(self, *args):
        return _sim_services.IntegratorResult_get_failure_mode(self, *args)

    def get_merge_count(self, *args):
        return _sim_services.IntegratorResult_get_merge_count(self, *args)

    def set_time_scale(self, *args):
        return _sim_services.IntegratorResult_set_time_scale(self, *args)

    def set_passed(self, *args):
        return _sim_services.IntegratorResult_set_passed(self, *args)

    def set_failed(self, *args):
        return _sim_services.IntegratorResult_set_failed(self, *args)

    def set_failure_mode(self, *args):
        return _sim_services.IntegratorResult_set_failure_mode(self, *args)

    def mark_as_integrated(self, *args):
        return _sim_services.IntegratorResult_mark_as_integrated(self, *args)

    def mark_as_not_integrated(self, *args):
        return _sim_services.IntegratorResult_mark_as_not_integrated(self, *args)

    def increment_merge_count(self, *args):
        return _sim_services.IntegratorResult_increment_merge_count(self, *args)
    __swig_destroy__ = _sim_services.delete_IntegratorResult
    __del__ = lambda self: None
IntegratorResult_swigregister = _sim_services.IntegratorResult_swigregister
IntegratorResult_swigregister(IntegratorResult)

class FirstOrderODEIntegrator(StateIntegratorInterface):
    __swig_setmethods__ = {}
    for _s in [StateIntegratorInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirstOrderODEIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [StateIntegratorInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirstOrderODEIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_FirstOrderODEIntegrator
    __del__ = lambda self: None

    def create_copy(self, *args):
        return _sim_services.FirstOrderODEIntegrator_create_copy(self, *args)

    def set_controls(self, *args):
        return _sim_services.FirstOrderODEIntegrator_set_controls(self, *args)

    def integrate(self, *args):
        return _sim_services.FirstOrderODEIntegrator_integrate(self, *args)
FirstOrderODEIntegrator_swigregister = _sim_services.FirstOrderODEIntegrator_swigregister
FirstOrderODEIntegrator_swigregister(FirstOrderODEIntegrator)

class SecondOrderODEIntegrator(StateIntegratorInterface):
    __swig_setmethods__ = {}
    for _s in [StateIntegratorInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondOrderODEIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [StateIntegratorInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondOrderODEIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_SecondOrderODEIntegrator
    __del__ = lambda self: None

    def create_copy(self, *args):
        return _sim_services.SecondOrderODEIntegrator_create_copy(self, *args)

    def set_controls(self, *args):
        return _sim_services.SecondOrderODEIntegrator_set_controls(self, *args)

    def set_position_derivative_functions(self, *args):
        return _sim_services.SecondOrderODEIntegrator_set_position_derivative_functions(self, *args)

    def set_position_step_functions(self, *args):
        return _sim_services.SecondOrderODEIntegrator_set_position_step_functions(self, *args)

    def integrate(self, *args):
        return _sim_services.SecondOrderODEIntegrator_integrate(self, *args)
SecondOrderODEIntegrator_swigregister = _sim_services.SecondOrderODEIntegrator_swigregister
SecondOrderODEIntegrator_swigregister(SecondOrderODEIntegrator)

class IntegratorInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegratorInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegratorInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegratorInterface
    __del__ = lambda self: None

    def get_dt(self, *args):
        return _sim_services.IntegratorInterface_get_dt(self, *args)

    def get_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_get_first_step_derivs_flag(self, *args)

    def set_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_set_first_step_derivs_flag(self, *args)

    def reset_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_reset_first_step_derivs_flag(self, *args)

    def restore_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_restore_first_step_derivs_flag(self, *args)

    def set_step_number(self, *args):
        return _sim_services.IntegratorInterface_set_step_number(self, *args)

    def set_time(self, *args):
        return _sim_services.IntegratorInterface_set_time(self, *args)
IntegratorInterface_swigregister = _sim_services.IntegratorInterface_swigregister
IntegratorInterface_swigregister(IntegratorInterface)

class IntegrationControls(Er7UtilsDeletable):
    __swig_setmethods__ = {}
    for _s in [Er7UtilsDeletable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationControls, name, value)
    __swig_getmethods__ = {}
    for _s in [Er7UtilsDeletable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationControls, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegrationControls
    __del__ = lambda self: None

    def create_copy(self, *args):
        return _sim_services.IntegrationControls_create_copy(self, *args)

    def get_simtime(self, *args):
        return _sim_services.IntegrationControls_get_simtime(self, *args)

    def get_final_stage(self, *args):
        return _sim_services.IntegrationControls_get_final_stage(self, *args)

    def get_step_number(self, *args):
        return _sim_services.IntegrationControls_get_step_number(self, *args)

    def in_initial_cycle(self, *args):
        return _sim_services.IntegrationControls_in_initial_cycle(self, *args)

    def get_expected_step_number(self, *args):
        return _sim_services.IntegrationControls_get_expected_step_number(self, *args)

    def get_reset_needed(self, *args):
        return _sim_services.IntegrationControls_get_reset_needed(self, *args)

    def set_reset_needed(self, *args):
        return _sim_services.IntegrationControls_set_reset_needed(self, *args)

    def get_transition_table_element(self, *args):
        return _sim_services.IntegrationControls_get_transition_table_element(self, *args)

    def set_transition_table_element(self, *args):
        return _sim_services.IntegrationControls_set_transition_table_element(self, *args)

    def integrate(self, *args):
        return _sim_services.IntegrationControls_integrate(self, *args)

    def reset_integrator(self, *args):
        return _sim_services.IntegrationControls_reset_integrator(self, *args)
IntegrationControls_swigregister = _sim_services.IntegrationControls_swigregister
IntegrationControls_swigregister(IntegrationControls)

class BaseIntegrationGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseIntegrationGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseIntegrationGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_BaseIntegrationGroup
    __del__ = lambda self: None

    def reset_integrators(self, *args):
        return _sim_services.BaseIntegrationGroup_reset_integrators(self, *args)

    def get_first_step_derivs_flag(self, *args):
        return _sim_services.BaseIntegrationGroup_get_first_step_derivs_flag(self, *args)

    def integrate_group(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_group(self, *args)

    def integrate_group_from(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_group_from(self, *args)

    def integrate_group_to(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_group_to(self, *args)

    def initialize_group(self, *args):
        return _sim_services.BaseIntegrationGroup_initialize_group(self, *args)

    def update_integration_interface(self, *args):
        return _sim_services.BaseIntegrationGroup_update_integration_interface(self, *args)

    def integrate_bodies(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_bodies(self, *args)

    def reset_body_integrators(self, *args):
        return _sim_services.BaseIntegrationGroup_reset_body_integrators(self, *args)
BaseIntegrationGroup_swigregister = _sim_services.BaseIntegrationGroup_swigregister
BaseIntegrationGroup_swigregister(BaseIntegrationGroup)

class TimeInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_TimeInterface
    __del__ = lambda self: None

    def update_time(self, *args):
        return _sim_services.TimeInterface_update_time(self, *args)

    def get_time_scale_factor(self, *args):
        return _sim_services.TimeInterface_get_time_scale_factor(self, *args)
TimeInterface_swigregister = _sim_services.TimeInterface_swigregister
TimeInterface_swigregister(TimeInterface)

class TrickIntegrator(Integrator):
    __swig_setmethods__ = {}
    for _s in [Integrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrickIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [Integrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrickIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InvalidIntegrationMode = _sim_services.TrickIntegrator_InvalidIntegrationMode
    UseFirstOrderIntegrator = _sim_services.TrickIntegrator_UseFirstOrderIntegrator
    UseSecondOrderIntegrator = _sim_services.TrickIntegrator_UseSecondOrderIntegrator
    __swig_destroy__ = _sim_services.delete_TrickIntegrator
    __del__ = lambda self: None

    def integrate(self, *args):
        return _sim_services.TrickIntegrator_integrate(self, *args)

    def initialize(self, *args):
        return _sim_services.TrickIntegrator_initialize(self, *args)

    def integrate_1st_order_ode(self, *args):
        return _sim_services.TrickIntegrator_integrate_1st_order_ode(self, *args)

    def integrate_2nd_order_ode(self, *args):
        return _sim_services.TrickIntegrator_integrate_2nd_order_ode(self, *args)
TrickIntegrator_swigregister = _sim_services.TrickIntegrator_swigregister
TrickIntegrator_swigregister(TrickIntegrator)

class TrickFirstOrderOdeIntegrator(TrickIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrickFirstOrderOdeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrickFirstOrderOdeIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_TrickFirstOrderOdeIntegrator
    __del__ = lambda self: None
TrickFirstOrderOdeIntegrator_swigregister = _sim_services.TrickFirstOrderOdeIntegrator_swigregister
TrickFirstOrderOdeIntegrator_swigregister(TrickFirstOrderOdeIntegrator)

class ABM_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ABM_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ABM_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_ABM_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ABM_IntegratorHelper
    __del__ = lambda self: None
ABM_IntegratorHelper_swigregister = _sim_services.ABM_IntegratorHelper_swigregister
ABM_IntegratorHelper_swigregister(ABM_IntegratorHelper)

class ABM_Integrator(TrickFirstOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ABM_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ABM_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_ABM_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.ABM_Integrator_get_Integrator_type(self, *args)
ABM_Integrator_swigregister = _sim_services.ABM_Integrator_swigregister
ABM_Integrator_swigregister(ABM_Integrator)

class SymplecticEulerIntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymplecticEulerIntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SymplecticEulerIntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.SymplecticEulerIntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.SymplecticEulerIntegratorConstructor_create_constructor)

    def __init__(self, *args):
        this = _sim_services.new_SymplecticEulerIntegratorConstructor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_SymplecticEulerIntegratorConstructor
    __del__ = lambda self: None

    def get_class_name(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_implements(self, *args)

    def create_copy(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_is_second_order_ode_technique(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_get_transition_table_size(self, *args)
SymplecticEulerIntegratorConstructor_swigregister = _sim_services.SymplecticEulerIntegratorConstructor_swigregister
SymplecticEulerIntegratorConstructor_swigregister(SymplecticEulerIntegratorConstructor)

def SymplecticEulerIntegratorConstructor_create_constructor(*args):
    return _sim_services.SymplecticEulerIntegratorConstructor_create_constructor(*args)
SymplecticEulerIntegratorConstructor_create_constructor = _sim_services.SymplecticEulerIntegratorConstructor_create_constructor

class TrickSecondOrderOdeIntegrator(TrickIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrickSecondOrderOdeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrickSecondOrderOdeIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_TrickSecondOrderOdeIntegrator
    __del__ = lambda self: None
TrickSecondOrderOdeIntegrator_swigregister = _sim_services.TrickSecondOrderOdeIntegrator_swigregister
TrickSecondOrderOdeIntegrator_swigregister(TrickSecondOrderOdeIntegrator)

class Euler_Cromer_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euler_Cromer_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Euler_Cromer_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_Euler_Cromer_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_Euler_Cromer_IntegratorHelper
    __del__ = lambda self: None
Euler_Cromer_IntegratorHelper_swigregister = _sim_services.Euler_Cromer_IntegratorHelper_swigregister
Euler_Cromer_IntegratorHelper_swigregister(Euler_Cromer_IntegratorHelper)

class Euler_Cromer_Integrator(TrickSecondOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickSecondOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euler_Cromer_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickSecondOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euler_Cromer_Integrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_Euler_Cromer_Integrator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def integrate(self, *args):
        return _sim_services.Euler_Cromer_Integrator_integrate(self, *args)
    __swig_destroy__ = _sim_services.delete_Euler_Cromer_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.Euler_Cromer_Integrator_get_Integrator_type(self, *args)
Euler_Cromer_Integrator_swigregister = _sim_services.Euler_Cromer_Integrator_swigregister
Euler_Cromer_Integrator_swigregister(Euler_Cromer_Integrator)

class EulerIntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EulerIntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EulerIntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.EulerIntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.EulerIntegratorConstructor_create_constructor)

    def __init__(self, *args):
        this = _sim_services.new_EulerIntegratorConstructor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_EulerIntegratorConstructor
    __del__ = lambda self: None

    def get_class_name(self, *args):
        return _sim_services.EulerIntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.EulerIntegratorConstructor_get_transition_table_size(self, *args)
EulerIntegratorConstructor_swigregister = _sim_services.EulerIntegratorConstructor_swigregister
EulerIntegratorConstructor_swigregister(EulerIntegratorConstructor)

def EulerIntegratorConstructor_create_constructor(*args):
    return _sim_services.EulerIntegratorConstructor_create_constructor(*args)
EulerIntegratorConstructor_create_constructor = _sim_services.EulerIntegratorConstructor_create_constructor

class Euler_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euler_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Euler_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_Euler_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_Euler_IntegratorHelper
    __del__ = lambda self: None
Euler_IntegratorHelper_swigregister = _sim_services.Euler_IntegratorHelper_swigregister
Euler_IntegratorHelper_swigregister(Euler_IntegratorHelper)

class Euler_Integrator(TrickFirstOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Euler_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Euler_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Euler_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.Euler_Integrator_get_Integrator_type(self, *args)
Euler_Integrator_swigregister = _sim_services.Euler_Integrator_swigregister
Euler_Integrator_swigregister(Euler_Integrator)

class MM4IntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MM4IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MM4IntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.MM4IntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.MM4IntegratorConstructor_create_constructor)

    def get_class_name(self, *args):
        return _sim_services.MM4IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.MM4IntegratorConstructor_implements(self, *args)

    def provides(self, *args):
        return _sim_services.MM4IntegratorConstructor_provides(self, *args)

    def create_copy(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.MM4IntegratorConstructor_is_second_order_ode_technique(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.MM4IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        this = _sim_services.new_MM4IntegratorConstructor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MM4IntegratorConstructor
    __del__ = lambda self: None
MM4IntegratorConstructor_swigregister = _sim_services.MM4IntegratorConstructor_swigregister
MM4IntegratorConstructor_swigregister(MM4IntegratorConstructor)

def MM4IntegratorConstructor_create_constructor(*args):
    return _sim_services.MM4IntegratorConstructor_create_constructor(*args)
MM4IntegratorConstructor_create_constructor = _sim_services.MM4IntegratorConstructor_create_constructor

class MM4_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MM4_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MM4_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_MM4_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MM4_IntegratorHelper
    __del__ = lambda self: None
MM4_IntegratorHelper_swigregister = _sim_services.MM4_IntegratorHelper_swigregister
MM4_IntegratorHelper_swigregister(MM4_IntegratorHelper)

class MM4_Integrator(TrickSecondOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickSecondOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MM4_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickSecondOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MM4_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_MM4_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.MM4_Integrator_get_Integrator_type(self, *args)
MM4_Integrator_swigregister = _sim_services.MM4_Integrator_swigregister
MM4_Integrator_swigregister(MM4_Integrator)

class NystromLear2IntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NystromLear2IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NystromLear2IntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.NystromLear2IntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.NystromLear2IntegratorConstructor_create_constructor)

    def __init__(self, *args):
        this = _sim_services.new_NystromLear2IntegratorConstructor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_NystromLear2IntegratorConstructor
    __del__ = lambda self: None

    def get_class_name(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_implements(self, *args)

    def provides(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_provides(self, *args)

    def create_copy(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_is_second_order_ode_technique(self, *args)

    def need_first_step_derivatives(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_need_first_step_derivatives(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_get_transition_table_size(self, *args)
NystromLear2IntegratorConstructor_swigregister = _sim_services.NystromLear2IntegratorConstructor_swigregister
NystromLear2IntegratorConstructor_swigregister(NystromLear2IntegratorConstructor)

def NystromLear2IntegratorConstructor_create_constructor(*args):
    return _sim_services.NystromLear2IntegratorConstructor_create_constructor(*args)
NystromLear2IntegratorConstructor_create_constructor = _sim_services.NystromLear2IntegratorConstructor_create_constructor

class NL2_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NL2_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NL2_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_NL2_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_NL2_IntegratorHelper
    __del__ = lambda self: None
NL2_IntegratorHelper_swigregister = _sim_services.NL2_IntegratorHelper_swigregister
NL2_IntegratorHelper_swigregister(NL2_IntegratorHelper)

class NL2_Integrator(TrickSecondOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickSecondOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NL2_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickSecondOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NL2_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_NL2_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.NL2_Integrator_get_Integrator_type(self, *args)
NL2_Integrator_swigregister = _sim_services.NL2_Integrator_swigregister
NL2_Integrator_swigregister(NL2_Integrator)

class RK2HeunIntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RK2HeunIntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RK2HeunIntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.RK2HeunIntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.RK2HeunIntegratorConstructor_create_constructor)

    def __init__(self, *args):
        this = _sim_services.new_RK2HeunIntegratorConstructor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RK2HeunIntegratorConstructor
    __del__ = lambda self: None

    def get_class_name(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_get_transition_table_size(self, *args)
RK2HeunIntegratorConstructor_swigregister = _sim_services.RK2HeunIntegratorConstructor_swigregister
RK2HeunIntegratorConstructor_swigregister(RK2HeunIntegratorConstructor)

def RK2HeunIntegratorConstructor_create_constructor(*args):
    return _sim_services.RK2HeunIntegratorConstructor_create_constructor(*args)
RK2HeunIntegratorConstructor_create_constructor = _sim_services.RK2HeunIntegratorConstructor_create_constructor

class RK2_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RK2_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RK2_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_RK2_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RK2_IntegratorHelper
    __del__ = lambda self: None
RK2_IntegratorHelper_swigregister = _sim_services.RK2_IntegratorHelper_swigregister
RK2_IntegratorHelper_swigregister(RK2_IntegratorHelper)

class RK2_Integrator(TrickFirstOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RK2_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RK2_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RK2_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.RK2_Integrator_get_Integrator_type(self, *args)
RK2_Integrator_swigregister = _sim_services.RK2_Integrator_swigregister
RK2_Integrator_swigregister(RK2_Integrator)

class RK4_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RK4_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RK4_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_RK4_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RK4_IntegratorHelper
    __del__ = lambda self: None
RK4_IntegratorHelper_swigregister = _sim_services.RK4_IntegratorHelper_swigregister
RK4_IntegratorHelper_swigregister(RK4_IntegratorHelper)

class RK4_Integrator(TrickFirstOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RK4_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RK4_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RK4_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.RK4_Integrator_get_Integrator_type(self, *args)
RK4_Integrator_swigregister = _sim_services.RK4_Integrator_swigregister
RK4_Integrator_swigregister(RK4_Integrator)

class RKFehlberg45IntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKFehlberg45IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RKFehlberg45IntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.RKFehlberg45IntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.RKFehlberg45IntegratorConstructor_create_constructor)

    def get_class_name(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        this = _sim_services.new_RKFehlberg45IntegratorConstructor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RKFehlberg45IntegratorConstructor
    __del__ = lambda self: None
RKFehlberg45IntegratorConstructor_swigregister = _sim_services.RKFehlberg45IntegratorConstructor_swigregister
RKFehlberg45IntegratorConstructor_swigregister(RKFehlberg45IntegratorConstructor)

def RKFehlberg45IntegratorConstructor_create_constructor(*args):
    return _sim_services.RKFehlberg45IntegratorConstructor_create_constructor(*args)
RKFehlberg45IntegratorConstructor_create_constructor = _sim_services.RKFehlberg45IntegratorConstructor_create_constructor

class RKF45_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKF45_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RKF45_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_RKF45_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RKF45_IntegratorHelper
    __del__ = lambda self: None
RKF45_IntegratorHelper_swigregister = _sim_services.RKF45_IntegratorHelper_swigregister
RKF45_IntegratorHelper_swigregister(RKF45_IntegratorHelper)

class RKF45_Integrator(TrickFirstOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKF45_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RKF45_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RKF45_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.RKF45_Integrator_get_Integrator_type(self, *args)
RKF45_Integrator_swigregister = _sim_services.RKF45_Integrator_swigregister
RKF45_Integrator_swigregister(RKF45_Integrator)

class RKFehlberg78IntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKFehlberg78IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RKFehlberg78IntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.RKFehlberg78IntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.RKFehlberg78IntegratorConstructor_create_constructor)

    def get_class_name(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        this = _sim_services.new_RKFehlberg78IntegratorConstructor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RKFehlberg78IntegratorConstructor
    __del__ = lambda self: None
RKFehlberg78IntegratorConstructor_swigregister = _sim_services.RKFehlberg78IntegratorConstructor_swigregister
RKFehlberg78IntegratorConstructor_swigregister(RKFehlberg78IntegratorConstructor)

def RKFehlberg78IntegratorConstructor_create_constructor(*args):
    return _sim_services.RKFehlberg78IntegratorConstructor_create_constructor(*args)
RKFehlberg78IntegratorConstructor_create_constructor = _sim_services.RKFehlberg78IntegratorConstructor_create_constructor

class RKF78_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKF78_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RKF78_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_RKF78_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RKF78_IntegratorHelper
    __del__ = lambda self: None
RKF78_IntegratorHelper_swigregister = _sim_services.RKF78_IntegratorHelper_swigregister
RKF78_IntegratorHelper_swigregister(RKF78_IntegratorHelper)

class RKF78_Integrator(TrickFirstOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKF78_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RKF78_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RKF78_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.RKF78_Integrator_get_Integrator_type(self, *args)
RKF78_Integrator_swigregister = _sim_services.RKF78_Integrator_swigregister
RKF78_Integrator_swigregister(RKF78_Integrator)

class RKGill4IntegratorConstructor(IntegratorConstructor):
    __swig_setmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKGill4IntegratorConstructor, name, value)
    __swig_getmethods__ = {}
    for _s in [IntegratorConstructor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RKGill4IntegratorConstructor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create_constructor"] = lambda x: _sim_services.RKGill4IntegratorConstructor_create_constructor
    if _newclass:
        create_constructor = staticmethod(_sim_services.RKGill4IntegratorConstructor_create_constructor)

    def get_class_name(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_implements(self, *args)

    def create_copy(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        this = _sim_services.new_RKGill4IntegratorConstructor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RKGill4IntegratorConstructor
    __del__ = lambda self: None
RKGill4IntegratorConstructor_swigregister = _sim_services.RKGill4IntegratorConstructor_swigregister
RKGill4IntegratorConstructor_swigregister(RKGill4IntegratorConstructor)

def RKGill4IntegratorConstructor_create_constructor(*args):
    return _sim_services.RKGill4IntegratorConstructor_create_constructor(*args)
RKGill4IntegratorConstructor_create_constructor = _sim_services.RKGill4IntegratorConstructor_create_constructor

class RKG4_IntegratorHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKG4_IntegratorHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RKG4_IntegratorHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_RKG4_IntegratorHelper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RKG4_IntegratorHelper
    __del__ = lambda self: None
RKG4_IntegratorHelper_swigregister = _sim_services.RKG4_IntegratorHelper_swigregister
RKG4_IntegratorHelper_swigregister(RKG4_IntegratorHelper)

class RKG4_Integrator(TrickFirstOrderOdeIntegrator):
    __swig_setmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RKG4_Integrator, name, value)
    __swig_getmethods__ = {}
    for _s in [TrickFirstOrderOdeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RKG4_Integrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RKG4_Integrator
    __del__ = lambda self: None

    def get_Integrator_type(self, *args):
        return _sim_services.RKG4_Integrator_get_Integrator_type(self, *args)
RKG4_Integrator_swigregister = _sim_services.RKG4_Integrator_swigregister
RKG4_Integrator_swigregister(RKG4_Integrator)

class TIME_OFFSET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TIME_OFFSET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TIME_OFFSET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["day"] = _sim_services.TIME_OFFSET_day_set
    __swig_getmethods__["day"] = _sim_services.TIME_OFFSET_day_get
    if _newclass:
        day = _swig_property(_sim_services.TIME_OFFSET_day_get, _sim_services.TIME_OFFSET_day_set)
    __swig_setmethods__["hour"] = _sim_services.TIME_OFFSET_hour_set
    __swig_getmethods__["hour"] = _sim_services.TIME_OFFSET_hour_get
    if _newclass:
        hour = _swig_property(_sim_services.TIME_OFFSET_hour_get, _sim_services.TIME_OFFSET_hour_set)
    __swig_setmethods__["min"] = _sim_services.TIME_OFFSET_min_set
    __swig_getmethods__["min"] = _sim_services.TIME_OFFSET_min_get
    if _newclass:
        min = _swig_property(_sim_services.TIME_OFFSET_min_get, _sim_services.TIME_OFFSET_min_set)
    __swig_setmethods__["sec"] = _sim_services.TIME_OFFSET_sec_set
    __swig_getmethods__["sec"] = _sim_services.TIME_OFFSET_sec_get
    if _newclass:
        sec = _swig_property(_sim_services.TIME_OFFSET_sec_get, _sim_services.TIME_OFFSET_sec_set)

    def __init__(self):
        this = _sim_services.new_TIME_OFFSET()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TIME_OFFSET
    __del__ = lambda self: None
TIME_OFFSET_swigregister = _sim_services.TIME_OFFSET_swigregister
TIME_OFFSET_swigregister(TIME_OFFSET)

class SimTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ret_time"] = _sim_services.SimTime_ret_time_set
    __swig_getmethods__["ret_time"] = _sim_services.SimTime_ret_time_get
    if _newclass:
        ret_time = _swig_property(_sim_services.SimTime_ret_time_get, _sim_services.SimTime_ret_time_set)
    __swig_setmethods__["gmt_ref"] = _sim_services.SimTime_gmt_ref_set
    __swig_getmethods__["gmt_ref"] = _sim_services.SimTime_gmt_ref_get
    if _newclass:
        gmt_ref = _swig_property(_sim_services.SimTime_gmt_ref_get, _sim_services.SimTime_gmt_ref_set)
    __swig_setmethods__["gmt_sec_ref"] = _sim_services.SimTime_gmt_sec_ref_set
    __swig_getmethods__["gmt_sec_ref"] = _sim_services.SimTime_gmt_sec_ref_get
    if _newclass:
        gmt_sec_ref = _swig_property(_sim_services.SimTime_gmt_sec_ref_get, _sim_services.SimTime_gmt_sec_ref_set)
    __swig_setmethods__["gmt_time"] = _sim_services.SimTime_gmt_time_set
    __swig_getmethods__["gmt_time"] = _sim_services.SimTime_gmt_time_get
    if _newclass:
        gmt_time = _swig_property(_sim_services.SimTime_gmt_time_get, _sim_services.SimTime_gmt_time_set)
    __swig_setmethods__["met_ref"] = _sim_services.SimTime_met_ref_set
    __swig_getmethods__["met_ref"] = _sim_services.SimTime_met_ref_get
    if _newclass:
        met_ref = _swig_property(_sim_services.SimTime_met_ref_get, _sim_services.SimTime_met_ref_set)
    __swig_setmethods__["met_sec_ref"] = _sim_services.SimTime_met_sec_ref_set
    __swig_getmethods__["met_sec_ref"] = _sim_services.SimTime_met_sec_ref_get
    if _newclass:
        met_sec_ref = _swig_property(_sim_services.SimTime_met_sec_ref_get, _sim_services.SimTime_met_sec_ref_set)
    __swig_setmethods__["met_time"] = _sim_services.SimTime_met_time_set
    __swig_getmethods__["met_time"] = _sim_services.SimTime_met_time_get
    if _newclass:
        met_time = _swig_property(_sim_services.SimTime_met_time_get, _sim_services.SimTime_met_time_set)

    def __init__(self, *args):
        this = _sim_services.new_SimTime(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init_times(self, *args):
        return _sim_services.SimTime_init_times(self, *args)

    def get_rettime(self, *args):
        return _sim_services.SimTime_get_rettime(self, *args)

    def get_gmttime(self, *args):
        return _sim_services.SimTime_get_gmttime(self, *args)

    def get_mettime(self, *args):
        return _sim_services.SimTime_get_mettime(self, *args)

    def get_rettime_struct(self, *args):
        return _sim_services.SimTime_get_rettime_struct(self, *args)

    def get_gmttime_struct(self, *args):
        return _sim_services.SimTime_get_gmttime_struct(self, *args)

    def get_mettime_struct(self, *args):
        return _sim_services.SimTime_get_mettime_struct(self, *args)
    __swig_destroy__ = _sim_services.delete_SimTime
    __del__ = lambda self: None
SimTime_swigregister = _sim_services.SimTime_swigregister
SimTime_swigregister(SimTime)


def get_rettime(*args):
    return _sim_services.get_rettime(*args)
get_rettime = _sim_services.get_rettime

def get_gmttime(*args):
    return _sim_services.get_gmttime(*args)
get_gmttime = _sim_services.get_gmttime

def get_mettime(*args):
    return _sim_services.get_mettime(*args)
get_mettime = _sim_services.get_mettime

def get_rettime_struct(*args):
    return _sim_services.get_rettime_struct(*args)
get_rettime_struct = _sim_services.get_rettime_struct

def get_gmttime_struct(*args):
    return _sim_services.get_gmttime_struct(*args)
get_gmttime_struct = _sim_services.get_gmttime_struct

def get_mettime_struct(*args):
    return _sim_services.get_mettime_struct(*args)
get_mettime_struct = _sim_services.get_mettime_struct

_sim_services.MS_ERROR_TIME_swigconstant(_sim_services)
MS_ERROR_TIME = _sim_services.MS_ERROR_TIME

_sim_services.MS_ERROR_PORT_swigconstant(_sim_services)
MS_ERROR_PORT = _sim_services.MS_ERROR_PORT

_sim_services.MS_ERROR_NAME_swigconstant(_sim_services)
MS_ERROR_NAME = _sim_services.MS_ERROR_NAME

_sim_services.MS_NoCmd_swigconstant(_sim_services)
MS_NoCmd = _sim_services.MS_NoCmd

_sim_services.MS_FreezeCmd_swigconstant(_sim_services)
MS_FreezeCmd = _sim_services.MS_FreezeCmd

_sim_services.MS_RunCmd_swigconstant(_sim_services)
MS_RunCmd = _sim_services.MS_RunCmd

_sim_services.MS_ExitCmd_swigconstant(_sim_services)
MS_ExitCmd = _sim_services.MS_ExitCmd

_sim_services.MS_ErrorCmd_swigconstant(_sim_services)
MS_ErrorCmd = _sim_services.MS_ErrorCmd

_sim_services.MS_ReconnectCmd_swigconstant(_sim_services)
MS_ReconnectCmd = _sim_services.MS_ReconnectCmd

_sim_services.MS_ChkpntDumpAsciiCmd_swigconstant(_sim_services)
MS_ChkpntDumpAsciiCmd = _sim_services.MS_ChkpntDumpAsciiCmd

_sim_services.MS_ChkpntLoadAsciiCmd_swigconstant(_sim_services)
MS_ChkpntLoadAsciiCmd = _sim_services.MS_ChkpntLoadAsciiCmd

_sim_services.MS_ChkpntDumpBinCmd_swigconstant(_sim_services)
MS_ChkpntDumpBinCmd = _sim_services.MS_ChkpntDumpBinCmd

_sim_services.MS_ChkpntLoadBinCmd_swigconstant(_sim_services)
MS_ChkpntLoadBinCmd = _sim_services.MS_ChkpntLoadBinCmd
class MSConnect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSConnect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSConnect, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_MSConnect
    __del__ = lambda self: None

    def set_sync_wait_limit(self, *args):
        return _sim_services.MSConnect_set_sync_wait_limit(self, *args)

    def add_sim_args(self, *args):
        return _sim_services.MSConnect_add_sim_args(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MSConnect_process_sim_args(self, *args)

    def accept(self, *args):
        return _sim_services.MSConnect_accept(self, *args)

    def connect(self, *args):
        return _sim_services.MSConnect_connect(self, *args)

    def disconnect(self, *args):
        return _sim_services.MSConnect_disconnect(self, *args)

    def read_time(self, *args):
        return _sim_services.MSConnect_read_time(self, *args)

    def read_port(self, *args):
        return _sim_services.MSConnect_read_port(self, *args)

    def read_name(self, *args):
        return _sim_services.MSConnect_read_name(self, *args)

    def read_command(self, *args):
        return _sim_services.MSConnect_read_command(self, *args)

    def write_time(self, *args):
        return _sim_services.MSConnect_write_time(self, *args)

    def write_port(self, *args):
        return _sim_services.MSConnect_write_port(self, *args)

    def write_name(self, *args):
        return _sim_services.MSConnect_write_name(self, *args)

    def write_command(self, *args):
        return _sim_services.MSConnect_write_command(self, *args)
    __swig_setmethods__["sync_wait_limit"] = _sim_services.MSConnect_sync_wait_limit_set
    __swig_getmethods__["sync_wait_limit"] = _sim_services.MSConnect_sync_wait_limit_get
    if _newclass:
        sync_wait_limit = _swig_property(_sim_services.MSConnect_sync_wait_limit_get, _sim_services.MSConnect_sync_wait_limit_set)
MSConnect_swigregister = _sim_services.MSConnect_swigregister
MSConnect_swigregister(MSConnect)

class MSSocket(MSConnect):
    __swig_setmethods__ = {}
    for _s in [MSConnect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSSocket, name, value)
    __swig_getmethods__ = {}
    for _s in [MSConnect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MSSocket, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MSSocket(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MSSocket
    __del__ = lambda self: None

    def set_sync_wait_limit(self, *args):
        return _sim_services.MSSocket_set_sync_wait_limit(self, *args)

    def add_sim_args(self, *args):
        return _sim_services.MSSocket_add_sim_args(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MSSocket_process_sim_args(self, *args)

    def accept(self, *args):
        return _sim_services.MSSocket_accept(self, *args)

    def connect(self, *args):
        return _sim_services.MSSocket_connect(self, *args)

    def disconnect(self, *args):
        return _sim_services.MSSocket_disconnect(self, *args)

    def read_time(self, *args):
        return _sim_services.MSSocket_read_time(self, *args)

    def read_command(self, *args):
        return _sim_services.MSSocket_read_command(self, *args)

    def read_port(self, *args):
        return _sim_services.MSSocket_read_port(self, *args)

    def read_name(self, *args):
        return _sim_services.MSSocket_read_name(self, *args)

    def write_time(self, *args):
        return _sim_services.MSSocket_write_time(self, *args)

    def write_command(self, *args):
        return _sim_services.MSSocket_write_command(self, *args)

    def write_port(self, *args):
        return _sim_services.MSSocket_write_port(self, *args)

    def write_name(self, *args):
        return _sim_services.MSSocket_write_name(self, *args)
    __swig_setmethods__["tc_dev"] = _sim_services.MSSocket_tc_dev_set
    __swig_getmethods__["tc_dev"] = _sim_services.MSSocket_tc_dev_get
    if _newclass:
        tc_dev = _swig_property(_sim_services.MSSocket_tc_dev_get, _sim_services.MSSocket_tc_dev_set)
    __swig_setmethods__["sync_port_tag"] = _sim_services.MSSocket_sync_port_tag_set
    __swig_getmethods__["sync_port_tag"] = _sim_services.MSSocket_sync_port_tag_get
    if _newclass:
        sync_port_tag = _swig_property(_sim_services.MSSocket_sync_port_tag_get, _sim_services.MSSocket_sync_port_tag_set)
MSSocket_swigregister = _sim_services.MSSocket_swigregister
MSSocket_swigregister(MSSocket)


_sim_services.TSM_SUCCESS_swigconstant(_sim_services)
TSM_SUCCESS = _sim_services.TSM_SUCCESS

_sim_services.TSM_FAIL_swigconstant(_sim_services)
TSM_FAIL = _sim_services.TSM_FAIL

_sim_services.TSM_MAX_TIMEOUT_LIMIT_swigconstant(_sim_services)
TSM_MAX_TIMEOUT_LIMIT = _sim_services.TSM_MAX_TIMEOUT_LIMIT
class TSMDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSMDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSMDevice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _sim_services.TSMDevice_size_set
    __swig_getmethods__["size"] = _sim_services.TSMDevice_size_get
    if _newclass:
        size = _swig_property(_sim_services.TSMDevice_size_get, _sim_services.TSMDevice_size_set)
    __swig_setmethods__["addr"] = _sim_services.TSMDevice_addr_set
    __swig_getmethods__["addr"] = _sim_services.TSMDevice_addr_get
    if _newclass:
        addr = _swig_property(_sim_services.TSMDevice_addr_get, _sim_services.TSMDevice_addr_set)
    __swig_setmethods__["key_file"] = _sim_services.TSMDevice_key_file_set
    __swig_getmethods__["key_file"] = _sim_services.TSMDevice_key_file_get
    if _newclass:
        key_file = _swig_property(_sim_services.TSMDevice_key_file_get, _sim_services.TSMDevice_key_file_set)
    __swig_setmethods__["key_id"] = _sim_services.TSMDevice_key_id_set
    __swig_getmethods__["key_id"] = _sim_services.TSMDevice_key_id_get
    if _newclass:
        key_id = _swig_property(_sim_services.TSMDevice_key_id_get, _sim_services.TSMDevice_key_id_set)
    __swig_setmethods__["key"] = _sim_services.TSMDevice_key_set
    __swig_getmethods__["key"] = _sim_services.TSMDevice_key_get
    if _newclass:
        key = _swig_property(_sim_services.TSMDevice_key_get, _sim_services.TSMDevice_key_set)
    __swig_setmethods__["shmid"] = _sim_services.TSMDevice_shmid_set
    __swig_getmethods__["shmid"] = _sim_services.TSMDevice_shmid_get
    if _newclass:
        shmid = _swig_property(_sim_services.TSMDevice_shmid_get, _sim_services.TSMDevice_shmid_set)
    __swig_setmethods__["timeout_limit"] = _sim_services.TSMDevice_timeout_limit_set
    __swig_getmethods__["timeout_limit"] = _sim_services.TSMDevice_timeout_limit_get
    if _newclass:
        timeout_limit = _swig_property(_sim_services.TSMDevice_timeout_limit_get, _sim_services.TSMDevice_timeout_limit_set)
    __swig_setmethods__["default_val"] = _sim_services.TSMDevice_default_val_set
    __swig_getmethods__["default_val"] = _sim_services.TSMDevice_default_val_get
    if _newclass:
        default_val = _swig_property(_sim_services.TSMDevice_default_val_get, _sim_services.TSMDevice_default_val_set)
    __swig_setmethods__["use_lock"] = _sim_services.TSMDevice_use_lock_set
    __swig_getmethods__["use_lock"] = _sim_services.TSMDevice_use_lock_get
    if _newclass:
        use_lock = _swig_property(_sim_services.TSMDevice_use_lock_get, _sim_services.TSMDevice_use_lock_set)
    __swig_setmethods__["rwlattr"] = _sim_services.TSMDevice_rwlattr_set
    __swig_getmethods__["rwlattr"] = _sim_services.TSMDevice_rwlattr_get
    if _newclass:
        rwlattr = _swig_property(_sim_services.TSMDevice_rwlattr_get, _sim_services.TSMDevice_rwlattr_set)
    __swig_setmethods__["rwlock_addr"] = _sim_services.TSMDevice_rwlock_addr_set
    __swig_getmethods__["rwlock_addr"] = _sim_services.TSMDevice_rwlock_addr_get
    if _newclass:
        rwlock_addr = _swig_property(_sim_services.TSMDevice_rwlock_addr_get, _sim_services.TSMDevice_rwlock_addr_set)

    def __init__(self):
        this = _sim_services.new_TSMDevice()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TSMDevice
    __del__ = lambda self: None
TSMDevice_swigregister = _sim_services.TSMDevice_swigregister
TSMDevice_swigregister(TSMDevice)


_sim_services.MSQ_MAXSIZE_swigconstant(_sim_services)
MSQ_MAXSIZE = _sim_services.MSQ_MAXSIZE
class MSSharedMemData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSSharedMemData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MSSharedMemData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["master_pid"] = _sim_services.MSSharedMemData_master_pid_set
    __swig_getmethods__["master_pid"] = _sim_services.MSSharedMemData_master_pid_get
    if _newclass:
        master_pid = _swig_property(_sim_services.MSSharedMemData_master_pid_get, _sim_services.MSSharedMemData_master_pid_set)
    __swig_setmethods__["master_time"] = _sim_services.MSSharedMemData_master_time_set
    __swig_getmethods__["master_time"] = _sim_services.MSSharedMemData_master_time_get
    if _newclass:
        master_time = _swig_property(_sim_services.MSSharedMemData_master_time_get, _sim_services.MSSharedMemData_master_time_set)
    __swig_setmethods__["master_time_front"] = _sim_services.MSSharedMemData_master_time_front_set
    __swig_getmethods__["master_time_front"] = _sim_services.MSSharedMemData_master_time_front_get
    if _newclass:
        master_time_front = _swig_property(_sim_services.MSSharedMemData_master_time_front_get, _sim_services.MSSharedMemData_master_time_front_set)
    __swig_setmethods__["master_time_back"] = _sim_services.MSSharedMemData_master_time_back_set
    __swig_getmethods__["master_time_back"] = _sim_services.MSSharedMemData_master_time_back_get
    if _newclass:
        master_time_back = _swig_property(_sim_services.MSSharedMemData_master_time_back_get, _sim_services.MSSharedMemData_master_time_back_set)
    __swig_setmethods__["master_command"] = _sim_services.MSSharedMemData_master_command_set
    __swig_getmethods__["master_command"] = _sim_services.MSSharedMemData_master_command_get
    if _newclass:
        master_command = _swig_property(_sim_services.MSSharedMemData_master_command_get, _sim_services.MSSharedMemData_master_command_set)
    __swig_setmethods__["master_command_front"] = _sim_services.MSSharedMemData_master_command_front_set
    __swig_getmethods__["master_command_front"] = _sim_services.MSSharedMemData_master_command_front_get
    if _newclass:
        master_command_front = _swig_property(_sim_services.MSSharedMemData_master_command_front_get, _sim_services.MSSharedMemData_master_command_front_set)
    __swig_setmethods__["master_command_back"] = _sim_services.MSSharedMemData_master_command_back_set
    __swig_getmethods__["master_command_back"] = _sim_services.MSSharedMemData_master_command_back_get
    if _newclass:
        master_command_back = _swig_property(_sim_services.MSSharedMemData_master_command_back_get, _sim_services.MSSharedMemData_master_command_back_set)
    __swig_setmethods__["slave_command"] = _sim_services.MSSharedMemData_slave_command_set
    __swig_getmethods__["slave_command"] = _sim_services.MSSharedMemData_slave_command_get
    if _newclass:
        slave_command = _swig_property(_sim_services.MSSharedMemData_slave_command_get, _sim_services.MSSharedMemData_slave_command_set)
    __swig_setmethods__["slave_command_front"] = _sim_services.MSSharedMemData_slave_command_front_set
    __swig_getmethods__["slave_command_front"] = _sim_services.MSSharedMemData_slave_command_front_get
    if _newclass:
        slave_command_front = _swig_property(_sim_services.MSSharedMemData_slave_command_front_get, _sim_services.MSSharedMemData_slave_command_front_set)
    __swig_setmethods__["slave_command_back"] = _sim_services.MSSharedMemData_slave_command_back_set
    __swig_getmethods__["slave_command_back"] = _sim_services.MSSharedMemData_slave_command_back_get
    if _newclass:
        slave_command_back = _swig_property(_sim_services.MSSharedMemData_slave_command_back_get, _sim_services.MSSharedMemData_slave_command_back_set)
    __swig_setmethods__["slave_port"] = _sim_services.MSSharedMemData_slave_port_set
    __swig_getmethods__["slave_port"] = _sim_services.MSSharedMemData_slave_port_get
    if _newclass:
        slave_port = _swig_property(_sim_services.MSSharedMemData_slave_port_get, _sim_services.MSSharedMemData_slave_port_set)
    __swig_setmethods__["chkpnt_name"] = _sim_services.MSSharedMemData_chkpnt_name_set
    __swig_getmethods__["chkpnt_name"] = _sim_services.MSSharedMemData_chkpnt_name_get
    if _newclass:
        chkpnt_name = _swig_property(_sim_services.MSSharedMemData_chkpnt_name_get, _sim_services.MSSharedMemData_chkpnt_name_set)

    def __init__(self):
        this = _sim_services.new_MSSharedMemData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MSSharedMemData
    __del__ = lambda self: None
MSSharedMemData_swigregister = _sim_services.MSSharedMemData_swigregister
MSSharedMemData_swigregister(MSSharedMemData)

class MSSharedMem(MSConnect):
    __swig_setmethods__ = {}
    for _s in [MSConnect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MSSharedMem, name, value)
    __swig_getmethods__ = {}
    for _s in [MSConnect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MSSharedMem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MSSharedMem(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MSSharedMem
    __del__ = lambda self: None

    def set_sync_wait_limit(self, *args):
        return _sim_services.MSSharedMem_set_sync_wait_limit(self, *args)

    def add_sim_args(self, *args):
        return _sim_services.MSSharedMem_add_sim_args(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MSSharedMem_process_sim_args(self, *args)

    def accept(self, *args):
        return _sim_services.MSSharedMem_accept(self, *args)

    def connect(self, *args):
        return _sim_services.MSSharedMem_connect(self, *args)

    def disconnect(self, *args):
        return _sim_services.MSSharedMem_disconnect(self, *args)

    def read_time(self, *args):
        return _sim_services.MSSharedMem_read_time(self, *args)

    def read_command(self, *args):
        return _sim_services.MSSharedMem_read_command(self, *args)

    def read_port(self, *args):
        return _sim_services.MSSharedMem_read_port(self, *args)

    def read_name(self, *args):
        return _sim_services.MSSharedMem_read_name(self, *args)

    def write_time(self, *args):
        return _sim_services.MSSharedMem_write_time(self, *args)

    def write_command(self, *args):
        return _sim_services.MSSharedMem_write_command(self, *args)

    def write_port(self, *args):
        return _sim_services.MSSharedMem_write_port(self, *args)

    def write_name(self, *args):
        return _sim_services.MSSharedMem_write_name(self, *args)

    def read_wait(self, *args):
        return _sim_services.MSSharedMem_read_wait(self, *args)
    __swig_setmethods__["tsm_dev"] = _sim_services.MSSharedMem_tsm_dev_set
    __swig_getmethods__["tsm_dev"] = _sim_services.MSSharedMem_tsm_dev_get
    if _newclass:
        tsm_dev = _swig_property(_sim_services.MSSharedMem_tsm_dev_get, _sim_services.MSSharedMem_tsm_dev_set)
    __swig_setmethods__["shm_addr"] = _sim_services.MSSharedMem_shm_addr_set
    __swig_getmethods__["shm_addr"] = _sim_services.MSSharedMem_shm_addr_get
    if _newclass:
        shm_addr = _swig_property(_sim_services.MSSharedMem_shm_addr_get, _sim_services.MSSharedMem_shm_addr_set)
MSSharedMem_swigregister = _sim_services.MSSharedMem_swigregister
MSSharedMem_swigregister(MSSharedMem)


_sim_services.TRICK_SSH_swigconstant(_sim_services)
TRICK_SSH = _sim_services.TRICK_SSH

_sim_services.TRICK_RSH_swigconstant(_sim_services)
TRICK_RSH = _sim_services.TRICK_RSH

_sim_services.TRICK_USER_REMOTE_SH_swigconstant(_sim_services)
TRICK_USER_REMOTE_SH = _sim_services.TRICK_USER_REMOTE_SH
class slaveVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, slaveVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, slaveVector, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _sim_services.slaveVector_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _sim_services.slaveVector___nonzero__(self, *args)

    def __bool__(self, *args):
        return _sim_services.slaveVector___bool__(self, *args)

    def __len__(self, *args):
        return _sim_services.slaveVector___len__(self, *args)

    def __getslice__(self, *args):
        return _sim_services.slaveVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _sim_services.slaveVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _sim_services.slaveVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _sim_services.slaveVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_services.slaveVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_services.slaveVector___setitem__(self, *args)

    def pop(self, *args):
        return _sim_services.slaveVector_pop(self, *args)

    def append(self, *args):
        return _sim_services.slaveVector_append(self, *args)

    def empty(self, *args):
        return _sim_services.slaveVector_empty(self, *args)

    def size(self, *args):
        return _sim_services.slaveVector_size(self, *args)

    def swap(self, *args):
        return _sim_services.slaveVector_swap(self, *args)

    def begin(self, *args):
        return _sim_services.slaveVector_begin(self, *args)

    def end(self, *args):
        return _sim_services.slaveVector_end(self, *args)

    def rbegin(self, *args):
        return _sim_services.slaveVector_rbegin(self, *args)

    def rend(self, *args):
        return _sim_services.slaveVector_rend(self, *args)

    def clear(self, *args):
        return _sim_services.slaveVector_clear(self, *args)

    def get_allocator(self, *args):
        return _sim_services.slaveVector_get_allocator(self, *args)

    def pop_back(self, *args):
        return _sim_services.slaveVector_pop_back(self, *args)

    def erase(self, *args):
        return _sim_services.slaveVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_services.new_slaveVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, *args):
        return _sim_services.slaveVector_push_back(self, *args)

    def front(self, *args):
        return _sim_services.slaveVector_front(self, *args)

    def back(self, *args):
        return _sim_services.slaveVector_back(self, *args)

    def assign(self, *args):
        return _sim_services.slaveVector_assign(self, *args)

    def resize(self, *args):
        return _sim_services.slaveVector_resize(self, *args)

    def insert(self, *args):
        return _sim_services.slaveVector_insert(self, *args)

    def reserve(self, *args):
        return _sim_services.slaveVector_reserve(self, *args)

    def capacity(self, *args):
        return _sim_services.slaveVector_capacity(self, *args)
    __swig_destroy__ = _sim_services.delete_slaveVector
    __del__ = lambda self: None
slaveVector_swigregister = _sim_services.slaveVector_swigregister
slaveVector_swigregister(slaveVector)

class SlaveInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlaveInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlaveInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_SlaveInfo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["enabled"] = _sim_services.SlaveInfo_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.SlaveInfo_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.SlaveInfo_enabled_get, _sim_services.SlaveInfo_enabled_set)
    __swig_setmethods__["activated"] = _sim_services.SlaveInfo_activated_set
    __swig_getmethods__["activated"] = _sim_services.SlaveInfo_activated_get
    if _newclass:
        activated = _swig_property(_sim_services.SlaveInfo_activated_get, _sim_services.SlaveInfo_activated_set)
    __swig_setmethods__["slave_type"] = _sim_services.SlaveInfo_slave_type_set
    __swig_getmethods__["slave_type"] = _sim_services.SlaveInfo_slave_type_get
    if _newclass:
        slave_type = _swig_property(_sim_services.SlaveInfo_slave_type_get, _sim_services.SlaveInfo_slave_type_set)
    __swig_setmethods__["dmtcp_port"] = _sim_services.SlaveInfo_dmtcp_port_set
    __swig_getmethods__["dmtcp_port"] = _sim_services.SlaveInfo_dmtcp_port_get
    if _newclass:
        dmtcp_port = _swig_property(_sim_services.SlaveInfo_dmtcp_port_get, _sim_services.SlaveInfo_dmtcp_port_set)
    __swig_setmethods__["remote_shell"] = _sim_services.SlaveInfo_remote_shell_set
    __swig_getmethods__["remote_shell"] = _sim_services.SlaveInfo_remote_shell_get
    if _newclass:
        remote_shell = _swig_property(_sim_services.SlaveInfo_remote_shell_get, _sim_services.SlaveInfo_remote_shell_set)
    __swig_setmethods__["user_remote_shell"] = _sim_services.SlaveInfo_user_remote_shell_set
    __swig_getmethods__["user_remote_shell"] = _sim_services.SlaveInfo_user_remote_shell_get
    if _newclass:
        user_remote_shell = _swig_property(_sim_services.SlaveInfo_user_remote_shell_get, _sim_services.SlaveInfo_user_remote_shell_set)
    __swig_setmethods__["remote_shell_args"] = _sim_services.SlaveInfo_remote_shell_args_set
    __swig_getmethods__["remote_shell_args"] = _sim_services.SlaveInfo_remote_shell_args_get
    if _newclass:
        remote_shell_args = _swig_property(_sim_services.SlaveInfo_remote_shell_args_get, _sim_services.SlaveInfo_remote_shell_args_set)
    __swig_setmethods__["machine_name"] = _sim_services.SlaveInfo_machine_name_set
    __swig_getmethods__["machine_name"] = _sim_services.SlaveInfo_machine_name_get
    if _newclass:
        machine_name = _swig_property(_sim_services.SlaveInfo_machine_name_get, _sim_services.SlaveInfo_machine_name_set)
    __swig_setmethods__["machine_display"] = _sim_services.SlaveInfo_machine_display_set
    __swig_getmethods__["machine_display"] = _sim_services.SlaveInfo_machine_display_get
    if _newclass:
        machine_display = _swig_property(_sim_services.SlaveInfo_machine_display_get, _sim_services.SlaveInfo_machine_display_set)
    __swig_setmethods__["sim_path"] = _sim_services.SlaveInfo_sim_path_set
    __swig_getmethods__["sim_path"] = _sim_services.SlaveInfo_sim_path_get
    if _newclass:
        sim_path = _swig_property(_sim_services.SlaveInfo_sim_path_get, _sim_services.SlaveInfo_sim_path_set)
    __swig_setmethods__["S_main_name"] = _sim_services.SlaveInfo_S_main_name_set
    __swig_getmethods__["S_main_name"] = _sim_services.SlaveInfo_S_main_name_get
    if _newclass:
        S_main_name = _swig_property(_sim_services.SlaveInfo_S_main_name_get, _sim_services.SlaveInfo_S_main_name_set)
    __swig_setmethods__["chkpnt_dump_auto"] = _sim_services.SlaveInfo_chkpnt_dump_auto_set
    __swig_getmethods__["chkpnt_dump_auto"] = _sim_services.SlaveInfo_chkpnt_dump_auto_get
    if _newclass:
        chkpnt_dump_auto = _swig_property(_sim_services.SlaveInfo_chkpnt_dump_auto_get, _sim_services.SlaveInfo_chkpnt_dump_auto_set)
    __swig_setmethods__["chkpnt_load_auto"] = _sim_services.SlaveInfo_chkpnt_load_auto_set
    __swig_getmethods__["chkpnt_load_auto"] = _sim_services.SlaveInfo_chkpnt_load_auto_get
    if _newclass:
        chkpnt_load_auto = _swig_property(_sim_services.SlaveInfo_chkpnt_load_auto_get, _sim_services.SlaveInfo_chkpnt_load_auto_set)
    __swig_setmethods__["chkpnt_binary"] = _sim_services.SlaveInfo_chkpnt_binary_set
    __swig_getmethods__["chkpnt_binary"] = _sim_services.SlaveInfo_chkpnt_binary_get
    if _newclass:
        chkpnt_binary = _swig_property(_sim_services.SlaveInfo_chkpnt_binary_get, _sim_services.SlaveInfo_chkpnt_binary_set)
    __swig_setmethods__["chkpnt_name"] = _sim_services.SlaveInfo_chkpnt_name_set
    __swig_getmethods__["chkpnt_name"] = _sim_services.SlaveInfo_chkpnt_name_get
    if _newclass:
        chkpnt_name = _swig_property(_sim_services.SlaveInfo_chkpnt_name_get, _sim_services.SlaveInfo_chkpnt_name_set)
    __swig_setmethods__["run_input_file"] = _sim_services.SlaveInfo_run_input_file_set
    __swig_getmethods__["run_input_file"] = _sim_services.SlaveInfo_run_input_file_get
    if _newclass:
        run_input_file = _swig_property(_sim_services.SlaveInfo_run_input_file_get, _sim_services.SlaveInfo_run_input_file_set)
    __swig_setmethods__["other_args"] = _sim_services.SlaveInfo_other_args_set
    __swig_getmethods__["other_args"] = _sim_services.SlaveInfo_other_args_get
    if _newclass:
        other_args = _swig_property(_sim_services.SlaveInfo_other_args_get, _sim_services.SlaveInfo_other_args_set)
    __swig_setmethods__["sync_error_terminate"] = _sim_services.SlaveInfo_sync_error_terminate_set
    __swig_getmethods__["sync_error_terminate"] = _sim_services.SlaveInfo_sync_error_terminate_get
    if _newclass:
        sync_error_terminate = _swig_property(_sim_services.SlaveInfo_sync_error_terminate_get, _sim_services.SlaveInfo_sync_error_terminate_set)
    __swig_setmethods__["sync_wait_limit"] = _sim_services.SlaveInfo_sync_wait_limit_set
    __swig_getmethods__["sync_wait_limit"] = _sim_services.SlaveInfo_sync_wait_limit_get
    if _newclass:
        sync_wait_limit = _swig_property(_sim_services.SlaveInfo_sync_wait_limit_get, _sim_services.SlaveInfo_sync_wait_limit_set)
    __swig_setmethods__["reconnect_wait_limit"] = _sim_services.SlaveInfo_reconnect_wait_limit_set
    __swig_getmethods__["reconnect_wait_limit"] = _sim_services.SlaveInfo_reconnect_wait_limit_get
    if _newclass:
        reconnect_wait_limit = _swig_property(_sim_services.SlaveInfo_reconnect_wait_limit_get, _sim_services.SlaveInfo_reconnect_wait_limit_set)
    __swig_setmethods__["reconnect_count"] = _sim_services.SlaveInfo_reconnect_count_set
    __swig_getmethods__["reconnect_count"] = _sim_services.SlaveInfo_reconnect_count_get
    if _newclass:
        reconnect_count = _swig_property(_sim_services.SlaveInfo_reconnect_count_get, _sim_services.SlaveInfo_reconnect_count_set)
    __swig_setmethods__["connection"] = _sim_services.SlaveInfo_connection_set
    __swig_getmethods__["connection"] = _sim_services.SlaveInfo_connection_get
    if _newclass:
        connection = _swig_property(_sim_services.SlaveInfo_connection_get, _sim_services.SlaveInfo_connection_set)

    def set_connection_type(self, *args):
        return _sim_services.SlaveInfo_set_connection_type(self, *args)

    def start(self, *args):
        return _sim_services.SlaveInfo_start(self, *args)

    def read_slave_status(self, *args):
        return _sim_services.SlaveInfo_read_slave_status(self, *args)

    def write_master_status(self, *args):
        return _sim_services.SlaveInfo_write_master_status(self, *args)

    def write_master_chkpnt_name(self, *args):
        return _sim_services.SlaveInfo_write_master_chkpnt_name(self, *args)

    def restart_dmtcp_slave(self, *args):
        return _sim_services.SlaveInfo_restart_dmtcp_slave(self, *args)
    __swig_destroy__ = _sim_services.delete_SlaveInfo
    __del__ = lambda self: None
SlaveInfo_swigregister = _sim_services.SlaveInfo_swigregister
SlaveInfo_swigregister(SlaveInfo)

class Master(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Master, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Master, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_Master(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["enabled"] = _sim_services.Master_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.Master_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.Master_enabled_get, _sim_services.Master_enabled_set)
    __swig_setmethods__["num_slaves"] = _sim_services.Master_num_slaves_set
    __swig_getmethods__["num_slaves"] = _sim_services.Master_num_slaves_get
    if _newclass:
        num_slaves = _swig_property(_sim_services.Master_num_slaves_get, _sim_services.Master_num_slaves_set)
    __swig_setmethods__["slaves"] = _sim_services.Master_slaves_set
    __swig_getmethods__["slaves"] = _sim_services.Master_slaves_get
    if _newclass:
        slaves = _swig_property(_sim_services.Master_slaves_get, _sim_services.Master_slaves_set)

    def enable(self, *args):
        return _sim_services.Master_enable(self, *args)

    def disable(self, *args):
        return _sim_services.Master_disable(self, *args)

    def add_slave(self, *args):
        return _sim_services.Master_add_slave(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.Master_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.Master_init(self, *args)

    def end_of_frame_status_from_slave(self, *args):
        return _sim_services.Master_end_of_frame_status_from_slave(self, *args)

    def end_of_frame_status_to_slave(self, *args):
        return _sim_services.Master_end_of_frame_status_to_slave(self, *args)

    def freeze_init(self, *args):
        return _sim_services.Master_freeze_init(self, *args)

    def freeze(self, *args):
        return _sim_services.Master_freeze(self, *args)

    def checkpoint(self, *args):
        return _sim_services.Master_checkpoint(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.Master_preload_checkpoint(self, *args)

    def unfreeze(self, *args):
        return _sim_services.Master_unfreeze(self, *args)

    def shutdown(self, *args):
        return _sim_services.Master_shutdown(self, *args)
    __swig_destroy__ = _sim_services.delete_Master
    __del__ = lambda self: None
Master_swigregister = _sim_services.Master_swigregister
Master_swigregister(Master)

class Slave(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_Slave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["activated"] = _sim_services.Slave_activated_set
    __swig_getmethods__["activated"] = _sim_services.Slave_activated_get
    if _newclass:
        activated = _swig_property(_sim_services.Slave_activated_get, _sim_services.Slave_activated_set)
    __swig_setmethods__["enabled"] = _sim_services.Slave_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.Slave_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.Slave_enabled_get, _sim_services.Slave_enabled_set)
    __swig_setmethods__["reconnected"] = _sim_services.Slave_reconnected_set
    __swig_getmethods__["reconnected"] = _sim_services.Slave_reconnected_get
    if _newclass:
        reconnected = _swig_property(_sim_services.Slave_reconnected_get, _sim_services.Slave_reconnected_set)
    __swig_setmethods__["sent_reconnect_cmd"] = _sim_services.Slave_sent_reconnect_cmd_set
    __swig_getmethods__["sent_reconnect_cmd"] = _sim_services.Slave_sent_reconnect_cmd_get
    if _newclass:
        sent_reconnect_cmd = _swig_property(_sim_services.Slave_sent_reconnect_cmd_get, _sim_services.Slave_sent_reconnect_cmd_set)
    __swig_setmethods__["msg_published"] = _sim_services.Slave_msg_published_set
    __swig_getmethods__["msg_published"] = _sim_services.Slave_msg_published_get
    if _newclass:
        msg_published = _swig_property(_sim_services.Slave_msg_published_get, _sim_services.Slave_msg_published_set)
    __swig_setmethods__["chkpnt_name"] = _sim_services.Slave_chkpnt_name_set
    __swig_getmethods__["chkpnt_name"] = _sim_services.Slave_chkpnt_name_get
    if _newclass:
        chkpnt_name = _swig_property(_sim_services.Slave_chkpnt_name_get, _sim_services.Slave_chkpnt_name_set)
    __swig_setmethods__["sync_error_terminate"] = _sim_services.Slave_sync_error_terminate_set
    __swig_getmethods__["sync_error_terminate"] = _sim_services.Slave_sync_error_terminate_get
    if _newclass:
        sync_error_terminate = _swig_property(_sim_services.Slave_sync_error_terminate_get, _sim_services.Slave_sync_error_terminate_set)
    __swig_setmethods__["sync_wait_limit"] = _sim_services.Slave_sync_wait_limit_set
    __swig_getmethods__["sync_wait_limit"] = _sim_services.Slave_sync_wait_limit_get
    if _newclass:
        sync_wait_limit = _swig_property(_sim_services.Slave_sync_wait_limit_get, _sim_services.Slave_sync_wait_limit_set)
    __swig_setmethods__["connection"] = _sim_services.Slave_connection_set
    __swig_getmethods__["connection"] = _sim_services.Slave_connection_get
    if _newclass:
        connection = _swig_property(_sim_services.Slave_connection_get, _sim_services.Slave_connection_set)

    def set_connection_type(self, *args):
        return _sim_services.Slave_set_connection_type(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.Slave_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.Slave_init(self, *args)

    def dmtcp_restart(self, *args):
        return _sim_services.Slave_dmtcp_restart(self, *args)

    def get_checkpoint_name(self, *args):
        return _sim_services.Slave_get_checkpoint_name(self, *args)

    def end_of_frame(self, *args):
        return _sim_services.Slave_end_of_frame(self, *args)

    def freeze_init(self, *args):
        return _sim_services.Slave_freeze_init(self, *args)

    def freeze(self, *args):
        return _sim_services.Slave_freeze(self, *args)

    def unfreeze(self, *args):
        return _sim_services.Slave_unfreeze(self, *args)

    def shutdown(self, *args):
        return _sim_services.Slave_shutdown(self, *args)
    __swig_destroy__ = _sim_services.delete_Slave
    __del__ = lambda self: None
Slave_swigregister = _sim_services.Slave_swigregister
Slave_swigregister(Slave)


def ms_master_enable(*args):
    return _sim_services.ms_master_enable(*args)
ms_master_enable = _sim_services.ms_master_enable

def ms_master_disable(*args):
    return _sim_services.ms_master_disable(*args)
ms_master_disable = _sim_services.ms_master_disable
class CheckPointRestart(Scheduler):
    __swig_setmethods__ = {}
    for _s in [Scheduler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckPointRestart, name, value)
    __swig_getmethods__ = {}
    for _s in [Scheduler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckPointRestart, name)
    __repr__ = _swig_repr
    __swig_setmethods__["checkpoint_times"] = _sim_services.CheckPointRestart_checkpoint_times_set
    __swig_getmethods__["checkpoint_times"] = _sim_services.CheckPointRestart_checkpoint_times_get
    if _newclass:
        checkpoint_times = _swig_property(_sim_services.CheckPointRestart_checkpoint_times_get, _sim_services.CheckPointRestart_checkpoint_times_set)
    __swig_setmethods__["dmtcp_checkpoint_times"] = _sim_services.CheckPointRestart_dmtcp_checkpoint_times_set
    __swig_getmethods__["dmtcp_checkpoint_times"] = _sim_services.CheckPointRestart_dmtcp_checkpoint_times_get
    if _newclass:
        dmtcp_checkpoint_times = _swig_property(_sim_services.CheckPointRestart_dmtcp_checkpoint_times_get, _sim_services.CheckPointRestart_dmtcp_checkpoint_times_set)
    __swig_setmethods__["safestore_period"] = _sim_services.CheckPointRestart_safestore_period_set
    __swig_getmethods__["safestore_period"] = _sim_services.CheckPointRestart_safestore_period_get
    if _newclass:
        safestore_period = _swig_property(_sim_services.CheckPointRestart_safestore_period_get, _sim_services.CheckPointRestart_safestore_period_set)
    __swig_setmethods__["dmtcp_safestore_period"] = _sim_services.CheckPointRestart_dmtcp_safestore_period_set
    __swig_getmethods__["dmtcp_safestore_period"] = _sim_services.CheckPointRestart_dmtcp_safestore_period_get
    if _newclass:
        dmtcp_safestore_period = _swig_property(_sim_services.CheckPointRestart_dmtcp_safestore_period_get, _sim_services.CheckPointRestart_dmtcp_safestore_period_set)
    __swig_setmethods__["safestore_time"] = _sim_services.CheckPointRestart_safestore_time_set
    __swig_getmethods__["safestore_time"] = _sim_services.CheckPointRestart_safestore_time_get
    if _newclass:
        safestore_time = _swig_property(_sim_services.CheckPointRestart_safestore_time_get, _sim_services.CheckPointRestart_safestore_time_set)
    __swig_setmethods__["dmtcp_safestore_time"] = _sim_services.CheckPointRestart_dmtcp_safestore_time_set
    __swig_getmethods__["dmtcp_safestore_time"] = _sim_services.CheckPointRestart_dmtcp_safestore_time_get
    if _newclass:
        dmtcp_safestore_time = _swig_property(_sim_services.CheckPointRestart_dmtcp_safestore_time_get, _sim_services.CheckPointRestart_dmtcp_safestore_time_set)
    __swig_setmethods__["pre_init_checkpoint"] = _sim_services.CheckPointRestart_pre_init_checkpoint_set
    __swig_getmethods__["pre_init_checkpoint"] = _sim_services.CheckPointRestart_pre_init_checkpoint_get
    if _newclass:
        pre_init_checkpoint = _swig_property(_sim_services.CheckPointRestart_pre_init_checkpoint_get, _sim_services.CheckPointRestart_pre_init_checkpoint_set)
    __swig_setmethods__["post_init_checkpoint"] = _sim_services.CheckPointRestart_post_init_checkpoint_set
    __swig_getmethods__["post_init_checkpoint"] = _sim_services.CheckPointRestart_post_init_checkpoint_get
    if _newclass:
        post_init_checkpoint = _swig_property(_sim_services.CheckPointRestart_post_init_checkpoint_get, _sim_services.CheckPointRestart_post_init_checkpoint_set)
    __swig_setmethods__["end_checkpoint"] = _sim_services.CheckPointRestart_end_checkpoint_set
    __swig_getmethods__["end_checkpoint"] = _sim_services.CheckPointRestart_end_checkpoint_get
    if _newclass:
        end_checkpoint = _swig_property(_sim_services.CheckPointRestart_end_checkpoint_get, _sim_services.CheckPointRestart_end_checkpoint_set)
    __swig_setmethods__["safestore_enabled"] = _sim_services.CheckPointRestart_safestore_enabled_set
    __swig_getmethods__["safestore_enabled"] = _sim_services.CheckPointRestart_safestore_enabled_get
    if _newclass:
        safestore_enabled = _swig_property(_sim_services.CheckPointRestart_safestore_enabled_get, _sim_services.CheckPointRestart_safestore_enabled_set)
    __swig_setmethods__["dmtcp_safestore_enabled"] = _sim_services.CheckPointRestart_dmtcp_safestore_enabled_set
    __swig_getmethods__["dmtcp_safestore_enabled"] = _sim_services.CheckPointRestart_dmtcp_safestore_enabled_get
    if _newclass:
        dmtcp_safestore_enabled = _swig_property(_sim_services.CheckPointRestart_dmtcp_safestore_enabled_get, _sim_services.CheckPointRestart_dmtcp_safestore_enabled_set)
    __swig_setmethods__["output_file"] = _sim_services.CheckPointRestart_output_file_set
    __swig_getmethods__["output_file"] = _sim_services.CheckPointRestart_output_file_get
    if _newclass:
        output_file = _swig_property(_sim_services.CheckPointRestart_output_file_get, _sim_services.CheckPointRestart_output_file_set)
    __swig_setmethods__["load_checkpoint_file_name"] = _sim_services.CheckPointRestart_load_checkpoint_file_name_set
    __swig_getmethods__["load_checkpoint_file_name"] = _sim_services.CheckPointRestart_load_checkpoint_file_name_get
    if _newclass:
        load_checkpoint_file_name = _swig_property(_sim_services.CheckPointRestart_load_checkpoint_file_name_get, _sim_services.CheckPointRestart_load_checkpoint_file_name_set)
    __swig_setmethods__["cpu_num"] = _sim_services.CheckPointRestart_cpu_num_set
    __swig_getmethods__["cpu_num"] = _sim_services.CheckPointRestart_cpu_num_get
    if _newclass:
        cpu_num = _swig_property(_sim_services.CheckPointRestart_cpu_num_get, _sim_services.CheckPointRestart_cpu_num_set)

    def __init__(self, *args):
        this = _sim_services.new_CheckPointRestart(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def set_pre_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_set_pre_init_checkpoint(self, *args)

    def set_post_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_set_post_init_checkpoint(self, *args)

    def set_end_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_set_end_checkpoint(self, *args)

    def set_safestore_enabled(self, *args):
        return _sim_services.CheckPointRestart_set_safestore_enabled(self, *args)

    def dmtcp_set_safestore_enabled(self, *args):
        return _sim_services.CheckPointRestart_dmtcp_set_safestore_enabled(self, *args)

    def get_output_file(self, *args):
        return _sim_services.CheckPointRestart_get_output_file(self, *args)

    def get_load_file(self, *args):
        return _sim_services.CheckPointRestart_get_load_file(self, *args)

    def set_cpu_num(self, *args):
        return _sim_services.CheckPointRestart_set_cpu_num(self, *args)

    def find_write_checkpoint_jobs(self, *args):
        return _sim_services.CheckPointRestart_find_write_checkpoint_jobs(self, *args)

    def set_safestore_time(self, *args):
        return _sim_services.CheckPointRestart_set_safestore_time(self, *args)

    def dmtcp_set_safestore_time(self, *args):
        return _sim_services.CheckPointRestart_dmtcp_set_safestore_time(self, *args)

    def checkpoint(self, *args):
        return _sim_services.CheckPointRestart_checkpoint(self, *args)

    def dmtcp_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_dmtcp_checkpoint(self, *args)

    def setDMTCPFilename(self, *args):
        return _sim_services.CheckPointRestart_setDMTCPFilename(self, *args)

    def write_pre_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_pre_init_checkpoint(self, *args)

    def write_post_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_post_init_checkpoint(self, *args)

    def write_end_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_end_checkpoint(self, *args)

    def write_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_checkpoint(self, *args)

    def write_dmtcp_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_dmtcp_checkpoint(self, *args)

    def safestore_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_safestore_checkpoint(self, *args)

    def load_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_load_checkpoint(self, *args)

    def load_checkpoint_job(self, *args):
        return _sim_services.CheckPointRestart_load_checkpoint_job(self, *args)

    def load_default_data(self, *args):
        return _sim_services.CheckPointRestart_load_default_data(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.CheckPointRestart_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.CheckPointRestart_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.CheckPointRestart_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.CheckPointRestart_instrument_job_remove(self, *args)
    __swig_destroy__ = _sim_services.delete_CheckPointRestart
    __del__ = lambda self: None
CheckPointRestart_swigregister = _sim_services.CheckPointRestart_swigregister
CheckPointRestart_swigregister(CheckPointRestart)


def checkpoint_pre_init(*args):
    return _sim_services.checkpoint_pre_init(*args)
checkpoint_pre_init = _sim_services.checkpoint_pre_init

def checkpoint_post_init(*args):
    return _sim_services.checkpoint_post_init(*args)
checkpoint_post_init = _sim_services.checkpoint_post_init

def checkpoint_end(*args):
    return _sim_services.checkpoint_end(*args)
checkpoint_end = _sim_services.checkpoint_end

def get_checkpoint_pre_init(*args):
    return _sim_services.get_checkpoint_pre_init(*args)
get_checkpoint_pre_init = _sim_services.get_checkpoint_pre_init

def get_checkpoint_post_init(*args):
    return _sim_services.get_checkpoint_post_init(*args)
get_checkpoint_post_init = _sim_services.get_checkpoint_post_init

def get_checkpoint_end(*args):
    return _sim_services.get_checkpoint_end(*args)
get_checkpoint_end = _sim_services.get_checkpoint_end

def checkpoint_safestore(*args):
    return _sim_services.checkpoint_safestore(*args)
checkpoint_safestore = _sim_services.checkpoint_safestore

def checkpoint_cpu(*args):
    return _sim_services.checkpoint_cpu(*args)
checkpoint_cpu = _sim_services.checkpoint_cpu

def checkpoint_safestore_period(*args):
    return _sim_services.checkpoint_safestore_period(*args)
checkpoint_safestore_period = _sim_services.checkpoint_safestore_period

def checkpoint_get_output_file(*args):
    return _sim_services.checkpoint_get_output_file(*args)
checkpoint_get_output_file = _sim_services.checkpoint_get_output_file

def checkpoint_get_load_file(*args):
    return _sim_services.checkpoint_get_load_file(*args)
checkpoint_get_load_file = _sim_services.checkpoint_get_load_file

def checkpoint(*args):
    return _sim_services.checkpoint(*args)
checkpoint = _sim_services.checkpoint

def dmtcp_checkpoint_safestore(*args):
    return _sim_services.dmtcp_checkpoint_safestore(*args)
dmtcp_checkpoint_safestore = _sim_services.dmtcp_checkpoint_safestore

def dmtcp_checkpoint_safestore_period(*args):
    return _sim_services.dmtcp_checkpoint_safestore_period(*args)
dmtcp_checkpoint_safestore_period = _sim_services.dmtcp_checkpoint_safestore_period

def dmtcp_checkpoint(*args):
    return _sim_services.dmtcp_checkpoint(*args)
dmtcp_checkpoint = _sim_services.dmtcp_checkpoint

def checkpoint_objects(*args):
    return _sim_services.checkpoint_objects(*args)
checkpoint_objects = _sim_services.checkpoint_objects

def load_checkpoint(*args):
    return _sim_services.load_checkpoint(*args)
load_checkpoint = _sim_services.load_checkpoint

def load_checkpoint_job(*args):
    return _sim_services.load_checkpoint_job(*args)
load_checkpoint_job = _sim_services.load_checkpoint_job

def get_address(*args):
    return _sim_services.get_address(*args)
get_address = _sim_services.get_address

def next_attr_name(*args):
    return _sim_services.next_attr_name(*args)
next_attr_name = _sim_services.next_attr_name

def add_collect(*args):
    return _sim_services.add_collect(*args)
add_collect = _sim_services.add_collect

def delete_collect(*args):
    return _sim_services.delete_collect(*args)
delete_collect = _sim_services.delete_collect
class AttributesMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributesMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributesMap, name)
    __repr__ = _swig_repr
    __swig_getmethods__["attributes_map"] = lambda x: _sim_services.AttributesMap_attributes_map
    if _newclass:
        attributes_map = staticmethod(_sim_services.AttributesMap_attributes_map)

    def __init__(self, *args):
        this = _sim_services.new_AttributesMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_AttributesMap
    __del__ = lambda self: None

    def add_attr(self, *args):
        return _sim_services.AttributesMap_add_attr(self, *args)

    def get_attr(self, *args):
        return _sim_services.AttributesMap_get_attr(self, *args)

    def replace_special_chars(self, *args):
        return _sim_services.AttributesMap_replace_special_chars(self, *args)

    def type_remove_dims(self, *args):
        return _sim_services.AttributesMap_type_remove_dims(self, *args)

    def print_xml(self, *args):
        return _sim_services.AttributesMap_print_xml(self, *args)
AttributesMap_swigregister = _sim_services.AttributesMap_swigregister
AttributesMap_swigregister(AttributesMap)

def AttributesMap_attributes_map(*args):
    return _sim_services.AttributesMap_attributes_map(*args)
AttributesMap_attributes_map = _sim_services.AttributesMap_attributes_map


def sie_print_xml(*args):
    return _sim_services.sie_print_xml(*args)
sie_print_xml = _sim_services.sie_print_xml

def sie_class_attr_map_print_xml(*args):
    return _sim_services.sie_class_attr_map_print_xml(*args)
sie_class_attr_map_print_xml = _sim_services.sie_class_attr_map_print_xml

def sie_enum_attr_map_print_xml(*args):
    return _sim_services.sie_enum_attr_map_print_xml(*args)
sie_enum_attr_map_print_xml = _sim_services.sie_enum_attr_map_print_xml

def sie_top_level_objects_print_xml(*args):
    return _sim_services.sie_top_level_objects_print_xml(*args)
sie_top_level_objects_print_xml = _sim_services.sie_top_level_objects_print_xml
class MessageSubscriber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageSubscriber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageSubscriber, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _sim_services.MessageSubscriber_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.MessageSubscriber_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.MessageSubscriber_enabled_get, _sim_services.MessageSubscriber_enabled_set)
    __swig_setmethods__["color"] = _sim_services.MessageSubscriber_color_set
    __swig_getmethods__["color"] = _sim_services.MessageSubscriber_color_get
    if _newclass:
        color = _swig_property(_sim_services.MessageSubscriber_color_get, _sim_services.MessageSubscriber_color_set)
    __swig_setmethods__["name"] = _sim_services.MessageSubscriber_name_set
    __swig_getmethods__["name"] = _sim_services.MessageSubscriber_name_get
    if _newclass:
        name = _swig_property(_sim_services.MessageSubscriber_name_get, _sim_services.MessageSubscriber_name_set)

    def set_enabled(self, *args):
        return _sim_services.MessageSubscriber_set_enabled(self, *args)

    def set_color(self, *args):
        return _sim_services.MessageSubscriber_set_color(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageSubscriber
    __del__ = lambda self: None

    def init(self, *args):
        return _sim_services.MessageSubscriber_init(self, *args)

    def update(self, *args):
        return _sim_services.MessageSubscriber_update(self, *args)

    def shutdown(self, *args):
        return _sim_services.MessageSubscriber_shutdown(self, *args)
MessageSubscriber_swigregister = _sim_services.MessageSubscriber_swigregister
MessageSubscriber_swigregister(MessageSubscriber)

class MessageCout(MessageSubscriber):
    __swig_setmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageCout, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageCout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MessageCout(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def update(self, *args):
        return _sim_services.MessageCout_update(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageCout
    __del__ = lambda self: None
MessageCout_swigregister = _sim_services.MessageCout_swigregister
MessageCout_swigregister(MessageCout)

class MessageThreadedCout(MessageSubscriber, ThreadBase):
    __swig_setmethods__ = {}
    for _s in [MessageSubscriber, ThreadBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageThreadedCout, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageSubscriber, ThreadBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageThreadedCout, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_buffer_items"] = _sim_services.MessageThreadedCout_max_buffer_items_set
    __swig_getmethods__["max_buffer_items"] = _sim_services.MessageThreadedCout_max_buffer_items_get
    if _newclass:
        max_buffer_items = _swig_property(_sim_services.MessageThreadedCout_max_buffer_items_get, _sim_services.MessageThreadedCout_max_buffer_items_set)
    __swig_setmethods__["max_buffer_size"] = _sim_services.MessageThreadedCout_max_buffer_size_set
    __swig_getmethods__["max_buffer_size"] = _sim_services.MessageThreadedCout_max_buffer_size_get
    if _newclass:
        max_buffer_size = _swig_property(_sim_services.MessageThreadedCout_max_buffer_size_get, _sim_services.MessageThreadedCout_max_buffer_size_set)
    __swig_setmethods__["color_code"] = _sim_services.MessageThreadedCout_color_code_set
    __swig_getmethods__["color_code"] = _sim_services.MessageThreadedCout_color_code_get
    if _newclass:
        color_code = _swig_property(_sim_services.MessageThreadedCout_color_code_get, _sim_services.MessageThreadedCout_color_code_set)

    def __init__(self, *args):
        this = _sim_services.new_MessageThreadedCout(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MessageThreadedCout
    __del__ = lambda self: None

    def init(self, *args):
        return _sim_services.MessageThreadedCout_init(self, *args)

    def update(self, *args):
        return _sim_services.MessageThreadedCout_update(self, *args)

    def shutdown(self, *args):
        return _sim_services.MessageThreadedCout_shutdown(self, *args)

    def thread_body(self, *args):
        return _sim_services.MessageThreadedCout_thread_body(self, *args)

    def dump(self, *args):
        return _sim_services.MessageThreadedCout_dump(self, *args)

    def write_pending_messages(self, *args):
        return _sim_services.MessageThreadedCout_write_pending_messages(self, *args)
MessageThreadedCout_swigregister = _sim_services.MessageThreadedCout_swigregister
MessageThreadedCout_swigregister(MessageThreadedCout)

class MessageFile(MessageSubscriber):
    __swig_setmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageFile, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file_name"] = _sim_services.MessageFile_file_name_set
    __swig_getmethods__["file_name"] = _sim_services.MessageFile_file_name_get
    if _newclass:
        file_name = _swig_property(_sim_services.MessageFile_file_name_get, _sim_services.MessageFile_file_name_set)

    def __init__(self, *args):
        this = _sim_services.new_MessageFile(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MessageFile
    __del__ = lambda self: None

    def update(self, *args):
        return _sim_services.MessageFile_update(self, *args)

    def set_file_name(self, *args):
        return _sim_services.MessageFile_set_file_name(self, *args)

    def init(self, *args):
        return _sim_services.MessageFile_init(self, *args)
MessageFile_swigregister = _sim_services.MessageFile_swigregister
MessageFile_swigregister(MessageFile)

class MessageLCout(MessageSubscriber):
    __swig_setmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageLCout, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageLCout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MessageLCout(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def update(self, *args):
        return _sim_services.MessageLCout_update(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageLCout
    __del__ = lambda self: None
MessageLCout_swigregister = _sim_services.MessageLCout_swigregister
MessageLCout_swigregister(MessageLCout)

class MessagePublisher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessagePublisher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessagePublisher, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sim_name"] = _sim_services.MessagePublisher_sim_name_set
    __swig_getmethods__["sim_name"] = _sim_services.MessagePublisher_sim_name_get
    if _newclass:
        sim_name = _swig_property(_sim_services.MessagePublisher_sim_name_get, _sim_services.MessagePublisher_sim_name_set)

    def __init__(self, *args):
        this = _sim_services.new_MessagePublisher(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, *args):
        return _sim_services.MessagePublisher_init(self, *args)

    def subscribe(self, *args):
        return _sim_services.MessagePublisher_subscribe(self, *args)

    def unsubscribe(self, *args):
        return _sim_services.MessagePublisher_unsubscribe(self, *args)

    def publish(self, *args):
        return _sim_services.MessagePublisher_publish(self, *args)

    def getSubscriber(self, *args):
        return _sim_services.MessagePublisher_getSubscriber(self, *args)
    __swig_destroy__ = _sim_services.delete_MessagePublisher
    __del__ = lambda self: None
MessagePublisher_swigregister = _sim_services.MessagePublisher_swigregister
MessagePublisher_swigregister(MessagePublisher)

class MessageTCDeviceListenThread(ThreadBase):
    __swig_setmethods__ = {}
    for _s in [ThreadBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageTCDeviceListenThread, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageTCDeviceListenThread, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MessageTCDeviceListenThread(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MessageTCDeviceListenThread
    __del__ = lambda self: None

    def get_port(self, *args):
        return _sim_services.MessageTCDeviceListenThread_get_port(self, *args)

    def init_listen_device(self, *args):
        return _sim_services.MessageTCDeviceListenThread_init_listen_device(self, *args)

    def restart(self, *args):
        return _sim_services.MessageTCDeviceListenThread_restart(self, *args)

    def thread_body(self, *args):
        return _sim_services.MessageTCDeviceListenThread_thread_body(self, *args)

    def dump(self, *args):
        return _sim_services.MessageTCDeviceListenThread_dump(self, *args)
MessageTCDeviceListenThread_swigregister = _sim_services.MessageTCDeviceListenThread_swigregister
MessageTCDeviceListenThread_swigregister(MessageTCDeviceListenThread)

class MessageTCDevice(MessageSubscriber):
    __swig_setmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageTCDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageSubscriber]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageTCDevice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MessageTCDevice(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MessageTCDevice
    __del__ = lambda self: None

    def get_listen_thread(self, *args):
        return _sim_services.MessageTCDevice_get_listen_thread(self, *args)

    def add_connection(self, *args):
        return _sim_services.MessageTCDevice_add_connection(self, *args)

    def update(self, *args):
        return _sim_services.MessageTCDevice_update(self, *args)

    def default_data(self, *args):
        return _sim_services.MessageTCDevice_default_data(self, *args)

    def init(self, *args):
        return _sim_services.MessageTCDevice_init(self, *args)

    def restart(self, *args):
        return _sim_services.MessageTCDevice_restart(self, *args)

    def shutdown(self, *args):
        return _sim_services.MessageTCDevice_shutdown(self, *args)
    __swig_setmethods__["port"] = _sim_services.MessageTCDevice_port_set
    __swig_getmethods__["port"] = _sim_services.MessageTCDevice_port_get
    if _newclass:
        port = _swig_property(_sim_services.MessageTCDevice_port_get, _sim_services.MessageTCDevice_port_set)
MessageTCDevice_swigregister = _sim_services.MessageTCDevice_swigregister
MessageTCDevice_swigregister(MessageTCDevice)


def message_subscribe(*args):
    return _sim_services.message_subscribe(*args)
message_subscribe = _sim_services.message_subscribe

def message_unsubscribe(*args):
    return _sim_services.message_unsubscribe(*args)
message_unsubscribe = _sim_services.message_unsubscribe

_sim_services.MSG_NORMAL_swigconstant(_sim_services)
MSG_NORMAL = _sim_services.MSG_NORMAL

_sim_services.MSG_INFO_swigconstant(_sim_services)
MSG_INFO = _sim_services.MSG_INFO

_sim_services.MSG_WARNING_swigconstant(_sim_services)
MSG_WARNING = _sim_services.MSG_WARNING

_sim_services.MSG_ERROR_swigconstant(_sim_services)
MSG_ERROR = _sim_services.MSG_ERROR

_sim_services.MSG_DEBUG_swigconstant(_sim_services)
MSG_DEBUG = _sim_services.MSG_DEBUG

_sim_services.MSG_PLAYBACK_swigconstant(_sim_services)
MSG_PLAYBACK = _sim_services.MSG_PLAYBACK

def message_publish(*args):
    return _sim_services.message_publish(*args)
message_publish = _sim_services.message_publish

def message_publish_standalone(*args):
    return _sim_services.message_publish_standalone(*args)
message_publish_standalone = _sim_services.message_publish_standalone

def send_hs(*args):
    return _sim_services.send_hs(*args)
send_hs = _sim_services.send_hs
class MonteVar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteVar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonteVar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _sim_services.MonteVar_name_set
    __swig_getmethods__["name"] = _sim_services.MonteVar_name_get
    if _newclass:
        name = _swig_property(_sim_services.MonteVar_name_get, _sim_services.MonteVar_name_set)
    __swig_setmethods__["unit"] = _sim_services.MonteVar_unit_set
    __swig_getmethods__["unit"] = _sim_services.MonteVar_unit_get
    if _newclass:
        unit = _swig_property(_sim_services.MonteVar_unit_get, _sim_services.MonteVar_unit_set)
    __swig_setmethods__["value"] = _sim_services.MonteVar_value_set
    __swig_getmethods__["value"] = _sim_services.MonteVar_value_get
    if _newclass:
        value = _swig_property(_sim_services.MonteVar_value_get, _sim_services.MonteVar_value_set)
    __swig_destroy__ = _sim_services.delete_MonteVar
    __del__ = lambda self: None

    def set_unit(self, *args):
        return _sim_services.MonteVar_set_unit(self, *args)

    def describe_variable(self, *args):
        return _sim_services.MonteVar_describe_variable(self, *args)
MonteVar_swigregister = _sim_services.MonteVar_swigregister
MonteVar_swigregister(MonteVar)

class MonteRun(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteRun, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonteRun, name)
    __repr__ = _swig_repr
    MC_RUN_INCOMPLETE = _sim_services.MonteRun_MC_RUN_INCOMPLETE
    MC_RUN_COMPLETE = _sim_services.MonteRun_MC_RUN_COMPLETE
    MC_RUN_DUMPED_CORE = _sim_services.MonteRun_MC_RUN_DUMPED_CORE
    MC_RUN_TIMED_OUT = _sim_services.MonteRun_MC_RUN_TIMED_OUT
    MC_CANT_CREATE_OUTPUT_DIR = _sim_services.MonteRun_MC_CANT_CREATE_OUTPUT_DIR
    MC_PROBLEM_PARSING_INPUT = _sim_services.MonteRun_MC_PROBLEM_PARSING_INPUT
    MC_UNRECOGNIZED_RETURN_CODE = _sim_services.MonteRun_MC_UNRECOGNIZED_RETURN_CODE
    __swig_setmethods__["id"] = _sim_services.MonteRun_id_set
    __swig_getmethods__["id"] = _sim_services.MonteRun_id_get
    if _newclass:
        id = _swig_property(_sim_services.MonteRun_id_get, _sim_services.MonteRun_id_set)
    __swig_setmethods__["num_tries"] = _sim_services.MonteRun_num_tries_set
    __swig_getmethods__["num_tries"] = _sim_services.MonteRun_num_tries_get
    if _newclass:
        num_tries = _swig_property(_sim_services.MonteRun_num_tries_get, _sim_services.MonteRun_num_tries_set)
    __swig_setmethods__["start_time"] = _sim_services.MonteRun_start_time_set
    __swig_getmethods__["start_time"] = _sim_services.MonteRun_start_time_get
    if _newclass:
        start_time = _swig_property(_sim_services.MonteRun_start_time_get, _sim_services.MonteRun_start_time_set)
    __swig_setmethods__["end_time"] = _sim_services.MonteRun_end_time_set
    __swig_getmethods__["end_time"] = _sim_services.MonteRun_end_time_get
    if _newclass:
        end_time = _swig_property(_sim_services.MonteRun_end_time_get, _sim_services.MonteRun_end_time_set)
    __swig_setmethods__["variables"] = _sim_services.MonteRun_variables_set
    __swig_getmethods__["variables"] = _sim_services.MonteRun_variables_get
    if _newclass:
        variables = _swig_property(_sim_services.MonteRun_variables_get, _sim_services.MonteRun_variables_set)
    __swig_setmethods__["exit_status"] = _sim_services.MonteRun_exit_status_set
    __swig_getmethods__["exit_status"] = _sim_services.MonteRun_exit_status_get
    if _newclass:
        exit_status = _swig_property(_sim_services.MonteRun_exit_status_get, _sim_services.MonteRun_exit_status_set)

    def __init__(self, *args):
        this = _sim_services.new_MonteRun(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MonteRun
    __del__ = lambda self: None
MonteRun_swigregister = _sim_services.MonteRun_swigregister
MonteRun_swigregister(MonteRun)

class MonteSlave(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteSlave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonteSlave, name)
    __repr__ = _swig_repr
    UNINITIALIZED = _sim_services.MonteSlave_UNINITIALIZED
    INITIALIZING = _sim_services.MonteSlave_INITIALIZING
    READY = _sim_services.MonteSlave_READY
    RUNNING = _sim_services.MonteSlave_RUNNING
    STOPPING = _sim_services.MonteSlave_STOPPING
    STOPPED = _sim_services.MonteSlave_STOPPED
    FINISHED = _sim_services.MonteSlave_FINISHED
    UNRESPONSIVE_RUNNING = _sim_services.MonteSlave_UNRESPONSIVE_RUNNING
    UNRESPONSIVE_STOPPING = _sim_services.MonteSlave_UNRESPONSIVE_STOPPING
    DISCONNECTED = _sim_services.MonteSlave_DISCONNECTED
    PROCESS_RUN = _sim_services.MonteSlave_PROCESS_RUN
    SHUTDOWN = _sim_services.MonteSlave_SHUTDOWN
    DIE = _sim_services.MonteSlave_DIE
    __swig_setmethods__["id"] = _sim_services.MonteSlave_id_set
    __swig_getmethods__["id"] = _sim_services.MonteSlave_id_get
    if _newclass:
        id = _swig_property(_sim_services.MonteSlave_id_get, _sim_services.MonteSlave_id_set)
    __swig_setmethods__["state"] = _sim_services.MonteSlave_state_set
    __swig_getmethods__["state"] = _sim_services.MonteSlave_state_get
    if _newclass:
        state = _swig_property(_sim_services.MonteSlave_state_get, _sim_services.MonteSlave_state_set)
    __swig_setmethods__["machine_name"] = _sim_services.MonteSlave_machine_name_set
    __swig_getmethods__["machine_name"] = _sim_services.MonteSlave_machine_name_get
    if _newclass:
        machine_name = _swig_property(_sim_services.MonteSlave_machine_name_get, _sim_services.MonteSlave_machine_name_set)
    __swig_setmethods__["port"] = _sim_services.MonteSlave_port_set
    __swig_getmethods__["port"] = _sim_services.MonteSlave_port_get
    if _newclass:
        port = _swig_property(_sim_services.MonteSlave_port_get, _sim_services.MonteSlave_port_set)
    __swig_setmethods__["current_run"] = _sim_services.MonteSlave_current_run_set
    __swig_getmethods__["current_run"] = _sim_services.MonteSlave_current_run_get
    if _newclass:
        current_run = _swig_property(_sim_services.MonteSlave_current_run_get, _sim_services.MonteSlave_current_run_set)
    __swig_setmethods__["num_dispatches"] = _sim_services.MonteSlave_num_dispatches_set
    __swig_getmethods__["num_dispatches"] = _sim_services.MonteSlave_num_dispatches_get
    if _newclass:
        num_dispatches = _swig_property(_sim_services.MonteSlave_num_dispatches_get, _sim_services.MonteSlave_num_dispatches_set)
    __swig_setmethods__["num_results"] = _sim_services.MonteSlave_num_results_set
    __swig_getmethods__["num_results"] = _sim_services.MonteSlave_num_results_get
    if _newclass:
        num_results = _swig_property(_sim_services.MonteSlave_num_results_get, _sim_services.MonteSlave_num_results_set)
    __swig_setmethods__["cpu_time"] = _sim_services.MonteSlave_cpu_time_set
    __swig_getmethods__["cpu_time"] = _sim_services.MonteSlave_cpu_time_get
    if _newclass:
        cpu_time = _swig_property(_sim_services.MonteSlave_cpu_time_get, _sim_services.MonteSlave_cpu_time_set)
    __swig_setmethods__["remote_shell"] = _sim_services.MonteSlave_remote_shell_set
    __swig_getmethods__["remote_shell"] = _sim_services.MonteSlave_remote_shell_get
    if _newclass:
        remote_shell = _swig_property(_sim_services.MonteSlave_remote_shell_get, _sim_services.MonteSlave_remote_shell_set)
    __swig_setmethods__["user_remote_shell"] = _sim_services.MonteSlave_user_remote_shell_set
    __swig_getmethods__["user_remote_shell"] = _sim_services.MonteSlave_user_remote_shell_get
    if _newclass:
        user_remote_shell = _swig_property(_sim_services.MonteSlave_user_remote_shell_get, _sim_services.MonteSlave_user_remote_shell_set)
    __swig_setmethods__["remote_shell_args"] = _sim_services.MonteSlave_remote_shell_args_set
    __swig_getmethods__["remote_shell_args"] = _sim_services.MonteSlave_remote_shell_args_get
    if _newclass:
        remote_shell_args = _swig_property(_sim_services.MonteSlave_remote_shell_args_get, _sim_services.MonteSlave_remote_shell_args_set)
    __swig_setmethods__["multiplier"] = _sim_services.MonteSlave_multiplier_set
    __swig_getmethods__["multiplier"] = _sim_services.MonteSlave_multiplier_get
    if _newclass:
        multiplier = _swig_property(_sim_services.MonteSlave_multiplier_get, _sim_services.MonteSlave_multiplier_set)
    __swig_setmethods__["sim_path"] = _sim_services.MonteSlave_sim_path_set
    __swig_getmethods__["sim_path"] = _sim_services.MonteSlave_sim_path_get
    if _newclass:
        sim_path = _swig_property(_sim_services.MonteSlave_sim_path_get, _sim_services.MonteSlave_sim_path_set)
    __swig_setmethods__["S_main_name"] = _sim_services.MonteSlave_S_main_name_set
    __swig_getmethods__["S_main_name"] = _sim_services.MonteSlave_S_main_name_get
    if _newclass:
        S_main_name = _swig_property(_sim_services.MonteSlave_S_main_name_get, _sim_services.MonteSlave_S_main_name_set)

    def set_S_main_name(self, *args):
        return _sim_services.MonteSlave_set_S_main_name(self, *args)

    def __init__(self, *args):
        this = _sim_services.new_MonteSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MonteSlave
    __del__ = lambda self: None
MonteSlave_swigregister = _sim_services.MonteSlave_swigregister
MonteSlave_swigregister(MonteSlave)

class MonteRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonteRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteRange(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_start(self, *args):
        return _sim_services.MonteRange_get_start(self, *args)

    def get_end(self, *args):
        return _sim_services.MonteRange_get_end(self, *args)
    __swig_destroy__ = _sim_services.delete_MonteRange
    __del__ = lambda self: None
MonteRange_swigregister = _sim_services.MonteRange_swigregister
MonteRange_swigregister(MonteRange)

class MonteCarlo(Scheduler):
    __swig_setmethods__ = {}
    for _s in [Scheduler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteCarlo, name, value)
    __swig_getmethods__ = {}
    for _s in [Scheduler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteCarlo, name)
    __repr__ = _swig_repr
    NONE = _sim_services.MonteCarlo_NONE
    ERROR = _sim_services.MonteCarlo_ERROR
    INFORMATIONAL = _sim_services.MonteCarlo_INFORMATIONAL
    ALL = _sim_services.MonteCarlo_ALL
    __swig_setmethods__["slave_sim_options"] = _sim_services.MonteCarlo_slave_sim_options_set
    __swig_getmethods__["slave_sim_options"] = _sim_services.MonteCarlo_slave_sim_options_get
    if _newclass:
        slave_sim_options = _swig_property(_sim_services.MonteCarlo_slave_sim_options_get, _sim_services.MonteCarlo_slave_sim_options_set)

    def __init__(self, *args):
        this = _sim_services.new_MonteCarlo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_MonteCarlo
    __del__ = lambda self: None

    def execute_monte(self, *args):
        return _sim_services.MonteCarlo_execute_monte(self, *args)

    def set_enabled(self, *args):
        return _sim_services.MonteCarlo_set_enabled(self, *args)

    def get_enabled(self, *args):
        return _sim_services.MonteCarlo_get_enabled(self, *args)

    def set_dry_run(self, *args):
        return _sim_services.MonteCarlo_set_dry_run(self, *args)

    def get_dry_run(self, *args):
        return _sim_services.MonteCarlo_get_dry_run(self, *args)

    def is_slave(self, *args):
        return _sim_services.MonteCarlo_is_slave(self, *args)

    def is_master(self, *args):
        return _sim_services.MonteCarlo_is_master(self, *args)

    def set_localhost_as_remote(self, *args):
        return _sim_services.MonteCarlo_set_localhost_as_remote(self, *args)

    def get_localhost_as_remote(self, *args):
        return _sim_services.MonteCarlo_get_localhost_as_remote(self, *args)

    def set_custom_slave_dispatch(self, *args):
        return _sim_services.MonteCarlo_set_custom_slave_dispatch(self, *args)

    def get_custom_slave_dispatch(self, *args):
        return _sim_services.MonteCarlo_get_custom_slave_dispatch(self, *args)

    def set_timeout(self, *args):
        return _sim_services.MonteCarlo_set_timeout(self, *args)

    def get_timeout(self, *args):
        return _sim_services.MonteCarlo_get_timeout(self, *args)

    def set_max_tries(self, *args):
        return _sim_services.MonteCarlo_set_max_tries(self, *args)

    def get_max_tries(self, *args):
        return _sim_services.MonteCarlo_get_max_tries(self, *args)

    def set_user_cmd_string(self, *args):
        return _sim_services.MonteCarlo_set_user_cmd_string(self, *args)

    def get_user_cmd_string(self, *args):
        return _sim_services.MonteCarlo_get_user_cmd_string(self, *args)

    def set_custom_pre_text(self, *args):
        return _sim_services.MonteCarlo_set_custom_pre_text(self, *args)

    def get_custom_pre_text(self, *args):
        return _sim_services.MonteCarlo_get_custom_pre_text(self, *args)

    def set_custom_post_text(self, *args):
        return _sim_services.MonteCarlo_set_custom_post_text(self, *args)

    def get_custom_post_text(self, *args):
        return _sim_services.MonteCarlo_get_custom_post_text(self, *args)

    def set_verbosity(self, *args):
        return _sim_services.MonteCarlo_set_verbosity(self, *args)

    def get_verbosity(self, *args):
        return _sim_services.MonteCarlo_get_verbosity(self, *args)

    def set_num_runs(self, *args):
        return _sim_services.MonteCarlo_set_num_runs(self, *args)

    def get_num_runs(self, *args):
        return _sim_services.MonteCarlo_get_num_runs(self, *args)

    def get_num_results(self, *args):
        return _sim_services.MonteCarlo_get_num_results(self, *args)

    def get_slave_id(self, *args):
        return _sim_services.MonteCarlo_get_slave_id(self, *args)

    def add_range(self, *args):
        return _sim_services.MonteCarlo_add_range(self, *args)

    def in_range(self, *args):
        return _sim_services.MonteCarlo_in_range(self, *args)

    def get_ranges(self, *args):
        return _sim_services.MonteCarlo_get_ranges(self, *args)

    def add_variable(self, *args):
        return _sim_services.MonteCarlo_add_variable(self, *args)

    def get_variable(self, *args):
        return _sim_services.MonteCarlo_get_variable(self, *args)

    def add_slave(self, *args):
        return _sim_services.MonteCarlo_add_slave(self, *args)

    def start_slave(self, *args):
        return _sim_services.MonteCarlo_start_slave(self, *args)

    def stop_slave(self, *args):
        return _sim_services.MonteCarlo_stop_slave(self, *args)

    def disable_slave(self, *args):
        return _sim_services.MonteCarlo_disable_slave(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MonteCarlo_process_sim_args(self, *args)

    def shutdown(self, *args):
        return _sim_services.MonteCarlo_shutdown(self, *args)

    def get_current_run(self, *args):
        return _sim_services.MonteCarlo_get_current_run(self, *args)

    def set_current_run(self, *args):
        return _sim_services.MonteCarlo_set_current_run(self, *args)

    def set_listen_device_port(self, *args):
        return _sim_services.MonteCarlo_set_listen_device_port(self, *args)

    def set_connection_device_port(self, *args):
        return _sim_services.MonteCarlo_set_connection_device_port(self, *args)

    def get_listen_device_port(self, *args):
        return _sim_services.MonteCarlo_get_listen_device_port(self, *args)

    def get_connection_device_port(self, *args):
        return _sim_services.MonteCarlo_get_connection_device_port(self, *args)

    def write(self, *args):
        return _sim_services.MonteCarlo_write(self, *args)

    def read(self, *args):
        return _sim_services.MonteCarlo_read(self, *args)
MonteCarlo_swigregister = _sim_services.MonteCarlo_swigregister
MonteCarlo_swigregister(MonteCarlo)


def tc_init(*args):
    return _sim_services.tc_init(*args)
tc_init = _sim_services.tc_init

def tc_init_with_connection_info(*args):
    return _sim_services.tc_init_with_connection_info(*args)
tc_init_with_connection_info = _sim_services.tc_init_with_connection_info

def tc_listen(*args):
    return _sim_services.tc_listen(*args)
tc_listen = _sim_services.tc_listen

def tc_accept_(*args):
    return _sim_services.tc_accept_(*args)
tc_accept_ = _sim_services.tc_accept_

def tc_connect_(*args):
    return _sim_services.tc_connect_(*args)
tc_connect_ = _sim_services.tc_connect_

def tc_clock_init(*args):
    return _sim_services.tc_clock_init(*args)
tc_clock_init = _sim_services.tc_clock_init

def tc_clock_time(*args):
    return _sim_services.tc_clock_time(*args)
tc_clock_time = _sim_services.tc_clock_time

def tc_pending(*args):
    return _sim_services.tc_pending(*args)
tc_pending = _sim_services.tc_pending

def tc_blockio(*args):
    return _sim_services.tc_blockio(*args)
tc_blockio = _sim_services.tc_blockio

def tc_isValid(*args):
    return _sim_services.tc_isValid(*args)
tc_isValid = _sim_services.tc_isValid

def tc_set_blockio_timeout_limit(*args):
    return _sim_services.tc_set_blockio_timeout_limit(*args)
tc_set_blockio_timeout_limit = _sim_services.tc_set_blockio_timeout_limit

def tc_read_(*args):
    return _sim_services.tc_read_(*args)
tc_read_ = _sim_services.tc_read_

def tc_read_byteswap(*args):
    return _sim_services.tc_read_byteswap(*args)
tc_read_byteswap = _sim_services.tc_read_byteswap

def tc_write_(*args):
    return _sim_services.tc_write_(*args)
tc_write_ = _sim_services.tc_write_

def tc_write_byteswap(*args):
    return _sim_services.tc_write_byteswap(*args)
tc_write_byteswap = _sim_services.tc_write_byteswap

def tc_disconnect(*args):
    return _sim_services.tc_disconnect(*args)
tc_disconnect = _sim_services.tc_disconnect

def tc_multiconnect(*args):
    return _sim_services.tc_multiconnect(*args)
tc_multiconnect = _sim_services.tc_multiconnect

def tc_init_udp_client(*args):
    return _sim_services.tc_init_udp_client(*args)
tc_init_udp_client = _sim_services.tc_init_udp_client

def tc_init_udp_server(*args):
    return _sim_services.tc_init_udp_server(*args)
tc_init_udp_server = _sim_services.tc_init_udp_server

def tc_init_mcast_client(*args):
    return _sim_services.tc_init_mcast_client(*args)
tc_init_mcast_client = _sim_services.tc_init_mcast_client

def tc_init_mcast_server(*args):
    return _sim_services.tc_init_mcast_server(*args)
tc_init_mcast_server = _sim_services.tc_init_mcast_server

def tc_broadcast_conninfo(*args):
    return _sim_services.tc_broadcast_conninfo(*args)
tc_broadcast_conninfo = _sim_services.tc_broadcast_conninfo

def tc_error(*args):
    return _sim_services.tc_error(*args)
tc_error = _sim_services.tc_error

def tc_dev_copy(*args):
    return _sim_services.tc_dev_copy(*args)
tc_dev_copy = _sim_services.tc_dev_copy

def trick_bswap_buffer(*args):
    return _sim_services.trick_bswap_buffer(*args)
trick_bswap_buffer = _sim_services.trick_bswap_buffer

def mc_set_enabled(*args):
    return _sim_services.mc_set_enabled(*args)
mc_set_enabled = _sim_services.mc_set_enabled

def mc_get_enabled(*args):
    return _sim_services.mc_get_enabled(*args)
mc_get_enabled = _sim_services.mc_get_enabled

def mc_set_dry_run(*args):
    return _sim_services.mc_set_dry_run(*args)
mc_set_dry_run = _sim_services.mc_set_dry_run

def mc_get_dry_run(*args):
    return _sim_services.mc_get_dry_run(*args)
mc_get_dry_run = _sim_services.mc_get_dry_run

def mc_is_slave(*args):
    return _sim_services.mc_is_slave(*args)
mc_is_slave = _sim_services.mc_is_slave

def mc_set_localhost_as_remote(*args):
    return _sim_services.mc_set_localhost_as_remote(*args)
mc_set_localhost_as_remote = _sim_services.mc_set_localhost_as_remote

def mc_get_localhost_as_remote(*args):
    return _sim_services.mc_get_localhost_as_remote(*args)
mc_get_localhost_as_remote = _sim_services.mc_get_localhost_as_remote

def mc_set_custom_slave_dispatch(*args):
    return _sim_services.mc_set_custom_slave_dispatch(*args)
mc_set_custom_slave_dispatch = _sim_services.mc_set_custom_slave_dispatch

def mc_get_custom_slave_dispatch(*args):
    return _sim_services.mc_get_custom_slave_dispatch(*args)
mc_get_custom_slave_dispatch = _sim_services.mc_get_custom_slave_dispatch

def mc_set_timeout(*args):
    return _sim_services.mc_set_timeout(*args)
mc_set_timeout = _sim_services.mc_set_timeout

def mc_get_timeout(*args):
    return _sim_services.mc_get_timeout(*args)
mc_get_timeout = _sim_services.mc_get_timeout

def mc_set_max_tries(*args):
    return _sim_services.mc_set_max_tries(*args)
mc_set_max_tries = _sim_services.mc_set_max_tries

def mc_get_max_tries(*args):
    return _sim_services.mc_get_max_tries(*args)
mc_get_max_tries = _sim_services.mc_get_max_tries

def mc_set_user_cmd_string(*args):
    return _sim_services.mc_set_user_cmd_string(*args)
mc_set_user_cmd_string = _sim_services.mc_set_user_cmd_string

def mc_set_slave_sim_options(*args):
    return _sim_services.mc_set_slave_sim_options(*args)
mc_set_slave_sim_options = _sim_services.mc_set_slave_sim_options

def mc_get_slave_sim_options(*args):
    return _sim_services.mc_get_slave_sim_options(*args)
mc_get_slave_sim_options = _sim_services.mc_get_slave_sim_options

def mc_get_user_cmd_string(*args):
    return _sim_services.mc_get_user_cmd_string(*args)
mc_get_user_cmd_string = _sim_services.mc_get_user_cmd_string

def mc_set_custom_pre_text(*args):
    return _sim_services.mc_set_custom_pre_text(*args)
mc_set_custom_pre_text = _sim_services.mc_set_custom_pre_text

def mc_get_custom_pre_text(*args):
    return _sim_services.mc_get_custom_pre_text(*args)
mc_get_custom_pre_text = _sim_services.mc_get_custom_pre_text

def mc_set_custom_post_text(*args):
    return _sim_services.mc_set_custom_post_text(*args)
mc_set_custom_post_text = _sim_services.mc_set_custom_post_text

def mc_get_custom_post_text(*args):
    return _sim_services.mc_get_custom_post_text(*args)
mc_get_custom_post_text = _sim_services.mc_get_custom_post_text

def mc_set_verbosity(*args):
    return _sim_services.mc_set_verbosity(*args)
mc_set_verbosity = _sim_services.mc_set_verbosity

def mc_get_verbosity(*args):
    return _sim_services.mc_get_verbosity(*args)
mc_get_verbosity = _sim_services.mc_get_verbosity

def mc_set_num_runs(*args):
    return _sim_services.mc_set_num_runs(*args)
mc_set_num_runs = _sim_services.mc_set_num_runs

def mc_get_num_runs(*args):
    return _sim_services.mc_get_num_runs(*args)
mc_get_num_runs = _sim_services.mc_get_num_runs

def mc_get_num_results(*args):
    return _sim_services.mc_get_num_results(*args)
mc_get_num_results = _sim_services.mc_get_num_results

def mc_get_slave_id(*args):
    return _sim_services.mc_get_slave_id(*args)
mc_get_slave_id = _sim_services.mc_get_slave_id

def mc_add_range(*args):
    return _sim_services.mc_add_range(*args)
mc_add_range = _sim_services.mc_add_range

def mc_add_slave(*args):
    return _sim_services.mc_add_slave(*args)
mc_add_slave = _sim_services.mc_add_slave

def mc_start_slave(*args):
    return _sim_services.mc_start_slave(*args)
mc_start_slave = _sim_services.mc_start_slave

def mc_stop_slave(*args):
    return _sim_services.mc_stop_slave(*args)
mc_stop_slave = _sim_services.mc_stop_slave

def mc_write(*args):
    return _sim_services.mc_write(*args)
mc_write = _sim_services.mc_write

def mc_read(*args):
    return _sim_services.mc_read(*args)
mc_read = _sim_services.mc_read

def mc_get_current_run(*args):
    return _sim_services.mc_get_current_run(*args)
mc_get_current_run = _sim_services.mc_get_current_run

def mc_set_current_run(*args):
    return _sim_services.mc_set_current_run(*args)
mc_set_current_run = _sim_services.mc_set_current_run

def mc_set_listen_device_port(*args):
    return _sim_services.mc_set_listen_device_port(*args)
mc_set_listen_device_port = _sim_services.mc_set_listen_device_port

def mc_set_connection_device_port(*args):
    return _sim_services.mc_set_connection_device_port(*args)
mc_set_connection_device_port = _sim_services.mc_set_connection_device_port

def mc_get_listen_device_port(*args):
    return _sim_services.mc_get_listen_device_port(*args)
mc_get_listen_device_port = _sim_services.mc_get_listen_device_port

def mc_get_connection_device_port(*args):
    return _sim_services.mc_get_connection_device_port(*args)
mc_get_connection_device_port = _sim_services.mc_get_connection_device_port
class MonteVarCalculated(MonteVar):
    __swig_setmethods__ = {}
    for _s in [MonteVar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteVarCalculated, name, value)
    __swig_getmethods__ = {}
    for _s in [MonteVar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteVarCalculated, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteVarCalculated(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def describe_variable(self):
        return _sim_services.MonteVarCalculated_describe_variable(self)
    __swig_destroy__ = _sim_services.delete_MonteVarCalculated
    __del__ = lambda self: None
MonteVarCalculated_swigregister = _sim_services.MonteVarCalculated_swigregister
MonteVarCalculated_swigregister(MonteVarCalculated)

class MonteVarFile(MonteVar):
    __swig_setmethods__ = {}
    for _s in [MonteVar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteVarFile, name, value)
    __swig_getmethods__ = {}
    for _s in [MonteVar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteVarFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteVarFile(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)


    __swig_destroy__ = _sim_services.delete_MonteVarFile
    __del__ = lambda self: None

    def set_file_name(self, in_file_name):
        return _sim_services.MonteVarFile_set_file_name(self, in_file_name)

    def set_column(self, in_column):
        return _sim_services.MonteVarFile_set_column(self, in_column)

    def describe_variable(self):
        return _sim_services.MonteVarFile_describe_variable(self)
MonteVarFile_swigregister = _sim_services.MonteVarFile_swigregister
MonteVarFile_swigregister(MonteVarFile)

class MonteVarFixed(MonteVar):
    __swig_setmethods__ = {}
    for _s in [MonteVar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteVarFixed, name, value)
    __swig_getmethods__ = {}
    for _s in [MonteVar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteVarFixed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteVarFixed(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def set_value(self, in_value):
        return _sim_services.MonteVarFixed_set_value(self, in_value)

    def describe_variable(self):
        return _sim_services.MonteVarFixed_describe_variable(self)
    __swig_destroy__ = _sim_services.delete_MonteVarFixed
    __del__ = lambda self: None
MonteVarFixed_swigregister = _sim_services.MonteVarFixed_swigregister
MonteVarFixed_swigregister(MonteVarFixed)

class StlRandomGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StlRandomGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StlRandomGenerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    TRICK_DEFAULT_ENGINE = _sim_services.StlRandomGenerator_TRICK_DEFAULT_ENGINE
    GAUSSIAN = _sim_services.StlRandomGenerator_GAUSSIAN
    FLAT = _sim_services.StlRandomGenerator_FLAT
    POISSON = _sim_services.StlRandomGenerator_POISSON
    __swig_destroy__ = _sim_services.delete_StlRandomGenerator
    __del__ = lambda self: None

    def __call__(self):
        return _sim_services.StlRandomGenerator___call__(self)

    def set_seed(self, in_seed):
        return _sim_services.StlRandomGenerator_set_seed(self, in_seed)

    def set_param(self, a, b=0.0):
        return _sim_services.StlRandomGenerator_set_param(self, a, b)

    def get_param_a(self):
        return _sim_services.StlRandomGenerator_get_param_a(self)

    def get_param_b(self):
        return _sim_services.StlRandomGenerator_get_param_b(self)
StlRandomGenerator_swigregister = _sim_services.StlRandomGenerator_swigregister
StlRandomGenerator_swigregister(StlRandomGenerator)

class StlRandomGeneratorFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StlRandomGeneratorFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StlRandomGeneratorFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["newGenerator"] = lambda x: _sim_services.StlRandomGeneratorFactory_newGenerator
    if _newclass:
        newGenerator = staticmethod(_sim_services.StlRandomGeneratorFactory_newGenerator)
StlRandomGeneratorFactory_swigregister = _sim_services.StlRandomGeneratorFactory_swigregister
StlRandomGeneratorFactory_swigregister(StlRandomGeneratorFactory)

def StlRandomGeneratorFactory_newGenerator(*args):
    return _sim_services.StlRandomGeneratorFactory_newGenerator(*args)
StlRandomGeneratorFactory_newGenerator = _sim_services.StlRandomGeneratorFactory_newGenerator

class MonteVarRandom(MonteVar):
    __swig_setmethods__ = {}
    for _s in [MonteVar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteVarRandom, name, value)
    __swig_getmethods__ = {}
    for _s in [MonteVar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteVarRandom, name)
    __repr__ = _swig_repr
    NO_ENGINE = _sim_services.MonteVarRandom_NO_ENGINE
    TRICK_DEFAULT_ENGINE = _sim_services.MonteVarRandom_TRICK_DEFAULT_ENGINE
    GAUSSIAN = _sim_services.MonteVarRandom_GAUSSIAN
    FLAT = _sim_services.MonteVarRandom_FLAT
    POISSON = _sim_services.MonteVarRandom_POISSON

    def __init__(self, *args):
        this = _sim_services.new_MonteVarRandom(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)


    __swig_destroy__ = _sim_services.delete_MonteVarRandom
    __del__ = lambda self: None

    def set_seed(self, seed):
        return _sim_services.MonteVarRandom_set_seed(self, seed)

    def set_sigma(self, sigma):
        return _sim_services.MonteVarRandom_set_sigma(self, sigma)

    def set_sigma_range(self, sigma_range):
        return _sim_services.MonteVarRandom_set_sigma_range(self, sigma_range)

    def set_mu(self, mu):
        return _sim_services.MonteVarRandom_set_mu(self, mu)

    def set_min(self, min):
        return _sim_services.MonteVarRandom_set_min(self, min)

    def set_max(self, max):
        return _sim_services.MonteVarRandom_set_max(self, max)

    def set_min_is_relative(self, relativity):
        return _sim_services.MonteVarRandom_set_min_is_relative(self, relativity)

    def set_max_is_relative(self, relativity):
        return _sim_services.MonteVarRandom_set_max_is_relative(self, relativity)

    def set_uniform_generator(self, uniform):
        return _sim_services.MonteVarRandom_set_uniform_generator(self, uniform)

    def get_absolute_min(self):
        return _sim_services.MonteVarRandom_get_absolute_min(self)

    def get_absolute_max(self):
        return _sim_services.MonteVarRandom_get_absolute_max(self)

    def describe_variable(self):
        return _sim_services.MonteVarRandom_describe_variable(self)
MonteVarRandom_swigregister = _sim_services.MonteVarRandom_swigregister
MonteVarRandom_swigregister(MonteVarRandom)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Timer
    __del__ = lambda self: None

    def enable(self):
        return _sim_services.Timer_enable(self)

    def disable(self):
        return _sim_services.Timer_disable(self)

    def get_enabled(self):
        return _sim_services.Timer_get_enabled(self)

    def set_active(self, in_active):
        return _sim_services.Timer_set_active(self, in_active)

    def init(self):
        return _sim_services.Timer_init(self)

    def start(self, frame_time):
        return _sim_services.Timer_start(self, frame_time)

    def reset(self, frame_time):
        return _sim_services.Timer_reset(self, frame_time)

    def stop(self):
        return _sim_services.Timer_stop(self)

    def pause(self):
        return _sim_services.Timer_pause(self)

    def shutdown(self):
        return _sim_services.Timer_shutdown(self)
Timer_swigregister = _sim_services.Timer_swigregister
Timer_swigregister(Timer)

class RealtimeSync(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealtimeSync, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealtimeSync, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable_flag"] = _sim_services.RealtimeSync_enable_flag_set
    __swig_getmethods__["enable_flag"] = _sim_services.RealtimeSync_enable_flag_get
    if _newclass:
        enable_flag = _swig_property(_sim_services.RealtimeSync_enable_flag_get, _sim_services.RealtimeSync_enable_flag_set)
    __swig_setmethods__["disable_flag"] = _sim_services.RealtimeSync_disable_flag_set
    __swig_getmethods__["disable_flag"] = _sim_services.RealtimeSync_disable_flag_get
    if _newclass:
        disable_flag = _swig_property(_sim_services.RealtimeSync_disable_flag_get, _sim_services.RealtimeSync_disable_flag_set)
    __swig_setmethods__["active"] = _sim_services.RealtimeSync_active_set
    __swig_getmethods__["active"] = _sim_services.RealtimeSync_active_get
    if _newclass:
        active = _swig_property(_sim_services.RealtimeSync_active_get, _sim_services.RealtimeSync_active_set)
    __swig_setmethods__["freeze_frame"] = _sim_services.RealtimeSync_freeze_frame_set
    __swig_getmethods__["freeze_frame"] = _sim_services.RealtimeSync_freeze_frame_get
    if _newclass:
        freeze_frame = _swig_property(_sim_services.RealtimeSync_freeze_frame_get, _sim_services.RealtimeSync_freeze_frame_set)
    __swig_setmethods__["freeze_time_tics"] = _sim_services.RealtimeSync_freeze_time_tics_set
    __swig_getmethods__["freeze_time_tics"] = _sim_services.RealtimeSync_freeze_time_tics_get
    if _newclass:
        freeze_time_tics = _swig_property(_sim_services.RealtimeSync_freeze_time_tics_get, _sim_services.RealtimeSync_freeze_time_tics_set)
    __swig_setmethods__["frame_overrun_cnt"] = _sim_services.RealtimeSync_frame_overrun_cnt_set
    __swig_getmethods__["frame_overrun_cnt"] = _sim_services.RealtimeSync_frame_overrun_cnt_get
    if _newclass:
        frame_overrun_cnt = _swig_property(_sim_services.RealtimeSync_frame_overrun_cnt_get, _sim_services.RealtimeSync_frame_overrun_cnt_set)
    __swig_setmethods__["total_overrun"] = _sim_services.RealtimeSync_total_overrun_set
    __swig_getmethods__["total_overrun"] = _sim_services.RealtimeSync_total_overrun_get
    if _newclass:
        total_overrun = _swig_property(_sim_services.RealtimeSync_total_overrun_get, _sim_services.RealtimeSync_total_overrun_set)
    __swig_setmethods__["rt_max_overrun_cnt"] = _sim_services.RealtimeSync_rt_max_overrun_cnt_set
    __swig_getmethods__["rt_max_overrun_cnt"] = _sim_services.RealtimeSync_rt_max_overrun_cnt_get
    if _newclass:
        rt_max_overrun_cnt = _swig_property(_sim_services.RealtimeSync_rt_max_overrun_cnt_get, _sim_services.RealtimeSync_rt_max_overrun_cnt_set)
    __swig_setmethods__["rt_max_overrun_time"] = _sim_services.RealtimeSync_rt_max_overrun_time_set
    __swig_getmethods__["rt_max_overrun_time"] = _sim_services.RealtimeSync_rt_max_overrun_time_get
    if _newclass:
        rt_max_overrun_time = _swig_property(_sim_services.RealtimeSync_rt_max_overrun_time_get, _sim_services.RealtimeSync_rt_max_overrun_time_set)
    __swig_setmethods__["rt_max_overrun_time_tics"] = _sim_services.RealtimeSync_rt_max_overrun_time_tics_set
    __swig_getmethods__["rt_max_overrun_time_tics"] = _sim_services.RealtimeSync_rt_max_overrun_time_tics_get
    if _newclass:
        rt_max_overrun_time_tics = _swig_property(_sim_services.RealtimeSync_rt_max_overrun_time_tics_get, _sim_services.RealtimeSync_rt_max_overrun_time_tics_set)
    __swig_setmethods__["rt_overrun_freeze"] = _sim_services.RealtimeSync_rt_overrun_freeze_set
    __swig_getmethods__["rt_overrun_freeze"] = _sim_services.RealtimeSync_rt_overrun_freeze_get
    if _newclass:
        rt_overrun_freeze = _swig_property(_sim_services.RealtimeSync_rt_overrun_freeze_get, _sim_services.RealtimeSync_rt_overrun_freeze_set)
    __swig_setmethods__["frame_sched_time"] = _sim_services.RealtimeSync_frame_sched_time_set
    __swig_getmethods__["frame_sched_time"] = _sim_services.RealtimeSync_frame_sched_time_get
    if _newclass:
        frame_sched_time = _swig_property(_sim_services.RealtimeSync_frame_sched_time_get, _sim_services.RealtimeSync_frame_sched_time_set)
    __swig_setmethods__["frame_overrun_time"] = _sim_services.RealtimeSync_frame_overrun_time_set
    __swig_getmethods__["frame_overrun_time"] = _sim_services.RealtimeSync_frame_overrun_time_get
    if _newclass:
        frame_overrun_time = _swig_property(_sim_services.RealtimeSync_frame_overrun_time_get, _sim_services.RealtimeSync_frame_overrun_time_set)
    __swig_setmethods__["last_clock_time"] = _sim_services.RealtimeSync_last_clock_time_set
    __swig_getmethods__["last_clock_time"] = _sim_services.RealtimeSync_last_clock_time_get
    if _newclass:
        last_clock_time = _swig_property(_sim_services.RealtimeSync_last_clock_time_get, _sim_services.RealtimeSync_last_clock_time_set)
    __swig_setmethods__["tics_per_sec"] = _sim_services.RealtimeSync_tics_per_sec_set
    __swig_getmethods__["tics_per_sec"] = _sim_services.RealtimeSync_tics_per_sec_get
    if _newclass:
        tics_per_sec = _swig_property(_sim_services.RealtimeSync_tics_per_sec_get, _sim_services.RealtimeSync_tics_per_sec_set)
    __swig_setmethods__["align_sim_to_wall_clock"] = _sim_services.RealtimeSync_align_sim_to_wall_clock_set
    __swig_getmethods__["align_sim_to_wall_clock"] = _sim_services.RealtimeSync_align_sim_to_wall_clock_get
    if _newclass:
        align_sim_to_wall_clock = _swig_property(_sim_services.RealtimeSync_align_sim_to_wall_clock_get, _sim_services.RealtimeSync_align_sim_to_wall_clock_set)
    __swig_setmethods__["align_tic_mult"] = _sim_services.RealtimeSync_align_tic_mult_set
    __swig_getmethods__["align_tic_mult"] = _sim_services.RealtimeSync_align_tic_mult_get
    if _newclass:
        align_tic_mult = _swig_property(_sim_services.RealtimeSync_align_tic_mult_get, _sim_services.RealtimeSync_align_tic_mult_set)
    __swig_setmethods__["rt_clock"] = _sim_services.RealtimeSync_rt_clock_set
    __swig_getmethods__["rt_clock"] = _sim_services.RealtimeSync_rt_clock_get
    if _newclass:
        rt_clock = _swig_property(_sim_services.RealtimeSync_rt_clock_get, _sim_services.RealtimeSync_rt_clock_set)
    __swig_setmethods__["default_clock"] = _sim_services.RealtimeSync_default_clock_set
    __swig_getmethods__["default_clock"] = _sim_services.RealtimeSync_default_clock_get
    if _newclass:
        default_clock = _swig_property(_sim_services.RealtimeSync_default_clock_get, _sim_services.RealtimeSync_default_clock_set)
    __swig_setmethods__["sleep_timer"] = _sim_services.RealtimeSync_sleep_timer_set
    __swig_getmethods__["sleep_timer"] = _sim_services.RealtimeSync_sleep_timer_get
    if _newclass:
        sleep_timer = _swig_property(_sim_services.RealtimeSync_sleep_timer_get, _sim_services.RealtimeSync_sleep_timer_set)
    __swig_setmethods__["freeze_shutdown"] = _sim_services.RealtimeSync_freeze_shutdown_set
    __swig_getmethods__["freeze_shutdown"] = _sim_services.RealtimeSync_freeze_shutdown_get
    if _newclass:
        freeze_shutdown = _swig_property(_sim_services.RealtimeSync_freeze_shutdown_get, _sim_services.RealtimeSync_freeze_shutdown_set)
    __swig_setmethods__["sim_start_time"] = _sim_services.RealtimeSync_sim_start_time_set
    __swig_getmethods__["sim_start_time"] = _sim_services.RealtimeSync_sim_start_time_get
    if _newclass:
        sim_start_time = _swig_property(_sim_services.RealtimeSync_sim_start_time_get, _sim_services.RealtimeSync_sim_start_time_set)
    __swig_setmethods__["sim_end_init_time"] = _sim_services.RealtimeSync_sim_end_init_time_set
    __swig_getmethods__["sim_end_init_time"] = _sim_services.RealtimeSync_sim_end_init_time_get
    if _newclass:
        sim_end_init_time = _swig_property(_sim_services.RealtimeSync_sim_end_init_time_get, _sim_services.RealtimeSync_sim_end_init_time_set)
    __swig_setmethods__["sim_end_time"] = _sim_services.RealtimeSync_sim_end_time_set
    __swig_getmethods__["sim_end_time"] = _sim_services.RealtimeSync_sim_end_time_get
    if _newclass:
        sim_end_time = _swig_property(_sim_services.RealtimeSync_sim_end_time_get, _sim_services.RealtimeSync_sim_end_time_set)

    def __init__(self, in_clock, in_timer=None):
        this = _sim_services.new_RealtimeSync(in_clock, in_timer)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RealtimeSync
    __del__ = lambda self: None

    def enable(self):
        return _sim_services.RealtimeSync_enable(self)

    def disable(self):
        return _sim_services.RealtimeSync_disable(self)

    def change_clock(self, in_clock):
        return _sim_services.RealtimeSync_change_clock(self, in_clock)

    def clock_get_name(self):
        return _sim_services.RealtimeSync_clock_get_name(self)

    def change_timer(self, in_sleep_timer):
        return _sim_services.RealtimeSync_change_timer(self, in_sleep_timer)

    def set_rt_clock_ratio(self, in_clock_ratio):
        return _sim_services.RealtimeSync_set_rt_clock_ratio(self, in_clock_ratio)

    def get_sim_start_time(self):
        return _sim_services.RealtimeSync_get_sim_start_time(self)

    def get_sim_end_init_time(self):
        return _sim_services.RealtimeSync_get_sim_end_init_time(self)

    def get_sim_end_time(self):
        return _sim_services.RealtimeSync_get_sim_end_time(self)

    def initialize(self):
        return _sim_services.RealtimeSync_initialize(self)

    def restart(self, ref_time):
        return _sim_services.RealtimeSync_restart(self, ref_time)

    def start_realtime(self, in_frame_time, ref_time):
        return _sim_services.RealtimeSync_start_realtime(self, in_frame_time, ref_time)

    def rt_monitor(self, sim_time_tics):
        return _sim_services.RealtimeSync_rt_monitor(self, sim_time_tics)

    def freeze_init(self, in_freeze_frame):
        return _sim_services.RealtimeSync_freeze_init(self, in_freeze_frame)

    def freeze_pause(self, in_freeze_frame):
        return _sim_services.RealtimeSync_freeze_pause(self, in_freeze_frame)

    def unfreeze(self, sim_time_tics, software_frame):
        return _sim_services.RealtimeSync_unfreeze(self, sim_time_tics, software_frame)

    def shutdown(self):
        return _sim_services.RealtimeSync_shutdown(self)

    def start_sleep_timer(self):
        return _sim_services.RealtimeSync_start_sleep_timer(self)
RealtimeSync_swigregister = _sim_services.RealtimeSync_swigregister
RealtimeSync_swigregister(RealtimeSync)


def real_time_change_clock(in_clock):
    return _sim_services.real_time_change_clock(in_clock)
real_time_change_clock = _sim_services.real_time_change_clock

def real_time_change_timer(in_sleep_timer):
    return _sim_services.real_time_change_timer(in_sleep_timer)
real_time_change_timer = _sim_services.real_time_change_timer

def real_time_enable():
    return _sim_services.real_time_enable()
real_time_enable = _sim_services.real_time_enable

def real_time_disable():
    return _sim_services.real_time_disable()
real_time_disable = _sim_services.real_time_disable

def real_time_restart(ref_time):
    return _sim_services.real_time_restart(ref_time)
real_time_restart = _sim_services.real_time_restart

def is_real_time():
    return _sim_services.is_real_time()
is_real_time = _sim_services.is_real_time

def real_time_clock_get_name():
    return _sim_services.real_time_clock_get_name()
real_time_clock_get_name = _sim_services.real_time_clock_get_name

def real_time_set_rt_clock_ratio(in_clock_ratio):
    return _sim_services.real_time_set_rt_clock_ratio(in_clock_ratio)
real_time_set_rt_clock_ratio = _sim_services.real_time_set_rt_clock_ratio

def real_time_lock_memory(yes_no):
    return _sim_services.real_time_lock_memory(yes_no)
real_time_lock_memory = _sim_services.real_time_lock_memory

def exec_set_lock_memory(yes_no):
    return _sim_services.exec_set_lock_memory(yes_no)
exec_set_lock_memory = _sim_services.exec_set_lock_memory

def extract_bitfield_any(arg1, arg2, arg3, arg4):
    return _sim_services.extract_bitfield_any(arg1, arg2, arg3, arg4)
extract_bitfield_any = _sim_services.extract_bitfield_any

def extract_unsigned_bitfield_any(arg1, arg2, arg3, arg4):
    return _sim_services.extract_unsigned_bitfield_any(arg1, arg2, arg3, arg4)
extract_unsigned_bitfield_any = _sim_services.extract_unsigned_bitfield_any

def insert_bitfield_any(arg1, arg2, arg3, arg4, arg5):
    return _sim_services.insert_bitfield_any(arg1, arg2, arg3, arg4, arg5)
insert_bitfield_any = _sim_services.insert_bitfield_any

def addr_bitfield(A, B, field_count):
    return _sim_services.addr_bitfield(A, B, field_count)
addr_bitfield = _sim_services.addr_bitfield
class RtiEventBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtiEventBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtiEventBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RtiEventBase
    __del__ = lambda self: None

    def do_assignment(self):
        return _sim_services.RtiEventBase_do_assignment(self)

    def print_val(self):
        return _sim_services.RtiEventBase_print_val(self)

    def print_rti(self):
        return _sim_services.RtiEventBase_print_rti(self)

    def check_address(self):
        return _sim_services.RtiEventBase_check_address(self)
    __swig_setmethods__["ref"] = _sim_services.RtiEventBase_ref_set
    __swig_getmethods__["ref"] = _sim_services.RtiEventBase_ref_get
    if _newclass:
        ref = _swig_property(_sim_services.RtiEventBase_ref_get, _sim_services.RtiEventBase_ref_set)
RtiEventBase_swigregister = _sim_services.RtiEventBase_swigregister
RtiEventBase_swigregister(RtiEventBase)

class RtiList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtiList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtiList, name)
    __repr__ = _swig_repr

    def execute(self, debug):
        return _sim_services.RtiList_execute(self, debug)

    def print_list(self):
        return _sim_services.RtiList_print_list(self)
    __swig_setmethods__["event_list"] = _sim_services.RtiList_event_list_set
    __swig_getmethods__["event_list"] = _sim_services.RtiList_event_list_get
    if _newclass:
        event_list = _swig_property(_sim_services.RtiList_event_list_get, _sim_services.RtiList_event_list_set)

    def __init__(self):
        this = _sim_services.new_RtiList()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RtiList
    __del__ = lambda self: None
RtiList_swigregister = _sim_services.RtiList_swigregister
RtiList_swigregister(RtiList)

class RtiExec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtiExec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtiExec, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_RtiExec()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RtiExec
    __del__ = lambda self: None

    def AddToFireList(self, rti_list):
        return _sim_services.RtiExec_AddToFireList(self, rti_list)

    def Exec(self):
        return _sim_services.RtiExec_Exec(self)

    def SetDebug(self, on_off):
        return _sim_services.RtiExec_SetDebug(self, on_off)

    def SetFrameMultiple(self, mult):
        return _sim_services.RtiExec_SetFrameMultiple(self, mult)

    def SetFrameOffset(self, offset):
        return _sim_services.RtiExec_SetFrameOffset(self, offset)
    __swig_setmethods__["frame_multiple"] = _sim_services.RtiExec_frame_multiple_set
    __swig_getmethods__["frame_multiple"] = _sim_services.RtiExec_frame_multiple_get
    if _newclass:
        frame_multiple = _swig_property(_sim_services.RtiExec_frame_multiple_get, _sim_services.RtiExec_frame_multiple_set)
    __swig_setmethods__["frame_offset"] = _sim_services.RtiExec_frame_offset_set
    __swig_getmethods__["frame_offset"] = _sim_services.RtiExec_frame_offset_get
    if _newclass:
        frame_offset = _swig_property(_sim_services.RtiExec_frame_offset_get, _sim_services.RtiExec_frame_offset_set)
RtiExec_swigregister = _sim_services.RtiExec_swigregister
RtiExec_swigregister(RtiExec)

class RtiStager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtiStager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtiStager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_RtiStager()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_RtiStager
    __del__ = lambda self: None

    def Add(self, *args):
        return _sim_services.RtiStager_Add(self, *args)

    def Fire(self, thread_id=0):
        return _sim_services.RtiStager_Fire(self, thread_id)

    def List(self):
        return _sim_services.RtiStager_List(self)

    def SetDebug(self, on_off):
        return _sim_services.RtiStager_SetDebug(self, on_off)

    def SetFrameMultiple(self, thread_id, mult):
        return _sim_services.RtiStager_SetFrameMultiple(self, thread_id, mult)

    def SetFrameOffset(self, thread_id, offset):
        return _sim_services.RtiStager_SetFrameOffset(self, thread_id, offset)

    def AddInjectorExecutor(self, arg2):
        return _sim_services.RtiStager_AddInjectorExecutor(self, arg2)

    def GetRtiExecutor(self, thread_id):
        return _sim_services.RtiStager_GetRtiExecutor(self, thread_id)
RtiStager_swigregister = _sim_services.RtiStager_swigregister
RtiStager_swigregister(RtiStager)

class ITimer(Timer):
    __swig_setmethods__ = {}
    for _s in [Timer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITimer, name, value)
    __swig_getmethods__ = {}
    for _s in [Timer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ITimer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_ITimer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_ITimer
    __del__ = lambda self: None

    def semaphore_post(self):
        return _sim_services.ITimer_semaphore_post(self)

    def init(self):
        return _sim_services.ITimer_init(self)

    def start(self, frame_time):
        return _sim_services.ITimer_start(self, frame_time)

    def reset(self, frame_time):
        return _sim_services.ITimer_reset(self, frame_time)

    def stop(self):
        return _sim_services.ITimer_stop(self)

    def pause(self):
        return _sim_services.ITimer_pause(self)

    def shutdown(self):
        return _sim_services.ITimer_shutdown(self)
ITimer_swigregister = _sim_services.ITimer_swigregister
ITimer_swigregister(ITimer)


def get_itimer():
    return _sim_services.get_itimer()
get_itimer = _sim_services.get_itimer

def it_handler(sig):
    return _sim_services.it_handler(sig)
it_handler = _sim_services.it_handler
class TestCase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestCase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TestCase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _sim_services.TestCase_name_set
    __swig_getmethods__["name"] = _sim_services.TestCase_name_get
    if _newclass:
        name = _swig_property(_sim_services.TestCase_name_get, _sim_services.TestCase_name_set)
    __swig_setmethods__["status"] = _sim_services.TestCase_status_set
    __swig_getmethods__["status"] = _sim_services.TestCase_status_get
    if _newclass:
        status = _swig_property(_sim_services.TestCase_status_get, _sim_services.TestCase_status_set)
    __swig_setmethods__["parent"] = _sim_services.TestCase_parent_set
    __swig_getmethods__["parent"] = _sim_services.TestCase_parent_get
    if _newclass:
        parent = _swig_property(_sim_services.TestCase_parent_get, _sim_services.TestCase_parent_set)
    __swig_setmethods__["elapsed_time"] = _sim_services.TestCase_elapsed_time_set
    __swig_getmethods__["elapsed_time"] = _sim_services.TestCase_elapsed_time_get
    if _newclass:
        elapsed_time = _swig_property(_sim_services.TestCase_elapsed_time_get, _sim_services.TestCase_elapsed_time_set)
    __swig_setmethods__["failure_string"] = _sim_services.TestCase_failure_string_set
    __swig_getmethods__["failure_string"] = _sim_services.TestCase_failure_string_get
    if _newclass:
        failure_string = _swig_property(_sim_services.TestCase_failure_string_get, _sim_services.TestCase_failure_string_set)

    def __init__(self, test_case_name, in_failure_string):
        this = _sim_services.new_TestCase(test_case_name, in_failure_string)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_TestCase
    __del__ = lambda self: None
TestCase_swigregister = _sim_services.TestCase_swigregister
TestCase_swigregister(TestCase)

class TestSuite(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestSuite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TestSuite, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_failures"] = _sim_services.TestSuite_num_failures_set
    __swig_getmethods__["num_failures"] = _sim_services.TestSuite_num_failures_get
    if _newclass:
        num_failures = _swig_property(_sim_services.TestSuite_num_failures_get, _sim_services.TestSuite_num_failures_set)
    __swig_setmethods__["test_results"] = _sim_services.TestSuite_test_results_set
    __swig_getmethods__["test_results"] = _sim_services.TestSuite_test_results_get
    if _newclass:
        test_results = _swig_property(_sim_services.TestSuite_test_results_get, _sim_services.TestSuite_test_results_set)

    def __init__(self):
        this = _sim_services.new_TestSuite()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add_test_results(self, *args):
        return _sim_services.TestSuite_add_test_results(self, *args)

    def add_test_requirements(self, test_case, par_num):
        return _sim_services.TestSuite_add_test_requirements(self, test_case, par_num)

    def delete_test_results(self):
        return _sim_services.TestSuite_delete_test_results(self)
    __swig_destroy__ = _sim_services.delete_TestSuite
    __del__ = lambda self: None
TestSuite_swigregister = _sim_services.TestSuite_swigregister
TestSuite_swigregister(TestSuite)

class UnitTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitTest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _sim_services.UnitTest_enabled_set
    __swig_getmethods__["enabled"] = _sim_services.UnitTest_enabled_get
    if _newclass:
        enabled = _swig_property(_sim_services.UnitTest_enabled_get, _sim_services.UnitTest_enabled_set)
    __swig_setmethods__["exit_code_enabled"] = _sim_services.UnitTest_exit_code_enabled_set
    __swig_getmethods__["exit_code_enabled"] = _sim_services.UnitTest_exit_code_enabled_get
    if _newclass:
        exit_code_enabled = _swig_property(_sim_services.UnitTest_exit_code_enabled_get, _sim_services.UnitTest_exit_code_enabled_set)
    __swig_setmethods__["name"] = _sim_services.UnitTest_name_set
    __swig_getmethods__["name"] = _sim_services.UnitTest_name_get
    if _newclass:
        name = _swig_property(_sim_services.UnitTest_name_get, _sim_services.UnitTest_name_set)
    __swig_setmethods__["file_name"] = _sim_services.UnitTest_file_name_set
    __swig_getmethods__["file_name"] = _sim_services.UnitTest_file_name_get
    if _newclass:
        file_name = _swig_property(_sim_services.UnitTest_file_name_get, _sim_services.UnitTest_file_name_set)
    __swig_setmethods__["test_suites"] = _sim_services.UnitTest_test_suites_set
    __swig_getmethods__["test_suites"] = _sim_services.UnitTest_test_suites_get
    if _newclass:
        test_suites = _swig_property(_sim_services.UnitTest_test_suites_get, _sim_services.UnitTest_test_suites_set)

    def __init__(self):
        this = _sim_services.new_UnitTest()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_UnitTest
    __del__ = lambda self: None

    def enable(self):
        return _sim_services.UnitTest_enable(self)

    def set_exit_code_enabled(self, in_enable):
        return _sim_services.UnitTest_set_exit_code_enabled(self, in_enable)

    def add_test_results(self, *args):
        return _sim_services.UnitTest_add_test_results(self, *args)

    def add_test_requirements(self, in_test_suite_name, in_test_case, par_num):
        return _sim_services.UnitTest_add_test_requirements(self, in_test_suite_name, in_test_case, par_num)

    def set_test_name(self, in_name):
        return _sim_services.UnitTest_set_test_name(self, in_name)

    def set_file_name(self, in_name):
        return _sim_services.UnitTest_set_file_name(self, in_name)

    def write_output(self):
        return _sim_services.UnitTest_write_output(self)
UnitTest_swigregister = _sim_services.UnitTest_swigregister
UnitTest_swigregister(UnitTest)


def trick_test_enable():
    return _sim_services.trick_test_enable()
trick_test_enable = _sim_services.trick_test_enable

def trick_test_set_file_name(in_file_name):
    return _sim_services.trick_test_set_file_name(in_file_name)
trick_test_set_file_name = _sim_services.trick_test_set_file_name

def trick_test_set_test_name(in_test_name):
    return _sim_services.trick_test_set_test_name(in_test_name)
trick_test_set_test_name = _sim_services.trick_test_set_test_name

def trick_test_add_parent(in_test_suite_name, in_test_case, par_num):
    return _sim_services.trick_test_add_parent(in_test_suite_name, in_test_case, par_num)
trick_test_add_parent = _sim_services.trick_test_add_parent

def add_test_result(in_test_suite_name, in_test_case, in_failure_string):
    return _sim_services.add_test_result(in_test_suite_name, in_test_case, in_failure_string)
add_test_result = _sim_services.add_test_result

def call_write_output():
    return _sim_services.call_write_output()
call_write_output = _sim_services.call_write_output

_sim_services.VS_COPY_ASYNC_swigconstant(_sim_services)
VS_COPY_ASYNC = _sim_services.VS_COPY_ASYNC

_sim_services.VS_COPY_SCHEDULED_swigconstant(_sim_services)
VS_COPY_SCHEDULED = _sim_services.VS_COPY_SCHEDULED

_sim_services.VS_COPY_TOP_OF_FRAME_swigconstant(_sim_services)
VS_COPY_TOP_OF_FRAME = _sim_services.VS_COPY_TOP_OF_FRAME

_sim_services.VS_WRITE_ASYNC_swigconstant(_sim_services)
VS_WRITE_ASYNC = _sim_services.VS_WRITE_ASYNC

_sim_services.VS_WRITE_WHEN_COPIED_swigconstant(_sim_services)
VS_WRITE_WHEN_COPIED = _sim_services.VS_WRITE_WHEN_COPIED

_sim_services.MAX_ARRAY_LENGTH_swigconstant(_sim_services)
MAX_ARRAY_LENGTH = _sim_services.MAX_ARRAY_LENGTH
class VariableReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariableReference, name)
    __repr__ = _swig_repr

    def __init__(self, in_ref):
        this = _sim_services.new_VariableReference(in_ref)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VariableReference
    __del__ = lambda self: None
    __swig_setmethods__["ref"] = _sim_services.VariableReference_ref_set
    __swig_getmethods__["ref"] = _sim_services.VariableReference_ref_get
    if _newclass:
        ref = _swig_property(_sim_services.VariableReference_ref_get, _sim_services.VariableReference_ref_set)
    __swig_setmethods__["conversion_factor"] = _sim_services.VariableReference_conversion_factor_set
    __swig_getmethods__["conversion_factor"] = _sim_services.VariableReference_conversion_factor_get
    if _newclass:
        conversion_factor = _swig_property(_sim_services.VariableReference_conversion_factor_get, _sim_services.VariableReference_conversion_factor_set)
    __swig_setmethods__["buffer_in"] = _sim_services.VariableReference_buffer_in_set
    __swig_getmethods__["buffer_in"] = _sim_services.VariableReference_buffer_in_get
    if _newclass:
        buffer_in = _swig_property(_sim_services.VariableReference_buffer_in_get, _sim_services.VariableReference_buffer_in_set)
    __swig_setmethods__["buffer_out"] = _sim_services.VariableReference_buffer_out_set
    __swig_getmethods__["buffer_out"] = _sim_services.VariableReference_buffer_out_get
    if _newclass:
        buffer_out = _swig_property(_sim_services.VariableReference_buffer_out_get, _sim_services.VariableReference_buffer_out_set)
    __swig_setmethods__["address"] = _sim_services.VariableReference_address_set
    __swig_getmethods__["address"] = _sim_services.VariableReference_address_get
    if _newclass:
        address = _swig_property(_sim_services.VariableReference_address_get, _sim_services.VariableReference_address_set)
    __swig_setmethods__["size"] = _sim_services.VariableReference_size_set
    __swig_getmethods__["size"] = _sim_services.VariableReference_size_get
    if _newclass:
        size = _swig_property(_sim_services.VariableReference_size_get, _sim_services.VariableReference_size_set)
    __swig_setmethods__["string_type"] = _sim_services.VariableReference_string_type_set
    __swig_getmethods__["string_type"] = _sim_services.VariableReference_string_type_get
    if _newclass:
        string_type = _swig_property(_sim_services.VariableReference_string_type_get, _sim_services.VariableReference_string_type_set)
    __swig_setmethods__["need_deref"] = _sim_services.VariableReference_need_deref_set
    __swig_getmethods__["need_deref"] = _sim_services.VariableReference_need_deref_get
    if _newclass:
        need_deref = _swig_property(_sim_services.VariableReference_need_deref_get, _sim_services.VariableReference_need_deref_set)
VariableReference_swigregister = _sim_services.VariableReference_swigregister
VariableReference_swigregister(VariableReference)

class VariableServerThread(ThreadBase):
    __swig_setmethods__ = {}
    for _s in [ThreadBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableServerThread, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VariableServerThread, name)
    __repr__ = _swig_repr
    TCP = _sim_services.VariableServerThread_TCP
    UDP = _sim_services.VariableServerThread_UDP
    MCAST = _sim_services.VariableServerThread_MCAST

    def __init__(self, in_listen_dev):
        this = _sim_services.new_VariableServerThread(in_listen_dev)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VariableServerThread
    __del__ = lambda self: None
    __swig_getmethods__["set_vs_ptr"] = lambda x: _sim_services.VariableServerThread_set_vs_ptr
    if _newclass:
        set_vs_ptr = staticmethod(_sim_services.VariableServerThread_set_vs_ptr)

    def wait_for_accept(self):
        return _sim_services.VariableServerThread_wait_for_accept(self)

    def thread_body(self):
        return _sim_services.VariableServerThread_thread_body(self)

    def var_add(self, *args):
        return _sim_services.VariableServerThread_var_add(self, *args)

    def var_remove(self, in_name):
        return _sim_services.VariableServerThread_var_remove(self, in_name)

    def var_units(self, var_name, units_name):
        return _sim_services.VariableServerThread_var_units(self, var_name, units_name)

    def var_exists(self, in_name):
        return _sim_services.VariableServerThread_var_exists(self, in_name)

    def var_send(self):
        return _sim_services.VariableServerThread_var_send(self)

    def var_clear(self):
        return _sim_services.VariableServerThread_var_clear(self)

    def var_cycle(self, in_cycle):
        return _sim_services.VariableServerThread_var_cycle(self, in_cycle)

    def get_pause(self):
        return _sim_services.VariableServerThread_get_pause(self)

    def set_pause(self, on_off):
        return _sim_services.VariableServerThread_set_pause(self, on_off)

    def var_exit(self):
        return _sim_services.VariableServerThread_var_exit(self)

    def var_validate_address(self, on_off):
        return _sim_services.VariableServerThread_var_validate_address(self, on_off)

    def var_debug(self, level):
        return _sim_services.VariableServerThread_var_debug(self, level)

    def var_ascii(self):
        return _sim_services.VariableServerThread_var_ascii(self)

    def var_binary(self):
        return _sim_services.VariableServerThread_var_binary(self)

    def var_binary_nonames(self):
        return _sim_services.VariableServerThread_var_binary_nonames(self)

    def var_set_copy_mode(self, on_off):
        return _sim_services.VariableServerThread_var_set_copy_mode(self, on_off)

    def var_set_write_mode(self, on_off):
        return _sim_services.VariableServerThread_var_set_write_mode(self, on_off)

    def var_sync(self, on_off):
        return _sim_services.VariableServerThread_var_sync(self, on_off)

    def var_set_frame_multiple(self, mult):
        return _sim_services.VariableServerThread_var_set_frame_multiple(self, mult)

    def var_set_frame_offset(self, offset):
        return _sim_services.VariableServerThread_var_set_frame_offset(self, offset)

    def var_set_freeze_frame_multiple(self, mult):
        return _sim_services.VariableServerThread_var_set_freeze_frame_multiple(self, mult)

    def var_set_freeze_frame_offset(self, offset):
        return _sim_services.VariableServerThread_var_set_freeze_frame_offset(self, offset)

    def var_byteswap(self, on_off):
        return _sim_services.VariableServerThread_var_byteswap(self, on_off)

    def var_signal(self):
        return _sim_services.VariableServerThread_var_signal(self)

    def set_log_on(self):
        return _sim_services.VariableServerThread_set_log_on(self)

    def set_log_off(self):
        return _sim_services.VariableServerThread_set_log_off(self)

    def var_multicast(self, on_off):
        return _sim_services.VariableServerThread_var_multicast(self, on_off)

    def send_list_size(self):
        return _sim_services.VariableServerThread_send_list_size(self)

    def send_sie_resource(self):
        return _sim_services.VariableServerThread_send_sie_resource(self)

    def send_sie_class(self):
        return _sim_services.VariableServerThread_send_sie_class(self)

    def send_sie_enum(self):
        return _sim_services.VariableServerThread_send_sie_enum(self)

    def send_sie_top_level_objects(self):
        return _sim_services.VariableServerThread_send_sie_top_level_objects(self)

    def send_file(self, file_name):
        return _sim_services.VariableServerThread_send_file(self, file_name)

    def copy_sim_data(self):
        return _sim_services.VariableServerThread_copy_sim_data(self)

    def write_data(self):
        return _sim_services.VariableServerThread_write_data(self)

    def get_send_stdio(self):
        return _sim_services.VariableServerThread_get_send_stdio(self)

    def set_send_stdio(self, on_off):
        return _sim_services.VariableServerThread_set_send_stdio(self, on_off)

    def get_vs(self):
        return _sim_services.VariableServerThread_get_vs(self)

    def get_connection(self):
        return _sim_services.VariableServerThread_get_connection(self)

    def write_stdio(self, stream, text):
        return _sim_services.VariableServerThread_write_stdio(self, stream, text)

    def freeze_init(self):
        return _sim_services.VariableServerThread_freeze_init(self)

    def copy_data_freeze(self):
        return _sim_services.VariableServerThread_copy_data_freeze(self)

    def copy_data_freeze_scheduled(self, curr_tics):
        return _sim_services.VariableServerThread_copy_data_freeze_scheduled(self, curr_tics)

    def copy_data_scheduled(self, curr_tics):
        return _sim_services.VariableServerThread_copy_data_scheduled(self, curr_tics)

    def copy_data_top(self):
        return _sim_services.VariableServerThread_copy_data_top(self)

    def preload_checkpoint(self):
        return _sim_services.VariableServerThread_preload_checkpoint(self)

    def restart(self):
        return _sim_services.VariableServerThread_restart(self)

    def get_next_tics(self):
        return _sim_services.VariableServerThread_get_next_tics(self)

    def get_freeze_next_tics(self):
        return _sim_services.VariableServerThread_get_freeze_next_tics(self)

    def create_udp_socket(self, address, in_port):
        return _sim_services.VariableServerThread_create_udp_socket(self, address, in_port)

    def create_mcast_socket(self, mcast_address, address, in_port):
        return _sim_services.VariableServerThread_create_mcast_socket(self, mcast_address, address, in_port)
VariableServerThread_swigregister = _sim_services.VariableServerThread_swigregister
VariableServerThread_swigregister(VariableServerThread)

def VariableServerThread_set_vs_ptr(in_vs):
    return _sim_services.VariableServerThread_set_vs_ptr(in_vs)
VariableServerThread_set_vs_ptr = _sim_services.VariableServerThread_set_vs_ptr

class VariableServerListenThread(ThreadBase):
    __swig_setmethods__ = {}
    for _s in [ThreadBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableServerListenThread, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VariableServerListenThread, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_VariableServerListenThread()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VariableServerListenThread
    __del__ = lambda self: None

    def get_hostname(self):
        return _sim_services.VariableServerListenThread_get_hostname(self)

    def get_port(self):
        return _sim_services.VariableServerListenThread_get_port(self)

    def set_port(self, in_port):
        return _sim_services.VariableServerListenThread_set_port(self, in_port)

    def get_user_tag(self):
        return _sim_services.VariableServerListenThread_get_user_tag(self)

    def set_user_tag(self, in_tag):
        return _sim_services.VariableServerListenThread_set_user_tag(self, in_tag)

    def set_source_address(self, address):
        return _sim_services.VariableServerListenThread_set_source_address(self, address)

    def get_source_address(self):
        return _sim_services.VariableServerListenThread_get_source_address(self)

    def get_broadcast(self):
        return _sim_services.VariableServerListenThread_get_broadcast(self)

    def set_broadcast(self, in_broadcast):
        return _sim_services.VariableServerListenThread_set_broadcast(self, in_broadcast)

    def init_listen_device(self):
        return _sim_services.VariableServerListenThread_init_listen_device(self)

    def check_and_move_listen_device(self):
        return _sim_services.VariableServerListenThread_check_and_move_listen_device(self)

    def create_tcp_socket(self, address, in_port):
        return _sim_services.VariableServerListenThread_create_tcp_socket(self, address, in_port)

    def thread_body(self):
        return _sim_services.VariableServerListenThread_thread_body(self)

    def restart(self):
        return _sim_services.VariableServerListenThread_restart(self)

    def pause_listening(self):
        return _sim_services.VariableServerListenThread_pause_listening(self)

    def restart_listening(self):
        return _sim_services.VariableServerListenThread_restart_listening(self)

    def dump(self, *args):
        return _sim_services.VariableServerListenThread_dump(self, *args)
VariableServerListenThread_swigregister = _sim_services.VariableServerListenThread_swigregister
VariableServerListenThread_swigregister(VariableServerListenThread)

class VariableServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariableServer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_services.new_VariableServer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_VariableServer
    __del__ = lambda self: None

    def default_data(self):
        return _sim_services.VariableServer_default_data(self)

    def init(self):
        return _sim_services.VariableServer_init(self)

    def restart(self):
        return _sim_services.VariableServer_restart(self)

    def freeze_init(self):
        return _sim_services.VariableServer_freeze_init(self)

    def shutdown(self):
        return _sim_services.VariableServer_shutdown(self)

    def get_next_sync_call_time(self):
        return _sim_services.VariableServer_get_next_sync_call_time(self)

    def get_next_freeze_call_time(self):
        return _sim_services.VariableServer_get_next_freeze_call_time(self)

    def copy_data_top(self):
        return _sim_services.VariableServer_copy_data_top(self)

    def copy_data_scheduled(self):
        return _sim_services.VariableServer_copy_data_scheduled(self)

    def copy_data_freeze_scheduled(self):
        return _sim_services.VariableServer_copy_data_freeze_scheduled(self)

    def copy_data_freeze(self):
        return _sim_services.VariableServer_copy_data_freeze(self)

    def add_vst(self, thread_id, in_vst):
        return _sim_services.VariableServer_add_vst(self, thread_id, in_vst)

    def get_vst(self, thread_id):
        return _sim_services.VariableServer_get_vst(self, thread_id)

    def delete_vst(self, thread_id):
        return _sim_services.VariableServer_delete_vst(self, thread_id)

    def get_hostname(self):
        return _sim_services.VariableServer_get_hostname(self)

    def get_listen_thread(self):
        return _sim_services.VariableServer_get_listen_thread(self)

    def set_enabled(self, on_off):
        return _sim_services.VariableServer_set_enabled(self, on_off)

    def get_enabled(self):
        return _sim_services.VariableServer_get_enabled(self)

    def get_info_msg(self):
        return _sim_services.VariableServer_get_info_msg(self)

    def get_log(self):
        return _sim_services.VariableServer_get_log(self)

    def set_var_server_info_msg_on(self):
        return _sim_services.VariableServer_set_var_server_info_msg_on(self)

    def set_var_server_info_msg_off(self):
        return _sim_services.VariableServer_set_var_server_info_msg_off(self)

    def set_var_server_log_on(self):
        return _sim_services.VariableServer_set_var_server_log_on(self)

    def set_var_server_log_off(self):
        return _sim_services.VariableServer_set_var_server_log_off(self)

    def create_tcp_socket(self, source_address, port):
        return _sim_services.VariableServer_create_tcp_socket(self, source_address, port)

    def create_udp_socket(self, source_address, port):
        return _sim_services.VariableServer_create_udp_socket(self, source_address, port)

    def create_multicast_socket(self, mcast_address, source_address, port):
        return _sim_services.VariableServer_create_multicast_socket(self, mcast_address, source_address, port)

    def suspendPreCheckpointReload(self):
        return _sim_services.VariableServer_suspendPreCheckpointReload(self)

    def resumePostCheckpointReload(self):
        return _sim_services.VariableServer_resumePostCheckpointReload(self)

    def set_copy_data_job(self, arg2):
        return _sim_services.VariableServer_set_copy_data_job(self, arg2)

    def set_copy_data_freeze_job(self, arg2):
        return _sim_services.VariableServer_set_copy_data_freeze_job(self, arg2)
VariableServer_swigregister = _sim_services.VariableServer_swigregister
VariableServer_swigregister(VariableServer)


def vs_format_ascii(var, value):
    return _sim_services.vs_format_ascii(var, value)
vs_format_ascii = _sim_services.vs_format_ascii

def var_server_get_var_server():
    return _sim_services.var_server_get_var_server()
var_server_get_var_server = _sim_services.var_server_get_var_server

def var_add(*args):
    return _sim_services.var_add(*args)
var_add = _sim_services.var_add

def var_remove(in_name):
    return _sim_services.var_remove(in_name)
var_remove = _sim_services.var_remove

def var_units(var_name, units_name):
    return _sim_services.var_units(var_name, units_name)
var_units = _sim_services.var_units

def var_exists(in_name):
    return _sim_services.var_exists(in_name)
var_exists = _sim_services.var_exists

def var_send():
    return _sim_services.var_send()
var_send = _sim_services.var_send

def var_clear():
    return _sim_services.var_clear()
var_clear = _sim_services.var_clear

def var_cycle(in_rate):
    return _sim_services.var_cycle(in_rate)
var_cycle = _sim_services.var_cycle

def var_pause():
    return _sim_services.var_pause()
var_pause = _sim_services.var_pause

def var_unpause():
    return _sim_services.var_unpause()
var_unpause = _sim_services.var_unpause

def var_exit():
    return _sim_services.var_exit()
var_exit = _sim_services.var_exit

def var_write_stdio(stream, text):
    return _sim_services.var_write_stdio(stream, text)
var_write_stdio = _sim_services.var_write_stdio

def var_set_client_tag(text):
    return _sim_services.var_set_client_tag(text)
var_set_client_tag = _sim_services.var_set_client_tag

def var_debug(level):
    return _sim_services.var_debug(level)
var_debug = _sim_services.var_debug

def var_ascii():
    return _sim_services.var_ascii()
var_ascii = _sim_services.var_ascii

def var_binary():
    return _sim_services.var_binary()
var_binary = _sim_services.var_binary

def var_binary_nonames():
    return _sim_services.var_binary_nonames()
var_binary_nonames = _sim_services.var_binary_nonames

def var_validate_address(on_off):
    return _sim_services.var_validate_address(on_off)
var_validate_address = _sim_services.var_validate_address

def var_set_copy_mode(mode):
    return _sim_services.var_set_copy_mode(mode)
var_set_copy_mode = _sim_services.var_set_copy_mode

def var_set_write_mode(mode):
    return _sim_services.var_set_write_mode(mode)
var_set_write_mode = _sim_services.var_set_write_mode

def var_set_send_stdio(mode):
    return _sim_services.var_set_send_stdio(mode)
var_set_send_stdio = _sim_services.var_set_send_stdio

def var_sync(mode):
    return _sim_services.var_sync(mode)
var_sync = _sim_services.var_sync

def var_set_frame_multiple(mult):
    return _sim_services.var_set_frame_multiple(mult)
var_set_frame_multiple = _sim_services.var_set_frame_multiple

def var_set_frame_offset(offset):
    return _sim_services.var_set_frame_offset(offset)
var_set_frame_offset = _sim_services.var_set_frame_offset

def var_set_freeze_frame_multiple(mult):
    return _sim_services.var_set_freeze_frame_multiple(mult)
var_set_freeze_frame_multiple = _sim_services.var_set_freeze_frame_multiple

def var_set_freeze_frame_offset(offset):
    return _sim_services.var_set_freeze_frame_offset(offset)
var_set_freeze_frame_offset = _sim_services.var_set_freeze_frame_offset

def var_byteswap(on_off):
    return _sim_services.var_byteswap(on_off)
var_byteswap = _sim_services.var_byteswap

def var_signal():
    return _sim_services.var_signal()
var_signal = _sim_services.var_signal

def var_multicast(on_off):
    return _sim_services.var_multicast(on_off)
var_multicast = _sim_services.var_multicast

def var_send_list_size():
    return _sim_services.var_send_list_size()
var_send_list_size = _sim_services.var_send_list_size

def send_sie_resource():
    return _sim_services.send_sie_resource()
send_sie_resource = _sim_services.send_sie_resource

def send_sie_class():
    return _sim_services.send_sie_class()
send_sie_class = _sim_services.send_sie_class

def send_sie_enum():
    return _sim_services.send_sie_enum()
send_sie_enum = _sim_services.send_sie_enum

def send_sie_top_level_objects():
    return _sim_services.send_sie_top_level_objects()
send_sie_top_level_objects = _sim_services.send_sie_top_level_objects

def send_file(file_name):
    return _sim_services.send_file(file_name)
send_file = _sim_services.send_file

def var_set(*args):
    return _sim_services.var_set(*args)
var_set = _sim_services.var_set

def var_server_log_on():
    return _sim_services.var_server_log_on()
var_server_log_on = _sim_services.var_server_log_on

def var_server_log_off():
    return _sim_services.var_server_log_off()
var_server_log_off = _sim_services.var_server_log_off

def var_server_get_hostname():
    return _sim_services.var_server_get_hostname()
var_server_get_hostname = _sim_services.var_server_get_hostname

def var_server_get_port():
    return _sim_services.var_server_get_port()
var_server_get_port = _sim_services.var_server_get_port

def var_server_set_port(port):
    return _sim_services.var_server_set_port(port)
var_server_set_port = _sim_services.var_server_set_port

def var_server_set_source_address(address):
    return _sim_services.var_server_set_source_address(address)
var_server_set_source_address = _sim_services.var_server_set_source_address

def var_server_get_user_tag():
    return _sim_services.var_server_get_user_tag()
var_server_get_user_tag = _sim_services.var_server_get_user_tag

def var_server_set_user_tag(tag):
    return _sim_services.var_server_set_user_tag(tag)
var_server_set_user_tag = _sim_services.var_server_set_user_tag

def var_server_get_enabled():
    return _sim_services.var_server_get_enabled()
var_server_get_enabled = _sim_services.var_server_get_enabled

def var_server_set_enabled(on_off):
    return _sim_services.var_server_set_enabled(on_off)
var_server_set_enabled = _sim_services.var_server_set_enabled

def var_server_create_tcp_socket(address, port):
    return _sim_services.var_server_create_tcp_socket(address, port)
var_server_create_tcp_socket = _sim_services.var_server_create_tcp_socket

def var_server_create_udp_socket(address, port):
    return _sim_services.var_server_create_udp_socket(address, port)
var_server_create_udp_socket = _sim_services.var_server_create_udp_socket

def var_server_create_multicast_socket(mcast_address, address, port):
    return _sim_services.var_server_create_multicast_socket(mcast_address, address, port)
var_server_create_multicast_socket = _sim_services.var_server_create_multicast_socket

def vval_char(V):
    return _sim_services.vval_char(V)
vval_char = _sim_services.vval_char

def vval_short(V):
    return _sim_services.vval_short(V)
vval_short = _sim_services.vval_short

def vval_int(V):
    return _sim_services.vval_int(V)
vval_int = _sim_services.vval_int

def vval_long(V):
    return _sim_services.vval_long(V)
vval_long = _sim_services.vval_long

def vval_longlong(V):
    return _sim_services.vval_longlong(V)
vval_longlong = _sim_services.vval_longlong

def vval_float(V):
    return _sim_services.vval_float(V)
vval_float = _sim_services.vval_float

def vval_double(V):
    return _sim_services.vval_double(V)
vval_double = _sim_services.vval_double

def vval_string(V):
    return _sim_services.vval_string(V)
vval_string = _sim_services.vval_string

def vval_filep(V):
    return _sim_services.vval_filep(V)
vval_filep = _sim_services.vval_filep

def vval_voidp(V):
    return _sim_services.vval_voidp(V)
vval_voidp = _sim_services.vval_voidp

def delete_v_tree(v_tree):
    return _sim_services.delete_v_tree(v_tree)
delete_v_tree = _sim_services.delete_v_tree

_sim_services.Off_swigconstant(_sim_services)
Off = _sim_services.Off

_sim_services.On_swigconstant(_sim_services)
On = _sim_services.On

_sim_services.No_swigconstant(_sim_services)
No = _sim_services.No

_sim_services.Yes_swigconstant(_sim_services)
Yes = _sim_services.Yes

_sim_services.Disconnect_swigconstant(_sim_services)
Disconnect = _sim_services.Disconnect

_sim_services.Connect_swigconstant(_sim_services)
Connect = _sim_services.Connect

_sim_services.Inactive_swigconstant(_sim_services)
Inactive = _sim_services.Inactive

_sim_services.Active_swigconstant(_sim_services)
Active = _sim_services.Active

_sim_services.Stop_swigconstant(_sim_services)
Stop = _sim_services.Stop

_sim_services.Go_swigconstant(_sim_services)
Go = _sim_services.Go

_sim_services.Low_swigconstant(_sim_services)
Low = _sim_services.Low

_sim_services.High_swigconstant(_sim_services)
High = _sim_services.High

_sim_services.Disable_swigconstant(_sim_services)
Disable = _sim_services.Disable

_sim_services.Enable_swigconstant(_sim_services)
Enable = _sim_services.Enable

_sim_services.TRUE_swigconstant(_sim_services)
TRUE = _sim_services.TRUE

_sim_services.FALSE_swigconstant(_sim_services)
FALSE = _sim_services.FALSE

_sim_services.Open_swigconstant(_sim_services)
Open = _sim_services.Open

_sim_services.Closed_swigconstant(_sim_services)
Closed = _sim_services.Closed

_sim_services.OFF_swigconstant(_sim_services)
OFF = _sim_services.OFF

_sim_services.ON_swigconstant(_sim_services)
ON = _sim_services.ON

_sim_services.NO_swigconstant(_sim_services)
NO = _sim_services.NO

_sim_services.YES_swigconstant(_sim_services)
YES = _sim_services.YES

_sim_services.INACTIVE_swigconstant(_sim_services)
INACTIVE = _sim_services.INACTIVE

_sim_services.ACTIVE_swigconstant(_sim_services)
ACTIVE = _sim_services.ACTIVE

_sim_services.BACKWARD_swigconstant(_sim_services)
BACKWARD = _sim_services.BACKWARD

_sim_services.FORWARD_swigconstant(_sim_services)
FORWARD = _sim_services.FORWARD

_sim_services.BAD_swigconstant(_sim_services)
BAD = _sim_services.BAD

_sim_services.GOOD_swigconstant(_sim_services)
GOOD = _sim_services.GOOD
class UdUnits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UdUnits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UdUnits, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get_u_system"] = lambda x: _sim_services.UdUnits_get_u_system
    if _newclass:
        get_u_system = staticmethod(_sim_services.UdUnits_get_u_system)

    def read_default_xml(self):
        return _sim_services.UdUnits_read_default_xml(self)

    def read_user_xml(self, arg2):
        return _sim_services.UdUnits_read_user_xml(self, arg2)

    def __init__(self):
        this = _sim_services.new_UdUnits()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _sim_services.delete_UdUnits
    __del__ = lambda self: None
UdUnits_swigregister = _sim_services.UdUnits_swigregister
UdUnits_swigregister(UdUnits)

def UdUnits_get_u_system():
    return _sim_services.UdUnits_get_u_system()
UdUnits_get_u_system = _sim_services.UdUnits_get_u_system

class IntegratorConstructorFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegratorConstructorFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegratorConstructorFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _sim_services.IntegratorConstructorFactory_create
    if _newclass:
        create = staticmethod(_sim_services.IntegratorConstructorFactory_create)
IntegratorConstructorFactory_swigregister = _sim_services.IntegratorConstructorFactory_swigregister
IntegratorConstructorFactory_swigregister(IntegratorConstructorFactory)

def IntegratorConstructorFactory_create(type):
    return _sim_services.IntegratorConstructorFactory_create(type)
IntegratorConstructorFactory_create = _sim_services.IntegratorConstructorFactory_create

class IntegrableObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrableObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrableObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegrableObject
    __del__ = lambda self: None

    def create_integrators(self, generator, controls, time_if):
        return _sim_services.IntegrableObject_create_integrators(self, generator, controls, time_if)

    def destroy_integrators(self):
        return _sim_services.IntegrableObject_destroy_integrators(self)

    def reset_integrators(self):
        return _sim_services.IntegrableObject_reset_integrators(self)

    def integrate(self, dyn_dt, target_stage):
        return _sim_services.IntegrableObject_integrate(self, dyn_dt, target_stage)

    def set_integration_group(self, integ_group_in):
        return _sim_services.IntegrableObject_set_integration_group(self, integ_group_in)

    def clear_integration_group(self):
        return _sim_services.IntegrableObject_clear_integration_group(self)

    def get_integration_group(self):
        return _sim_services.IntegrableObject_get_integration_group(self)
IntegrableObject_swigregister = _sim_services.IntegrableObject_swigregister
IntegrableObject_swigregister(IntegrableObject)


import os
import linecache
import re

curr_dir = os.getcwd()
exclude_dir = os.getcwd() + "/trick"

def traceit(frame, event, arg):
    if event == "line":
        lineno = frame.f_lineno
        filename = frame.f_code.co_filename
        if ( not filename.startswith(exclude_dir) and not filename.startswith("/usr")):
            if (filename.endswith(".pyc") or
                filename.endswith(".pyo")):
                filename = filename[:-1]
            line = linecache.getline(filename, lineno)
            print (filename,":",lineno,": ",line.rstrip())
    return traceit

# This file is compatible with both classic and new-style classes.


