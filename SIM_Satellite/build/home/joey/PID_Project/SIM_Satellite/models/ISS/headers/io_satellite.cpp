/**
 * This file was automatically generated by the ICG based on the file:
 * /home/joey/PID_Project/SIM_Satellite/models/ISS/headers/satellite.h
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/home/joey/PID_Project/SIM_Satellite/models/ISS/headers/satellite.h"

extern "C" {

ATTRIBUTES attrSatellite[] = {
{"standardVelocity", "double", "m", "", "",
  "Constant factual velocity of satellite",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"desiredRadius", "double", "m", "", "",
  "Desired radius of satellite from \"Earth\"",
  10,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  8, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"gravitational", "double", "1", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  16, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"actualAcceleration", "double", "m/s2", "", "",
  "r-acceleration",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  24, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"actualVelocity", "double", "m/s", "", "",
  "r-velocity",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  32, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"actualRadius", "double", "m", "", "",
  "r-position",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  40, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"time", "double", "s", "", "",
  "Model time",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"counter", "int", "1", "", "",
  "",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 0,
  56, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"


void init_attrSatellite() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

}

extern "C" {

void init_attrSatellite_c_intf() {
    init_attrSatellite() ;
}

size_t io_src_sizeof_Satellite() {
    return sizeof(Satellite) ;
}

void* io_src_allocate_Satellite(int num) {
    Satellite* temp = (Satellite*)calloc(num, sizeof(Satellite));
    return (void*)temp;
}

void io_src_destruct_Satellite(void* address __attribute__((unused)), int num __attribute__((unused))) {
}

void io_src_delete_Satellite(void* address __attribute__((unused))) {}

} //extern "C"

struct UnitsMapSatellite {
    UnitsMapSatellite() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("Satellite_standardVelocity", "m") ;
        units_map_ptr->add_param("Satellite_desiredRadius", "m") ;
        units_map_ptr->add_param("Satellite_gravitational", "1") ;
        units_map_ptr->add_param("Satellite_actualAcceleration", "m/s2") ;
        units_map_ptr->add_param("Satellite_actualVelocity", "m/s") ;
        units_map_ptr->add_param("Satellite_actualRadius", "m") ;
        units_map_ptr->add_param("Satellite_time", "s") ;
        units_map_ptr->add_param("Satellite_counter", "1") ;
    }
} umSatellite;

